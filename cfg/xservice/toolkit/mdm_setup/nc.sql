DROP TABLE SYS_NC_SQLS CASCADE CONSTRAINTS;

CREATE TABLE SYS_NC_SQLS (TABLE_NAME VARCHAR2(400),SQLSTRING LONG);

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET', 'INSERT INTO NC_GRP_ATTR_SET ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_SET_NAME,ATTRIBUTE_SET_DESCRIPTION,GROUP_CLASS_ID,UPDT_PRIORITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_SET_NAME,ATTRIBUTE_SET_DESCRIPTION,GROUP_CLASS_ID,UPDT_PRIORITY,''INSERT'',''VALID'' FROM IN_GRP_ATTR_SET t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_ATTR_SET t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET', 'INSERT INTO NC_GRP_ATTR_SET ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_SET_NAME,ATTRIBUTE_SET_DESCRIPTION,GROUP_CLASS_ID,UPDT_PRIORITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_SET_NAME,ATTRIBUTE_SET_DESCRIPTION,GROUP_CLASS_ID,UPDT_PRIORITY,''DELETE'',''VALID'' FROM MST_GRP_ATTR_SET t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_ATTR_SET t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_ATTR_SET t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET', 'INSERT INTO NC_GRP_ATTR_SET ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_SET_NAME,ATTRIBUTE_SET_DESCRIPTION,GROUP_CLASS_ID,UPDT_PRIORITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ATTRIBUTE_SET_ID,t1.ATTRIBUTE_SET_NAME,t1.ATTRIBUTE_SET_DESCRIPTION,t1.GROUP_CLASS_ID,t1.UPDT_PRIORITY,''UPDATE'',''VALID'' FROM IN_GRP_ATTR_SET t1, MST_GRP_ATTR_SET t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Attribute_Set_Id <> t2.Attribute_Set_Id OR ( t1.Attribute_Set_Id IS NULL AND t2.Attribute_Set_Id IS NOT NULL) OR (t1.Attribute_Set_Id IS NOT NULL AND t2.Attribute_Set_Id IS NULL)) OR (t1.Attribute_Set_Name <> t2.Attribute_Set_Name OR ( t1.Attribute_Set_Name IS NULL AND t2.Attribute_Set_Name IS NOT NULL) OR (t1.Attribute_Set_Name IS NOT NULL AND t2.Attribute_Set_Name IS NULL)) OR (t1.Attribute_Set_Description <> t2.Attribute_Set_Description OR ( t1.Attribute_Set_Description IS NULL AND t2.Attribute_Set_Description IS NOT NULL) OR (t1.Attribute_Set_Description IS NOT NULL AND t2.Attribute_Set_Description IS NULL)) OR (t1.Group_Class_Id <> t2.Group_Class_Id OR ( t1.Group_Class_Id IS NULL AND t2.Group_Class_Id IS NOT NULL) OR (t1.Group_Class_Id IS NOT NULL AND t2.Group_Class_Id IS NULL)) OR (t1.Updt_Priority <> t2.Updt_Priority OR ( t1.Updt_Priority IS NULL AND t2.Updt_Priority IS NOT NULL) OR (t1.Updt_Priority IS NOT NULL AND t2.Updt_Priority IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET', 'INSERT INTO NC_GRP_ATTR_SET ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_SET_NAME,ATTRIBUTE_SET_DESCRIPTION,GROUP_CLASS_ID,UPDT_PRIORITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ATTRIBUTE_SET_ID,t1.ATTRIBUTE_SET_NAME,t1.ATTRIBUTE_SET_DESCRIPTION,t1.GROUP_CLASS_ID,t1.UPDT_PRIORITY,''ACTIVATE'',''VALID'' FROM IN_GRP_ATTR_SET t1, MST_GRP_ATTR_SET t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET_DETAIL', 'INSERT INTO NC_GRP_ATTR_SET_DETAIL ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_DESCRIPTION,UPDT_PHY_COL_NAME,UPDT_LOG_COL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_DESCRIPTION,UPDT_PHY_COL_NAME,UPDT_LOG_COL_NAME,''INSERT'',''VALID'' FROM IN_GRP_ATTR_SET_DETAIL t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_ATTR_SET_DETAIL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET_DETAIL', 'INSERT INTO NC_GRP_ATTR_SET_DETAIL ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_DESCRIPTION,UPDT_PHY_COL_NAME,UPDT_LOG_COL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_DESCRIPTION,UPDT_PHY_COL_NAME,UPDT_LOG_COL_NAME,''DELETE'',''VALID'' FROM MST_GRP_ATTR_SET_DETAIL t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_ATTR_SET_DETAIL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_ATTR_SET_DETAIL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET_DETAIL', 'INSERT INTO NC_GRP_ATTR_SET_DETAIL ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_DESCRIPTION,UPDT_PHY_COL_NAME,UPDT_LOG_COL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ATTRIBUTE_SET_ID,t1.ATTRIBUTE_DESCRIPTION,t1.UPDT_PHY_COL_NAME,t1.UPDT_LOG_COL_NAME,''UPDATE'',''VALID'' FROM IN_GRP_ATTR_SET_DETAIL t1, MST_GRP_ATTR_SET_DETAIL t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Attribute_Set_Id <> t2.Attribute_Set_Id OR ( t1.Attribute_Set_Id IS NULL AND t2.Attribute_Set_Id IS NOT NULL) OR (t1.Attribute_Set_Id IS NOT NULL AND t2.Attribute_Set_Id IS NULL)) OR (t1.Attribute_Description <> t2.Attribute_Description OR ( t1.Attribute_Description IS NULL AND t2.Attribute_Description IS NOT NULL) OR (t1.Attribute_Description IS NOT NULL AND t2.Attribute_Description IS NULL)) OR (t1.Updt_Phy_Col_Name <> t2.Updt_Phy_Col_Name OR ( t1.Updt_Phy_Col_Name IS NULL AND t2.Updt_Phy_Col_Name IS NOT NULL) OR (t1.Updt_Phy_Col_Name IS NOT NULL AND t2.Updt_Phy_Col_Name IS NULL)) OR (t1.Updt_Log_Col_Name <> t2.Updt_Log_Col_Name OR ( t1.Updt_Log_Col_Name IS NULL AND t2.Updt_Log_Col_Name IS NOT NULL) OR (t1.Updt_Log_Col_Name IS NOT NULL AND t2.Updt_Log_Col_Name IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_SET_DETAIL', 'INSERT INTO NC_GRP_ATTR_SET_DETAIL ( SCENARIO_ID,ATTRIBUTE_SET_ID,ATTRIBUTE_DESCRIPTION,UPDT_PHY_COL_NAME,UPDT_LOG_COL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ATTRIBUTE_SET_ID,t1.ATTRIBUTE_DESCRIPTION,t1.UPDT_PHY_COL_NAME,t1.UPDT_LOG_COL_NAME,''ACTIVATE'',''VALID'' FROM IN_GRP_ATTR_SET_DETAIL t1, MST_GRP_ATTR_SET_DETAIL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CLASSIFICATION_ERROR_MAP', 'INSERT INTO NC_CLASSIFICATION_ERROR_MAP ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,SURR_KEY,ERROR_MESSAGE_ID,UI_ADDRESS,SEVERITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_CLASSIFICATION_ID,SURR_KEY,ERROR_MESSAGE_ID,UI_ADDRESS,SEVERITY,''INSERT'',''VALID'' FROM IN_CLASSIFICATION_ERROR_MAP t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_CLASSIFICATION_ERROR_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.surrKey = t2.surrKey )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CLASSIFICATION_ERROR_MAP', 'INSERT INTO NC_CLASSIFICATION_ERROR_MAP ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,SURR_KEY,ERROR_MESSAGE_ID,UI_ADDRESS,SEVERITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_CLASSIFICATION_ID,SURR_KEY,ERROR_MESSAGE_ID,UI_ADDRESS,SEVERITY,''DELETE'',''VALID'' FROM MST_CLASSIFICATION_ERROR_MAP t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_CLASSIFICATION_ERROR_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.surrKey = t2.surrKey ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_CLASSIFICATION_ERROR_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.surrKey = t2.surrKey));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CLASSIFICATION_ERROR_MAP', 'INSERT INTO NC_CLASSIFICATION_ERROR_MAP ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,SURR_KEY,ERROR_MESSAGE_ID,UI_ADDRESS,SEVERITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_CLASSIFICATION_ID,t1.SURR_KEY,t1.ERROR_MESSAGE_ID,t1.UI_ADDRESS,t1.SEVERITY,''UPDATE'',''VALID'' FROM IN_CLASSIFICATION_ERROR_MAP t1, MST_CLASSIFICATION_ERROR_MAP t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.surrKey = t2.surrKey AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.entityClassificationID <> t2.entityClassificationID OR ( t1.entityClassificationID IS NULL AND t2.entityClassificationID IS NOT NULL) OR (t1.entityClassificationID IS NOT NULL AND t2.entityClassificationID IS NULL)) OR (t1.surrKey <> t2.surrKey OR ( t1.surrKey IS NULL AND t2.surrKey IS NOT NULL) OR (t1.surrKey IS NOT NULL AND t2.surrKey IS NULL)) OR (t1.errorMessageID <> t2.errorMessageID OR ( t1.errorMessageID IS NULL AND t2.errorMessageID IS NOT NULL) OR (t1.errorMessageID IS NOT NULL AND t2.errorMessageID IS NULL)) OR (t1.uiAddress <> t2.uiAddress OR ( t1.uiAddress IS NULL AND t2.uiAddress IS NOT NULL) OR (t1.uiAddress IS NOT NULL AND t2.uiAddress IS NULL)) OR (t1.severity <> t2.severity OR ( t1.severity IS NULL AND t2.severity IS NOT NULL) OR (t1.severity IS NOT NULL AND t2.severity IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CLASSIFICATION_ERROR_MAP', 'INSERT INTO NC_CLASSIFICATION_ERROR_MAP ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,SURR_KEY,ERROR_MESSAGE_ID,UI_ADDRESS,SEVERITY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_CLASSIFICATION_ID,t1.SURR_KEY,t1.ERROR_MESSAGE_ID,t1.UI_ADDRESS,t1.SEVERITY,''ACTIVATE'',''VALID'' FROM IN_CLASSIFICATION_ERROR_MAP t1, MST_CLASSIFICATION_ERROR_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.surrKey = t2.surrKey AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET', 'INSERT INTO NC_CODE_SET ( SCENARIO_ID,Code_Set_Id,Description,Map_Table_Name,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,IS_EDITABLE,IS_PROMOTED,NAME,PARENT_CODE_SET_ID,Is_Custom_Map_Table,Values_Table_Name,Reference_Desc_Table_Name,SERVICE_NAME,DATABASE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Description,Map_Table_Name,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,IS_EDITABLE,IS_PROMOTED,NAME,PARENT_CODE_SET_ID,Is_Custom_Map_Table,Values_Table_Name,Reference_Desc_Table_Name,SERVICE_NAME,DATABASE_NAME,''INSERT'',''VALID'' FROM IN_CODE_SET t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_CODE_SET t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET', 'INSERT INTO NC_CODE_SET ( SCENARIO_ID,Code_Set_Id,Description,Map_Table_Name,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,IS_EDITABLE,IS_PROMOTED,NAME,PARENT_CODE_SET_ID,Is_Custom_Map_Table,Values_Table_Name,Reference_Desc_Table_Name,SERVICE_NAME,DATABASE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Description,Map_Table_Name,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,IS_EDITABLE,IS_PROMOTED,NAME,PARENT_CODE_SET_ID,Is_Custom_Map_Table,Values_Table_Name,Reference_Desc_Table_Name,SERVICE_NAME,DATABASE_NAME,''DELETE'',''VALID'' FROM MST_CODE_SET t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_CODE_SET t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_CODE_SET t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET', 'INSERT INTO NC_CODE_SET ( SCENARIO_ID,Code_Set_Id,Description,Map_Table_Name,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,IS_EDITABLE,IS_PROMOTED,NAME,PARENT_CODE_SET_ID,Is_Custom_Map_Table,Values_Table_Name,Reference_Desc_Table_Name,SERVICE_NAME,DATABASE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Description,t1.Map_Table_Name,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,t1.IS_EDITABLE,t1.IS_PROMOTED,t1.NAME,t1.PARENT_CODE_SET_ID,t1.Is_Custom_Map_Table,t1.Values_Table_Name,t1.Reference_Desc_Table_Name,t1.SERVICE_NAME,t1.DATABASE_NAME,''UPDATE'',''VALID'' FROM IN_CODE_SET t1, MST_CODE_SET t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Map_Table_Name <> t2.Map_Table_Name OR ( t1.Map_Table_Name IS NULL AND t2.Map_Table_Name IS NOT NULL) OR (t1.Map_Table_Name IS NOT NULL AND t2.Map_Table_Name IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Record_Deleted_Flag <> t2.Record_Deleted_Flag OR ( t1.Record_Deleted_Flag IS NULL AND t2.Record_Deleted_Flag IS NOT NULL) OR (t1.Record_Deleted_Flag IS NOT NULL AND t2.Record_Deleted_Flag IS NULL)) OR (t1.Ctl_Id <> t2.Ctl_Id OR ( t1.Ctl_Id IS NULL AND t2.Ctl_Id IS NOT NULL) OR (t1.Ctl_Id IS NOT NULL AND t2.Ctl_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Update_Process_Name <> t2.Update_Process_Name OR ( t1.Update_Process_Name IS NULL AND t2.Update_Process_Name IS NOT NULL) OR (t1.Update_Process_Name IS NOT NULL AND t2.Update_Process_Name IS NULL)) OR (t1.Update_Process_Id <> t2.Update_Process_Id OR ( t1.Update_Process_Id IS NULL AND t2.Update_Process_Id IS NOT NULL) OR (t1.Update_Process_Id IS NOT NULL AND t2.Update_Process_Id IS NULL)) OR (t1.IS_EDITABLE <> t2.IS_EDITABLE OR ( t1.IS_EDITABLE IS NULL AND t2.IS_EDITABLE IS NOT NULL) OR (t1.IS_EDITABLE IS NOT NULL AND t2.IS_EDITABLE IS NULL)) OR (t1.IS_PROMOTED <> t2.IS_PROMOTED OR ( t1.IS_PROMOTED IS NULL AND t2.IS_PROMOTED IS NOT NULL) OR (t1.IS_PROMOTED IS NOT NULL AND t2.IS_PROMOTED IS NULL)) OR (t1.Code_Name <> t2.Code_Name OR ( t1.Code_Name IS NULL AND t2.Code_Name IS NOT NULL) OR (t1.Code_Name IS NOT NULL AND t2.Code_Name IS NULL)) OR (t1.Parent_Code_Set_Id <> t2.Parent_Code_Set_Id OR ( t1.Parent_Code_Set_Id IS NULL AND t2.Parent_Code_Set_Id IS NOT NULL) OR (t1.Parent_Code_Set_Id IS NOT NULL AND t2.Parent_Code_Set_Id IS NULL)) OR (t1.Is_Custom_Map_Table <> t2.Is_Custom_Map_Table OR ( t1.Is_Custom_Map_Table IS NULL AND t2.Is_Custom_Map_Table IS NOT NULL) OR (t1.Is_Custom_Map_Table IS NOT NULL AND t2.Is_Custom_Map_Table IS NULL)) OR (t1.Values_Table_Name <> t2.Values_Table_Name OR ( t1.Values_Table_Name IS NULL AND t2.Values_Table_Name IS NOT NULL) OR (t1.Values_Table_Name IS NOT NULL AND t2.Values_Table_Name IS NULL)) OR (t1.Reference_Desc_Table_Name <> t2.Reference_Desc_Table_Name OR ( t1.Reference_Desc_Table_Name IS NULL AND t2.Reference_Desc_Table_Name IS NOT NULL) OR (t1.Reference_Desc_Table_Name IS NOT NULL AND t2.Reference_Desc_Table_Name IS NULL)) OR (t1.Service_Name <> t2.Service_Name OR ( t1.Service_Name IS NULL AND t2.Service_Name IS NOT NULL) OR (t1.Service_Name IS NOT NULL AND t2.Service_Name IS NULL)) OR (t1.Database_Name <> t2.Database_Name OR ( t1.Database_Name IS NULL AND t2.Database_Name IS NOT NULL) OR (t1.Database_Name IS NOT NULL AND t2.Database_Name IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET', 'INSERT INTO NC_CODE_SET ( SCENARIO_ID,Code_Set_Id,Description,Map_Table_Name,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,IS_EDITABLE,IS_PROMOTED,NAME,PARENT_CODE_SET_ID,Is_Custom_Map_Table,Values_Table_Name,Reference_Desc_Table_Name,SERVICE_NAME,DATABASE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Description,t1.Map_Table_Name,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,t1.IS_EDITABLE,t1.IS_PROMOTED,t1.NAME,t1.PARENT_CODE_SET_ID,t1.Is_Custom_Map_Table,t1.Values_Table_Name,t1.Reference_Desc_Table_Name,t1.SERVICE_NAME,t1.DATABASE_NAME,''ACTIVATE'',''VALID'' FROM IN_CODE_SET t1, MST_CODE_SET t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET_STATS', 'INSERT INTO NC_CODE_SET_STATS ( SCENARIO_ID,Code_Set_Id,Value_Id_Count,Mapped_Source_Count,Unmapped_Source_Count,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Value_Id_Count,Mapped_Source_Count,Unmapped_Source_Count,''INSERT'',''VALID'' FROM IN_CODE_SET_STATS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_CODE_SET_STATS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET_STATS', 'INSERT INTO NC_CODE_SET_STATS ( SCENARIO_ID,Code_Set_Id,Value_Id_Count,Mapped_Source_Count,Unmapped_Source_Count,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Value_Id_Count,Mapped_Source_Count,Unmapped_Source_Count,''DELETE'',''VALID'' FROM MST_CODE_SET_STATS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_CODE_SET_STATS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_CODE_SET_STATS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET_STATS', 'INSERT INTO NC_CODE_SET_STATS ( SCENARIO_ID,Code_Set_Id,Value_Id_Count,Mapped_Source_Count,Unmapped_Source_Count,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Value_Id_Count,t1.Mapped_Source_Count,t1.Unmapped_Source_Count,''UPDATE'',''VALID'' FROM IN_CODE_SET_STATS t1, MST_CODE_SET_STATS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.Value_Id_Count <> t2.Value_Id_Count OR ( t1.Value_Id_Count IS NULL AND t2.Value_Id_Count IS NOT NULL) OR (t1.Value_Id_Count IS NOT NULL AND t2.Value_Id_Count IS NULL)) OR (t1.Mapped_Source_Count <> t2.Mapped_Source_Count OR ( t1.Mapped_Source_Count IS NULL AND t2.Mapped_Source_Count IS NOT NULL) OR (t1.Mapped_Source_Count IS NOT NULL AND t2.Mapped_Source_Count IS NULL)) OR (t1.Unmapped_Source_Count <> t2.Unmapped_Source_Count OR ( t1.Unmapped_Source_Count IS NULL AND t2.Unmapped_Source_Count IS NOT NULL) OR (t1.Unmapped_Source_Count IS NOT NULL AND t2.Unmapped_Source_Count IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CODE_SET_STATS', 'INSERT INTO NC_CODE_SET_STATS ( SCENARIO_ID,Code_Set_Id,Value_Id_Count,Mapped_Source_Count,Unmapped_Source_Count,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Value_Id_Count,t1.Mapped_Source_Count,t1.Unmapped_Source_Count,''ACTIVATE'',''VALID'' FROM IN_CODE_SET_STATS t1, MST_CODE_SET_STATS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_XREF_REL', 'INSERT INTO NC_XREF_REL ( SCENARIO_ID,XREF_ID,ROM_ID,PARENT_MATCH_COL_LIST,CHILD_MATCH_COL_LIST,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,XREF_ID,ROM_ID,PARENT_MATCH_COL_LIST,CHILD_MATCH_COL_LIST,''INSERT'',''VALID'' FROM IN_XREF_REL t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_XREF_REL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND t1.XRefId = t2.XRefId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_XREF_REL', 'INSERT INTO NC_XREF_REL ( SCENARIO_ID,XREF_ID,ROM_ID,PARENT_MATCH_COL_LIST,CHILD_MATCH_COL_LIST,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,XREF_ID,ROM_ID,PARENT_MATCH_COL_LIST,CHILD_MATCH_COL_LIST,''DELETE'',''VALID'' FROM MST_XREF_REL t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_XREF_REL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND t1.XRefId = t2.XRefId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_XREF_REL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND t1.XRefId = t2.XRefId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_XREF_REL', 'INSERT INTO NC_XREF_REL ( SCENARIO_ID,XREF_ID,ROM_ID,PARENT_MATCH_COL_LIST,CHILD_MATCH_COL_LIST,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.XREF_ID,t1.ROM_ID,t1.PARENT_MATCH_COL_LIST,t1.CHILD_MATCH_COL_LIST,''UPDATE'',''VALID'' FROM IN_XREF_REL t1, MST_XREF_REL t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND t1.XRefId = t2.XRefId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.XRefId <> t2.XRefId OR ( t1.XRefId IS NULL AND t2.XRefId IS NOT NULL) OR (t1.XRefId IS NOT NULL AND t2.XRefId IS NULL)) OR (t1.RomId <> t2.RomId OR ( t1.RomId IS NULL AND t2.RomId IS NOT NULL) OR (t1.RomId IS NOT NULL AND t2.RomId IS NULL)) OR (t1.ParentMatchColumnList <> t2.ParentMatchColumnList OR ( t1.ParentMatchColumnList IS NULL AND t2.ParentMatchColumnList IS NOT NULL) OR (t1.ParentMatchColumnList IS NOT NULL AND t2.ParentMatchColumnList IS NULL)) OR (t1.ChildMatchColumnList <> t2.ChildMatchColumnList OR ( t1.ChildMatchColumnList IS NULL AND t2.ChildMatchColumnList IS NOT NULL) OR (t1.ChildMatchColumnList IS NOT NULL AND t2.ChildMatchColumnList IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_XREF_REL', 'INSERT INTO NC_XREF_REL ( SCENARIO_ID,XREF_ID,ROM_ID,PARENT_MATCH_COL_LIST,CHILD_MATCH_COL_LIST,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.XREF_ID,t1.ROM_ID,t1.PARENT_MATCH_COL_LIST,t1.CHILD_MATCH_COL_LIST,''ACTIVATE'',''VALID'' FROM IN_XREF_REL t1, MST_XREF_REL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND t1.XRefId = t2.XRefId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CROSS_REFERENCE', 'INSERT INTO NC_CROSS_REFERENCE ( SCENARIO_ID,XREF_ID,XREF_NAME,GOLDEN_RO_ID,XREF_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,XREF_ID,XREF_NAME,GOLDEN_RO_ID,XREF_DESCRIPTION,''INSERT'',''VALID'' FROM IN_CROSS_REFERENCE t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_CROSS_REFERENCE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.XRefId = t2.XRefId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CROSS_REFERENCE', 'INSERT INTO NC_CROSS_REFERENCE ( SCENARIO_ID,XREF_ID,XREF_NAME,GOLDEN_RO_ID,XREF_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,XREF_ID,XREF_NAME,GOLDEN_RO_ID,XREF_DESCRIPTION,''DELETE'',''VALID'' FROM MST_CROSS_REFERENCE t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_CROSS_REFERENCE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.XRefId = t2.XRefId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_CROSS_REFERENCE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.XRefId = t2.XRefId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CROSS_REFERENCE', 'INSERT INTO NC_CROSS_REFERENCE ( SCENARIO_ID,XREF_ID,XREF_NAME,GOLDEN_RO_ID,XREF_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.XREF_ID,t1.XREF_NAME,t1.GOLDEN_RO_ID,t1.XREF_DESCRIPTION,''UPDATE'',''VALID'' FROM IN_CROSS_REFERENCE t1, MST_CROSS_REFERENCE t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.XRefId = t2.XRefId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.XRefId <> t2.XRefId OR ( t1.XRefId IS NULL AND t2.XRefId IS NOT NULL) OR (t1.XRefId IS NOT NULL AND t2.XRefId IS NULL)) OR (t1.XRefName <> t2.XRefName OR ( t1.XRefName IS NULL AND t2.XRefName IS NOT NULL) OR (t1.XRefName IS NOT NULL AND t2.XRefName IS NULL)) OR (t1.GoldenRelObjId <> t2.GoldenRelObjId OR ( t1.GoldenRelObjId IS NULL AND t2.GoldenRelObjId IS NOT NULL) OR (t1.GoldenRelObjId IS NOT NULL AND t2.GoldenRelObjId IS NULL)) OR (t1.XRefDecription <> t2.XRefDecription OR ( t1.XRefDecription IS NULL AND t2.XRefDecription IS NOT NULL) OR (t1.XRefDecription IS NOT NULL AND t2.XRefDecription IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CROSS_REFERENCE', 'INSERT INTO NC_CROSS_REFERENCE ( SCENARIO_ID,XREF_ID,XREF_NAME,GOLDEN_RO_ID,XREF_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.XREF_ID,t1.XREF_NAME,t1.GOLDEN_RO_ID,t1.XREF_DESCRIPTION,''ACTIVATE'',''VALID'' FROM IN_CROSS_REFERENCE t1, MST_CROSS_REFERENCE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.XRefId = t2.XRefId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CUSTOM_CODE_SET_CLM', 'INSERT INTO NC_CUSTOM_CODE_SET_CLM ( SCENARIO_ID,Code_Set_Id,Column_Type,Logical_Column_Name,Physical_Column_Name,Column_Sequence,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Column_Type,Logical_Column_Name,Physical_Column_Name,Column_Sequence,''INSERT'',''VALID'' FROM IN_CUSTOM_CODE_SET_CLM t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_CUSTOM_CODE_SET_CLM t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Column_Type = t2.Column_Type AND t1.Logical_Column_Name = t2.Logical_Column_Name )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CUSTOM_CODE_SET_CLM', 'INSERT INTO NC_CUSTOM_CODE_SET_CLM ( SCENARIO_ID,Code_Set_Id,Column_Type,Logical_Column_Name,Physical_Column_Name,Column_Sequence,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Column_Type,Logical_Column_Name,Physical_Column_Name,Column_Sequence,''DELETE'',''VALID'' FROM MST_CUSTOM_CODE_SET_CLM t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_CUSTOM_CODE_SET_CLM t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Column_Type = t2.Column_Type AND t1.Logical_Column_Name = t2.Logical_Column_Name ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_CUSTOM_CODE_SET_CLM t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Column_Type = t2.Column_Type AND t1.Logical_Column_Name = t2.Logical_Column_Name));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CUSTOM_CODE_SET_CLM', 'INSERT INTO NC_CUSTOM_CODE_SET_CLM ( SCENARIO_ID,Code_Set_Id,Column_Type,Logical_Column_Name,Physical_Column_Name,Column_Sequence,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Column_Type,t1.Logical_Column_Name,t1.Physical_Column_Name,t1.Column_Sequence,''UPDATE'',''VALID'' FROM IN_CUSTOM_CODE_SET_CLM t1, MST_CUSTOM_CODE_SET_CLM t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Column_Type = t2.Column_Type AND t1.Logical_Column_Name = t2.Logical_Column_Name AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.Column_Type <> t2.Column_Type OR ( t1.Column_Type IS NULL AND t2.Column_Type IS NOT NULL) OR (t1.Column_Type IS NOT NULL AND t2.Column_Type IS NULL)) OR (t1.Logical_Column_Name <> t2.Logical_Column_Name OR ( t1.Logical_Column_Name IS NULL AND t2.Logical_Column_Name IS NOT NULL) OR (t1.Logical_Column_Name IS NOT NULL AND t2.Logical_Column_Name IS NULL)) OR (t1.Physical_Column_Name <> t2.Physical_Column_Name OR ( t1.Physical_Column_Name IS NULL AND t2.Physical_Column_Name IS NOT NULL) OR (t1.Physical_Column_Name IS NOT NULL AND t2.Physical_Column_Name IS NULL)) OR (t1.Column_Sequence <> t2.Column_Sequence OR ( t1.Column_Sequence IS NULL AND t2.Column_Sequence IS NOT NULL) OR (t1.Column_Sequence IS NOT NULL AND t2.Column_Sequence IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_CUSTOM_CODE_SET_CLM', 'INSERT INTO NC_CUSTOM_CODE_SET_CLM ( SCENARIO_ID,Code_Set_Id,Column_Type,Logical_Column_Name,Physical_Column_Name,Column_Sequence,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Column_Type,t1.Logical_Column_Name,t1.Physical_Column_Name,t1.Column_Sequence,''ACTIVATE'',''VALID'' FROM IN_CUSTOM_CODE_SET_CLM t1, MST_CUSTOM_CODE_SET_CLM t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Column_Type = t2.Column_Type AND t1.Logical_Column_Name = t2.Logical_Column_Name AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_DOMAIN', 'INSERT INTO NC_DOMAIN ( SCENARIO_ID,Code_Set_Id,Domain_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Domain_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,''INSERT'',''VALID'' FROM IN_DOMAIN t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_DOMAIN t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Domain_Id = t2.Domain_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_DOMAIN', 'INSERT INTO NC_DOMAIN ( SCENARIO_ID,Code_Set_Id,Domain_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Code_Set_Id,Domain_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,''DELETE'',''VALID'' FROM MST_DOMAIN t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_DOMAIN t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Domain_Id = t2.Domain_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_DOMAIN t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Domain_Id = t2.Domain_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_DOMAIN', 'INSERT INTO NC_DOMAIN ( SCENARIO_ID,Code_Set_Id,Domain_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Domain_Id,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,''UPDATE'',''VALID'' FROM IN_DOMAIN t1, MST_DOMAIN t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Domain_Id = t2.Domain_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.Domain_Id <> t2.Domain_Id OR ( t1.Domain_Id IS NULL AND t2.Domain_Id IS NOT NULL) OR (t1.Domain_Id IS NOT NULL AND t2.Domain_Id IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Record_Deleted_Flag <> t2.Record_Deleted_Flag OR ( t1.Record_Deleted_Flag IS NULL AND t2.Record_Deleted_Flag IS NOT NULL) OR (t1.Record_Deleted_Flag IS NOT NULL AND t2.Record_Deleted_Flag IS NULL)) OR (t1.Ctl_Id <> t2.Ctl_Id OR ( t1.Ctl_Id IS NULL AND t2.Ctl_Id IS NOT NULL) OR (t1.Ctl_Id IS NOT NULL AND t2.Ctl_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Update_Process_Name <> t2.Update_Process_Name OR ( t1.Update_Process_Name IS NULL AND t2.Update_Process_Name IS NOT NULL) OR (t1.Update_Process_Name IS NOT NULL AND t2.Update_Process_Name IS NULL)) OR (t1.Update_Process_Id <> t2.Update_Process_Id OR ( t1.Update_Process_Id IS NULL AND t2.Update_Process_Id IS NOT NULL) OR (t1.Update_Process_Id IS NOT NULL AND t2.Update_Process_Id IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_DOMAIN', 'INSERT INTO NC_DOMAIN ( SCENARIO_ID,Code_Set_Id,Domain_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Code_Set_Id,t1.Domain_Id,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,''ACTIVATE'',''VALID'' FROM IN_DOMAIN t1, MST_DOMAIN t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Domain_Id = t2.Domain_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_CLASSIFICATION', 'INSERT INTO NC_ENTITY_CLASSIFICATION ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,CLASSIFICATION,SERVICE,TABLENAME,DOCUMENT_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_CLASSIFICATION_ID,CLASSIFICATION,SERVICE,TABLENAME,DOCUMENT_NAME,''INSERT'',''VALID'' FROM IN_ENTITY_CLASSIFICATION t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_ENTITY_CLASSIFICATION t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.entityClassificationID = t2.entityClassificationID )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_CLASSIFICATION', 'INSERT INTO NC_ENTITY_CLASSIFICATION ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,CLASSIFICATION,SERVICE,TABLENAME,DOCUMENT_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_CLASSIFICATION_ID,CLASSIFICATION,SERVICE,TABLENAME,DOCUMENT_NAME,''DELETE'',''VALID'' FROM MST_ENTITY_CLASSIFICATION t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_ENTITY_CLASSIFICATION t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.entityClassificationID = t2.entityClassificationID ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_ENTITY_CLASSIFICATION t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.entityClassificationID = t2.entityClassificationID));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_CLASSIFICATION', 'INSERT INTO NC_ENTITY_CLASSIFICATION ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,CLASSIFICATION,SERVICE,TABLENAME,DOCUMENT_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_CLASSIFICATION_ID,t1.CLASSIFICATION,t1.SERVICE,t1.TABLENAME,t1.DOCUMENT_NAME,''UPDATE'',''VALID'' FROM IN_ENTITY_CLASSIFICATION t1, MST_ENTITY_CLASSIFICATION t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.entityClassificationID = t2.entityClassificationID AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.entityClassificationID <> t2.entityClassificationID OR ( t1.entityClassificationID IS NULL AND t2.entityClassificationID IS NOT NULL) OR (t1.entityClassificationID IS NOT NULL AND t2.entityClassificationID IS NULL)) OR (t1.classification <> t2.classification OR ( t1.classification IS NULL AND t2.classification IS NOT NULL) OR (t1.classification IS NOT NULL AND t2.classification IS NULL)) OR (t1.service <> t2.service OR ( t1.service IS NULL AND t2.service IS NOT NULL) OR (t1.service IS NOT NULL AND t2.service IS NULL)) OR (t1.tablename <> t2.tablename OR ( t1.tablename IS NULL AND t2.tablename IS NOT NULL) OR (t1.tablename IS NOT NULL AND t2.tablename IS NULL)) OR (t1.documentName <> t2.documentName OR ( t1.documentName IS NULL AND t2.documentName IS NOT NULL) OR (t1.documentName IS NOT NULL AND t2.documentName IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_CLASSIFICATION', 'INSERT INTO NC_ENTITY_CLASSIFICATION ( SCENARIO_ID,ENTITY_CLASSIFICATION_ID,CLASSIFICATION,SERVICE,TABLENAME,DOCUMENT_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_CLASSIFICATION_ID,t1.CLASSIFICATION,t1.SERVICE,t1.TABLENAME,t1.DOCUMENT_NAME,''ACTIVATE'',''VALID'' FROM IN_ENTITY_CLASSIFICATION t1, MST_ENTITY_CLASSIFICATION t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.entityClassificationID = t2.entityClassificationID AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_OBJECT', 'INSERT INTO NC_ENTITY_OBJECT ( SCENARIO_ID,ENTITY_ID,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_STATUS,ENTITY_EFFECTIVE_START_DATE,ENTITY_EFFECTIVE_END_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_ID,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_STATUS,ENTITY_EFFECTIVE_START_DATE,ENTITY_EFFECTIVE_END_DATE,''INSERT'',''VALID'' FROM IN_ENTITY_OBJECT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_ENTITY_OBJECT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_OBJECT', 'INSERT INTO NC_ENTITY_OBJECT ( SCENARIO_ID,ENTITY_ID,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_STATUS,ENTITY_EFFECTIVE_START_DATE,ENTITY_EFFECTIVE_END_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_ID,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_STATUS,ENTITY_EFFECTIVE_START_DATE,ENTITY_EFFECTIVE_END_DATE,''DELETE'',''VALID'' FROM MST_ENTITY_OBJECT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_ENTITY_OBJECT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_ENTITY_OBJECT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_OBJECT', 'INSERT INTO NC_ENTITY_OBJECT ( SCENARIO_ID,ENTITY_ID,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_STATUS,ENTITY_EFFECTIVE_START_DATE,ENTITY_EFFECTIVE_END_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_ID,t1.ENTITY_NAME,t1.ENTITY_DESCRIPTION,t1.ENTITY_STATUS,t1.ENTITY_EFFECTIVE_START_DATE,t1.ENTITY_EFFECTIVE_END_DATE,''UPDATE'',''VALID'' FROM IN_ENTITY_OBJECT t1, MST_ENTITY_OBJECT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Entity_Id <> t2.Entity_Id OR ( t1.Entity_Id IS NULL AND t2.Entity_Id IS NOT NULL) OR (t1.Entity_Id IS NOT NULL AND t2.Entity_Id IS NULL)) OR (t1.Entity_Name <> t2.Entity_Name OR ( t1.Entity_Name IS NULL AND t2.Entity_Name IS NOT NULL) OR (t1.Entity_Name IS NOT NULL AND t2.Entity_Name IS NULL)) OR (t1.Entity_Description <> t2.Entity_Description OR ( t1.Entity_Description IS NULL AND t2.Entity_Description IS NOT NULL) OR (t1.Entity_Description IS NOT NULL AND t2.Entity_Description IS NULL)) OR (t1.Entity_Status <> t2.Entity_Status OR ( t1.Entity_Status IS NULL AND t2.Entity_Status IS NOT NULL) OR (t1.Entity_Status IS NOT NULL AND t2.Entity_Status IS NULL)) OR (t1.Entity_Effective_Start_date <> t2.Entity_Effective_Start_date OR ( t1.Entity_Effective_Start_date IS NULL AND t2.Entity_Effective_Start_date IS NOT NULL) OR (t1.Entity_Effective_Start_date IS NOT NULL AND t2.Entity_Effective_Start_date IS NULL)) OR (t1.Entity_Effective_End_date <> t2.Entity_Effective_End_date OR ( t1.Entity_Effective_End_date IS NULL AND t2.Entity_Effective_End_date IS NOT NULL) OR (t1.Entity_Effective_End_date IS NOT NULL AND t2.Entity_Effective_End_date IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_OBJECT', 'INSERT INTO NC_ENTITY_OBJECT ( SCENARIO_ID,ENTITY_ID,ENTITY_NAME,ENTITY_DESCRIPTION,ENTITY_STATUS,ENTITY_EFFECTIVE_START_DATE,ENTITY_EFFECTIVE_END_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_ID,t1.ENTITY_NAME,t1.ENTITY_DESCRIPTION,t1.ENTITY_STATUS,t1.ENTITY_EFFECTIVE_START_DATE,t1.ENTITY_EFFECTIVE_END_DATE,''ACTIVATE'',''VALID'' FROM IN_ENTITY_OBJECT t1, MST_ENTITY_OBJECT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_TABLES', 'INSERT INTO NC_ENTITY_TABLES ( SCENARIO_ID,ENTITY_ID,DB_NAME,TABLE_NAME,SERVICE_NAME,TABLE_TYPE,IS_SRC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_ID,DB_NAME,TABLE_NAME,SERVICE_NAME,TABLE_TYPE,IS_SRC,''INSERT'',''VALID'' FROM IN_ENTITY_TABLES t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_ENTITY_TABLES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.DbName = t2.DbName AND t1.Entity_Id = t2.Entity_Id AND t1.TableName = t2.TableName )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_TABLES', 'INSERT INTO NC_ENTITY_TABLES ( SCENARIO_ID,ENTITY_ID,DB_NAME,TABLE_NAME,SERVICE_NAME,TABLE_TYPE,IS_SRC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_ID,DB_NAME,TABLE_NAME,SERVICE_NAME,TABLE_TYPE,IS_SRC,''DELETE'',''VALID'' FROM MST_ENTITY_TABLES t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_ENTITY_TABLES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.DbName = t2.DbName AND t1.Entity_Id = t2.Entity_Id AND t1.TableName = t2.TableName ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_ENTITY_TABLES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.DbName = t2.DbName AND t1.Entity_Id = t2.Entity_Id AND t1.TableName = t2.TableName));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_TABLES', 'INSERT INTO NC_ENTITY_TABLES ( SCENARIO_ID,ENTITY_ID,DB_NAME,TABLE_NAME,SERVICE_NAME,TABLE_TYPE,IS_SRC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_ID,t1.DB_NAME,t1.TABLE_NAME,t1.SERVICE_NAME,t1.TABLE_TYPE,t1.IS_SRC,''UPDATE'',''VALID'' FROM IN_ENTITY_TABLES t1, MST_ENTITY_TABLES t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.DbName = t2.DbName AND t1.Entity_Id = t2.Entity_Id AND t1.TableName = t2.TableName AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Entity_Id <> t2.Entity_Id OR ( t1.Entity_Id IS NULL AND t2.Entity_Id IS NOT NULL) OR (t1.Entity_Id IS NOT NULL AND t2.Entity_Id IS NULL)) OR (t1.DbName <> t2.DbName OR ( t1.DbName IS NULL AND t2.DbName IS NOT NULL) OR (t1.DbName IS NOT NULL AND t2.DbName IS NULL)) OR (t1.TableName <> t2.TableName OR ( t1.TableName IS NULL AND t2.TableName IS NOT NULL) OR (t1.TableName IS NOT NULL AND t2.TableName IS NULL)) OR (t1.ServiceName <> t2.ServiceName OR ( t1.ServiceName IS NULL AND t2.ServiceName IS NOT NULL) OR (t1.ServiceName IS NOT NULL AND t2.ServiceName IS NULL)) OR (t1.Table_Type <> t2.Table_Type OR ( t1.Table_Type IS NULL AND t2.Table_Type IS NOT NULL) OR (t1.Table_Type IS NOT NULL AND t2.Table_Type IS NULL)) OR (t1.Is_Src <> t2.Is_Src OR ( t1.Is_Src IS NULL AND t2.Is_Src IS NOT NULL) OR (t1.Is_Src IS NOT NULL AND t2.Is_Src IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_TABLES', 'INSERT INTO NC_ENTITY_TABLES ( SCENARIO_ID,ENTITY_ID,DB_NAME,TABLE_NAME,SERVICE_NAME,TABLE_TYPE,IS_SRC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_ID,t1.DB_NAME,t1.TABLE_NAME,t1.SERVICE_NAME,t1.TABLE_TYPE,t1.IS_SRC,''ACTIVATE'',''VALID'' FROM IN_ENTITY_TABLES t1, MST_ENTITY_TABLES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.DbName = t2.DbName AND t1.Entity_Id = t2.Entity_Id AND t1.TableName = t2.TableName AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_REL_REFERENCE', 'INSERT INTO NC_ENTITY_REL_REFERENCE ( SCENARIO_ID,ENTITY_ID,REL_ENTITY_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_ID,REL_ENTITY_ID,''INSERT'',''VALID'' FROM IN_ENTITY_REL_REFERENCE t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_ENTITY_REL_REFERENCE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND t1.Rel_Entity_Id = t2.Rel_Entity_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_REL_REFERENCE', 'INSERT INTO NC_ENTITY_REL_REFERENCE ( SCENARIO_ID,ENTITY_ID,REL_ENTITY_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ENTITY_ID,REL_ENTITY_ID,''DELETE'',''VALID'' FROM MST_ENTITY_REL_REFERENCE t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_ENTITY_REL_REFERENCE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND t1.Rel_Entity_Id = t2.Rel_Entity_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_ENTITY_REL_REFERENCE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND t1.Rel_Entity_Id = t2.Rel_Entity_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_REL_REFERENCE', 'INSERT INTO NC_ENTITY_REL_REFERENCE ( SCENARIO_ID,ENTITY_ID,REL_ENTITY_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_ID,t1.REL_ENTITY_ID,''UPDATE'',''VALID'' FROM IN_ENTITY_REL_REFERENCE t1, MST_ENTITY_REL_REFERENCE t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND t1.Rel_Entity_Id = t2.Rel_Entity_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Entity_Id <> t2.Entity_Id OR ( t1.Entity_Id IS NULL AND t2.Entity_Id IS NOT NULL) OR (t1.Entity_Id IS NOT NULL AND t2.Entity_Id IS NULL)) OR (t1.Rel_Entity_Id <> t2.Rel_Entity_Id OR ( t1.Rel_Entity_Id IS NULL AND t2.Rel_Entity_Id IS NOT NULL) OR (t1.Rel_Entity_Id IS NOT NULL AND t2.Rel_Entity_Id IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ENTITY_REL_REFERENCE', 'INSERT INTO NC_ENTITY_REL_REFERENCE ( SCENARIO_ID,ENTITY_ID,REL_ENTITY_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ENTITY_ID,t1.REL_ENTITY_ID,''ACTIVATE'',''VALID'' FROM IN_ENTITY_REL_REFERENCE t1, MST_ENTITY_REL_REFERENCE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Entity_Id = t2.Entity_Id AND t1.Rel_Entity_Id = t2.Rel_Entity_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ERROR_MASTER', 'INSERT INTO NC_ERROR_MASTER ( SCENARIO_ID,ERROR_MESSAGE_ID,ERROR_MESSAGE_TEXT,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ERROR_MESSAGE_ID,ERROR_MESSAGE_TEXT,''INSERT'',''VALID'' FROM IN_ERROR_MASTER t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_ERROR_MASTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.errorMessageID = t2.errorMessageID )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ERROR_MASTER', 'INSERT INTO NC_ERROR_MASTER ( SCENARIO_ID,ERROR_MESSAGE_ID,ERROR_MESSAGE_TEXT,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ERROR_MESSAGE_ID,ERROR_MESSAGE_TEXT,''DELETE'',''VALID'' FROM MST_ERROR_MASTER t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_ERROR_MASTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.errorMessageID = t2.errorMessageID ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_ERROR_MASTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.errorMessageID = t2.errorMessageID));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ERROR_MASTER', 'INSERT INTO NC_ERROR_MASTER ( SCENARIO_ID,ERROR_MESSAGE_ID,ERROR_MESSAGE_TEXT,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ERROR_MESSAGE_ID,t1.ERROR_MESSAGE_TEXT,''UPDATE'',''VALID'' FROM IN_ERROR_MASTER t1, MST_ERROR_MASTER t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.errorMessageID = t2.errorMessageID AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.errorMessageID <> t2.errorMessageID OR ( t1.errorMessageID IS NULL AND t2.errorMessageID IS NOT NULL) OR (t1.errorMessageID IS NOT NULL AND t2.errorMessageID IS NULL)) OR (t1.errorMessageText <> t2.errorMessageText OR ( t1.errorMessageText IS NULL AND t2.errorMessageText IS NOT NULL) OR (t1.errorMessageText IS NOT NULL AND t2.errorMessageText IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_ERROR_MASTER', 'INSERT INTO NC_ERROR_MASTER ( SCENARIO_ID,ERROR_MESSAGE_ID,ERROR_MESSAGE_TEXT,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ERROR_MESSAGE_ID,t1.ERROR_MESSAGE_TEXT,''ACTIVATE'',''VALID'' FROM IN_ERROR_MASTER t1, MST_ERROR_MASTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.errorMessageID = t2.errorMessageID AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL_INST', 'INSERT INTO NC_GRP_ATTR_VAL_INST ( SCENARIO_ID,LOG_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,LOG_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,''INSERT'',''VALID'' FROM IN_GRP_ATTR_VAL_INST t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_ATTR_VAL_INST t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND t1.Log_Id = t2.Log_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL_INST', 'INSERT INTO NC_GRP_ATTR_VAL_INST ( SCENARIO_ID,LOG_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,LOG_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,''DELETE'',''VALID'' FROM MST_GRP_ATTR_VAL_INST t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_ATTR_VAL_INST t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND t1.Log_Id = t2.Log_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_ATTR_VAL_INST t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND t1.Log_Id = t2.Log_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL_INST', 'INSERT INTO NC_GRP_ATTR_VAL_INST ( SCENARIO_ID,LOG_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.LOG_ID,t1.ATTRIBUTE_SET_ID,t1.GROUP_ID,t1.UPDT_LOG_COL_NAME,t1.UPDT_COL_VALUE,''UPDATE'',''VALID'' FROM IN_GRP_ATTR_VAL_INST t1, MST_GRP_ATTR_VAL_INST t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND t1.Log_Id = t2.Log_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Log_Id <> t2.Log_Id OR ( t1.Log_Id IS NULL AND t2.Log_Id IS NOT NULL) OR (t1.Log_Id IS NOT NULL AND t2.Log_Id IS NULL)) OR (t1.Attribute_Set_Id <> t2.Attribute_Set_Id OR ( t1.Attribute_Set_Id IS NULL AND t2.Attribute_Set_Id IS NOT NULL) OR (t1.Attribute_Set_Id IS NOT NULL AND t2.Attribute_Set_Id IS NULL)) OR (t1.Group_Id <> t2.Group_Id OR ( t1.Group_Id IS NULL AND t2.Group_Id IS NOT NULL) OR (t1.Group_Id IS NOT NULL AND t2.Group_Id IS NULL)) OR (t1.Updt_Log_Col_Name <> t2.Updt_Log_Col_Name OR ( t1.Updt_Log_Col_Name IS NULL AND t2.Updt_Log_Col_Name IS NOT NULL) OR (t1.Updt_Log_Col_Name IS NOT NULL AND t2.Updt_Log_Col_Name IS NULL)) OR (t1.Updt_Col_Value <> t2.Updt_Col_Value OR ( t1.Updt_Col_Value IS NULL AND t2.Updt_Col_Value IS NOT NULL) OR (t1.Updt_Col_Value IS NOT NULL AND t2.Updt_Col_Value IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL_INST', 'INSERT INTO NC_GRP_ATTR_VAL_INST ( SCENARIO_ID,LOG_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.LOG_ID,t1.ATTRIBUTE_SET_ID,t1.GROUP_ID,t1.UPDT_LOG_COL_NAME,t1.UPDT_COL_VALUE,''ACTIVATE'',''VALID'' FROM IN_GRP_ATTR_VAL_INST t1, MST_GRP_ATTR_VAL_INST t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND t1.Log_Id = t2.Log_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL', 'INSERT INTO NC_GRP_ATTR_VAL ( SCENARIO_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,''INSERT'',''VALID'' FROM IN_GRP_ATTR_VAL t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_ATTR_VAL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Group_Id = t2.Group_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL', 'INSERT INTO NC_GRP_ATTR_VAL ( SCENARIO_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,''DELETE'',''VALID'' FROM MST_GRP_ATTR_VAL t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_ATTR_VAL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Group_Id = t2.Group_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_ATTR_VAL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Group_Id = t2.Group_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL', 'INSERT INTO NC_GRP_ATTR_VAL ( SCENARIO_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ATTRIBUTE_SET_ID,t1.GROUP_ID,t1.UPDT_LOG_COL_NAME,t1.UPDT_COL_VALUE,''UPDATE'',''VALID'' FROM IN_GRP_ATTR_VAL t1, MST_GRP_ATTR_VAL t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Group_Id = t2.Group_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Attribute_Set_Id <> t2.Attribute_Set_Id OR ( t1.Attribute_Set_Id IS NULL AND t2.Attribute_Set_Id IS NOT NULL) OR (t1.Attribute_Set_Id IS NOT NULL AND t2.Attribute_Set_Id IS NULL)) OR (t1.Group_Id <> t2.Group_Id OR ( t1.Group_Id IS NULL AND t2.Group_Id IS NOT NULL) OR (t1.Group_Id IS NOT NULL AND t2.Group_Id IS NULL)) OR (t1.Updt_Log_Col_Name <> t2.Updt_Log_Col_Name OR ( t1.Updt_Log_Col_Name IS NULL AND t2.Updt_Log_Col_Name IS NOT NULL) OR (t1.Updt_Log_Col_Name IS NOT NULL AND t2.Updt_Log_Col_Name IS NULL)) OR (t1.Updt_Col_Value <> t2.Updt_Col_Value OR ( t1.Updt_Col_Value IS NULL AND t2.Updt_Col_Value IS NOT NULL) OR (t1.Updt_Col_Value IS NOT NULL AND t2.Updt_Col_Value IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_ATTR_VAL', 'INSERT INTO NC_GRP_ATTR_VAL ( SCENARIO_ID,ATTRIBUTE_SET_ID,GROUP_ID,UPDT_LOG_COL_NAME,UPDT_COL_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ATTRIBUTE_SET_ID,t1.GROUP_ID,t1.UPDT_LOG_COL_NAME,t1.UPDT_COL_VALUE,''ACTIVATE'',''VALID'' FROM IN_GRP_ATTR_VAL t1, MST_GRP_ATTR_VAL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Attribute_Set_Id = t2.Attribute_Set_Id AND t1.Group_Id = t2.Group_Id AND t1.Updt_Log_Col_Name = t2.Updt_Log_Col_Name AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_CLASS', 'INSERT INTO NC_GRP_CLASS ( SCENARIO_ID,GROUP_CLASS_ID,CLASS_NAME,CLASS_DESCRIPTION,PHY_TBL_NAME,LOG_TBL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,GROUP_CLASS_ID,CLASS_NAME,CLASS_DESCRIPTION,PHY_TBL_NAME,LOG_TBL_NAME,''INSERT'',''VALID'' FROM IN_GRP_CLASS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_CLASS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Class_Id = t2.Group_Class_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_CLASS', 'INSERT INTO NC_GRP_CLASS ( SCENARIO_ID,GROUP_CLASS_ID,CLASS_NAME,CLASS_DESCRIPTION,PHY_TBL_NAME,LOG_TBL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,GROUP_CLASS_ID,CLASS_NAME,CLASS_DESCRIPTION,PHY_TBL_NAME,LOG_TBL_NAME,''DELETE'',''VALID'' FROM MST_GRP_CLASS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_CLASS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Class_Id = t2.Group_Class_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_CLASS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Class_Id = t2.Group_Class_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_CLASS', 'INSERT INTO NC_GRP_CLASS ( SCENARIO_ID,GROUP_CLASS_ID,CLASS_NAME,CLASS_DESCRIPTION,PHY_TBL_NAME,LOG_TBL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.GROUP_CLASS_ID,t1.CLASS_NAME,t1.CLASS_DESCRIPTION,t1.PHY_TBL_NAME,t1.LOG_TBL_NAME,''UPDATE'',''VALID'' FROM IN_GRP_CLASS t1, MST_GRP_CLASS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Class_Id = t2.Group_Class_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Group_Class_Id <> t2.Group_Class_Id OR ( t1.Group_Class_Id IS NULL AND t2.Group_Class_Id IS NOT NULL) OR (t1.Group_Class_Id IS NOT NULL AND t2.Group_Class_Id IS NULL)) OR (t1.Class_Name <> t2.Class_Name OR ( t1.Class_Name IS NULL AND t2.Class_Name IS NOT NULL) OR (t1.Class_Name IS NOT NULL AND t2.Class_Name IS NULL)) OR (t1.Class_Description <> t2.Class_Description OR ( t1.Class_Description IS NULL AND t2.Class_Description IS NOT NULL) OR (t1.Class_Description IS NOT NULL AND t2.Class_Description IS NULL)) OR (t1.Phy_Tbl_Name <> t2.Phy_Tbl_Name OR ( t1.Phy_Tbl_Name IS NULL AND t2.Phy_Tbl_Name IS NOT NULL) OR (t1.Phy_Tbl_Name IS NOT NULL AND t2.Phy_Tbl_Name IS NULL)) OR (t1.Log_Tbl_Name <> t2.Log_Tbl_Name OR ( t1.Log_Tbl_Name IS NULL AND t2.Log_Tbl_Name IS NOT NULL) OR (t1.Log_Tbl_Name IS NOT NULL AND t2.Log_Tbl_Name IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_CLASS', 'INSERT INTO NC_GRP_CLASS ( SCENARIO_ID,GROUP_CLASS_ID,CLASS_NAME,CLASS_DESCRIPTION,PHY_TBL_NAME,LOG_TBL_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.GROUP_CLASS_ID,t1.CLASS_NAME,t1.CLASS_DESCRIPTION,t1.PHY_TBL_NAME,t1.LOG_TBL_NAME,''ACTIVATE'',''VALID'' FROM IN_GRP_CLASS t1, MST_GRP_CLASS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Class_Id = t2.Group_Class_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_EXEC_LOG', 'INSERT INTO NC_GRP_EXEC_LOG ( SCENARIO_ID,LOG_ID,GROUP_ID,EXECUTION_STATUS,EXECUTION_TIME,GROUP_NAME,ATTRIBUTE_SET_NAME,EXECUTION_RESPONSE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,LOG_ID,GROUP_ID,EXECUTION_STATUS,EXECUTION_TIME,GROUP_NAME,ATTRIBUTE_SET_NAME,EXECUTION_RESPONSE,''INSERT'',''VALID'' FROM IN_GRP_EXEC_LOG t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_EXEC_LOG t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Log_Id = t2.Log_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_EXEC_LOG', 'INSERT INTO NC_GRP_EXEC_LOG ( SCENARIO_ID,LOG_ID,GROUP_ID,EXECUTION_STATUS,EXECUTION_TIME,GROUP_NAME,ATTRIBUTE_SET_NAME,EXECUTION_RESPONSE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,LOG_ID,GROUP_ID,EXECUTION_STATUS,EXECUTION_TIME,GROUP_NAME,ATTRIBUTE_SET_NAME,EXECUTION_RESPONSE,''DELETE'',''VALID'' FROM MST_GRP_EXEC_LOG t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_EXEC_LOG t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Log_Id = t2.Log_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_EXEC_LOG t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Log_Id = t2.Log_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_EXEC_LOG', 'INSERT INTO NC_GRP_EXEC_LOG ( SCENARIO_ID,LOG_ID,GROUP_ID,EXECUTION_STATUS,EXECUTION_TIME,GROUP_NAME,ATTRIBUTE_SET_NAME,EXECUTION_RESPONSE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.LOG_ID,t1.GROUP_ID,t1.EXECUTION_STATUS,t1.EXECUTION_TIME,t1.GROUP_NAME,t1.ATTRIBUTE_SET_NAME,t1.EXECUTION_RESPONSE,''UPDATE'',''VALID'' FROM IN_GRP_EXEC_LOG t1, MST_GRP_EXEC_LOG t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Log_Id = t2.Log_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Log_Id <> t2.Log_Id OR ( t1.Log_Id IS NULL AND t2.Log_Id IS NOT NULL) OR (t1.Log_Id IS NOT NULL AND t2.Log_Id IS NULL)) OR (t1.Group_Id <> t2.Group_Id OR ( t1.Group_Id IS NULL AND t2.Group_Id IS NOT NULL) OR (t1.Group_Id IS NOT NULL AND t2.Group_Id IS NULL)) OR (t1.Execution_Status <> t2.Execution_Status OR ( t1.Execution_Status IS NULL AND t2.Execution_Status IS NOT NULL) OR (t1.Execution_Status IS NOT NULL AND t2.Execution_Status IS NULL)) OR (t1.Execution_Time <> t2.Execution_Time OR ( t1.Execution_Time IS NULL AND t2.Execution_Time IS NOT NULL) OR (t1.Execution_Time IS NOT NULL AND t2.Execution_Time IS NULL)) OR (t1.Group_Name <> t2.Group_Name OR ( t1.Group_Name IS NULL AND t2.Group_Name IS NOT NULL) OR (t1.Group_Name IS NOT NULL AND t2.Group_Name IS NULL)) OR (t1.Attribute_Set_Name <> t2.Attribute_Set_Name OR ( t1.Attribute_Set_Name IS NULL AND t2.Attribute_Set_Name IS NOT NULL) OR (t1.Attribute_Set_Name IS NOT NULL AND t2.Attribute_Set_Name IS NULL)) OR (t1.Execution_Response <> t2.Execution_Response OR ( t1.Execution_Response IS NULL AND t2.Execution_Response IS NOT NULL) OR (t1.Execution_Response IS NOT NULL AND t2.Execution_Response IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_EXEC_LOG', 'INSERT INTO NC_GRP_EXEC_LOG ( SCENARIO_ID,LOG_ID,GROUP_ID,EXECUTION_STATUS,EXECUTION_TIME,GROUP_NAME,ATTRIBUTE_SET_NAME,EXECUTION_RESPONSE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.LOG_ID,t1.GROUP_ID,t1.EXECUTION_STATUS,t1.EXECUTION_TIME,t1.GROUP_NAME,t1.ATTRIBUTE_SET_NAME,t1.EXECUTION_RESPONSE,''ACTIVATE'',''VALID'' FROM IN_GRP_EXEC_LOG t1, MST_GRP_EXEC_LOG t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Log_Id = t2.Log_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MASTER', 'INSERT INTO NC_GRP_MASTER ( SCENARIO_ID,GROUP_ID,GROUP_NAME,GROUP_DESCRIPTION,GROUP_CLASS_ID,GROUP_RULE_ID,GROUP_PRECENDENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,GROUP_ID,GROUP_NAME,GROUP_DESCRIPTION,GROUP_CLASS_ID,GROUP_RULE_ID,GROUP_PRECENDENCE,''INSERT'',''VALID'' FROM IN_GRP_MASTER t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_MASTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MASTER', 'INSERT INTO NC_GRP_MASTER ( SCENARIO_ID,GROUP_ID,GROUP_NAME,GROUP_DESCRIPTION,GROUP_CLASS_ID,GROUP_RULE_ID,GROUP_PRECENDENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,GROUP_ID,GROUP_NAME,GROUP_DESCRIPTION,GROUP_CLASS_ID,GROUP_RULE_ID,GROUP_PRECENDENCE,''DELETE'',''VALID'' FROM MST_GRP_MASTER t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_MASTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_MASTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MASTER', 'INSERT INTO NC_GRP_MASTER ( SCENARIO_ID,GROUP_ID,GROUP_NAME,GROUP_DESCRIPTION,GROUP_CLASS_ID,GROUP_RULE_ID,GROUP_PRECENDENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.GROUP_ID,t1.GROUP_NAME,t1.GROUP_DESCRIPTION,t1.GROUP_CLASS_ID,t1.GROUP_RULE_ID,t1.GROUP_PRECENDENCE,''UPDATE'',''VALID'' FROM IN_GRP_MASTER t1, MST_GRP_MASTER t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Group_Id <> t2.Group_Id OR ( t1.Group_Id IS NULL AND t2.Group_Id IS NOT NULL) OR (t1.Group_Id IS NOT NULL AND t2.Group_Id IS NULL)) OR (t1.Group_Name <> t2.Group_Name OR ( t1.Group_Name IS NULL AND t2.Group_Name IS NOT NULL) OR (t1.Group_Name IS NOT NULL AND t2.Group_Name IS NULL)) OR (t1.Group_Description <> t2.Group_Description OR ( t1.Group_Description IS NULL AND t2.Group_Description IS NOT NULL) OR (t1.Group_Description IS NOT NULL AND t2.Group_Description IS NULL)) OR (t1.Group_Class_Id <> t2.Group_Class_Id OR ( t1.Group_Class_Id IS NULL AND t2.Group_Class_Id IS NOT NULL) OR (t1.Group_Class_Id IS NOT NULL AND t2.Group_Class_Id IS NULL)) OR (t1.Group_Rule_Id <> t2.Group_Rule_Id OR ( t1.Group_Rule_Id IS NULL AND t2.Group_Rule_Id IS NOT NULL) OR (t1.Group_Rule_Id IS NOT NULL AND t2.Group_Rule_Id IS NULL)) OR (t1.Group_Precedence <> t2.Group_Precedence OR ( t1.Group_Precedence IS NULL AND t2.Group_Precedence IS NOT NULL) OR (t1.Group_Precedence IS NOT NULL AND t2.Group_Precedence IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MASTER', 'INSERT INTO NC_GRP_MASTER ( SCENARIO_ID,GROUP_ID,GROUP_NAME,GROUP_DESCRIPTION,GROUP_CLASS_ID,GROUP_RULE_ID,GROUP_PRECENDENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.GROUP_ID,t1.GROUP_NAME,t1.GROUP_DESCRIPTION,t1.GROUP_CLASS_ID,t1.GROUP_RULE_ID,t1.GROUP_PRECENDENCE,''ACTIVATE'',''VALID'' FROM IN_GRP_MASTER t1, MST_GRP_MASTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Group_Id = t2.Group_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MEMBER', 'INSERT INTO NC_GRP_MEMBER ( SCENARIO_ID,MEMBER_ID,GROUP_CLASS_ID,GROUP_ID,PK_COL_VAL1,PK_COL_VAL2,PK_COL_VAL3,PK_COL_VAL4,PK_COL_VAL5,PK_COL_VAL6,PK_COL_VAL7,PK_COL_VAL8,PK_COL_VAL9,PK_COL_VAL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,MEMBER_ID,GROUP_CLASS_ID,GROUP_ID,PK_COL_VAL1,PK_COL_VAL2,PK_COL_VAL3,PK_COL_VAL4,PK_COL_VAL5,PK_COL_VAL6,PK_COL_VAL7,PK_COL_VAL8,PK_COL_VAL9,PK_COL_VAL10,''INSERT'',''VALID'' FROM IN_GRP_MEMBER t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_GRP_MEMBER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Member_Id = t2.Member_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MEMBER', 'INSERT INTO NC_GRP_MEMBER ( SCENARIO_ID,MEMBER_ID,GROUP_CLASS_ID,GROUP_ID,PK_COL_VAL1,PK_COL_VAL2,PK_COL_VAL3,PK_COL_VAL4,PK_COL_VAL5,PK_COL_VAL6,PK_COL_VAL7,PK_COL_VAL8,PK_COL_VAL9,PK_COL_VAL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,MEMBER_ID,GROUP_CLASS_ID,GROUP_ID,PK_COL_VAL1,PK_COL_VAL2,PK_COL_VAL3,PK_COL_VAL4,PK_COL_VAL5,PK_COL_VAL6,PK_COL_VAL7,PK_COL_VAL8,PK_COL_VAL9,PK_COL_VAL10,''DELETE'',''VALID'' FROM MST_GRP_MEMBER t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_GRP_MEMBER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Member_Id = t2.Member_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_GRP_MEMBER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Member_Id = t2.Member_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MEMBER', 'INSERT INTO NC_GRP_MEMBER ( SCENARIO_ID,MEMBER_ID,GROUP_CLASS_ID,GROUP_ID,PK_COL_VAL1,PK_COL_VAL2,PK_COL_VAL3,PK_COL_VAL4,PK_COL_VAL5,PK_COL_VAL6,PK_COL_VAL7,PK_COL_VAL8,PK_COL_VAL9,PK_COL_VAL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.MEMBER_ID,t1.GROUP_CLASS_ID,t1.GROUP_ID,t1.PK_COL_VAL1,t1.PK_COL_VAL2,t1.PK_COL_VAL3,t1.PK_COL_VAL4,t1.PK_COL_VAL5,t1.PK_COL_VAL6,t1.PK_COL_VAL7,t1.PK_COL_VAL8,t1.PK_COL_VAL9,t1.PK_COL_VAL10,''UPDATE'',''VALID'' FROM IN_GRP_MEMBER t1, MST_GRP_MEMBER t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Member_Id = t2.Member_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Member_Id <> t2.Member_Id OR ( t1.Member_Id IS NULL AND t2.Member_Id IS NOT NULL) OR (t1.Member_Id IS NOT NULL AND t2.Member_Id IS NULL)) OR (t1.Group_Class_Id <> t2.Group_Class_Id OR ( t1.Group_Class_Id IS NULL AND t2.Group_Class_Id IS NOT NULL) OR (t1.Group_Class_Id IS NOT NULL AND t2.Group_Class_Id IS NULL)) OR (t1.Group_Id <> t2.Group_Id OR ( t1.Group_Id IS NULL AND t2.Group_Id IS NOT NULL) OR (t1.Group_Id IS NOT NULL AND t2.Group_Id IS NULL)) OR (t1.Pk_Col_Val1 <> t2.Pk_Col_Val1 OR ( t1.Pk_Col_Val1 IS NULL AND t2.Pk_Col_Val1 IS NOT NULL) OR (t1.Pk_Col_Val1 IS NOT NULL AND t2.Pk_Col_Val1 IS NULL)) OR (t1.Pk_Col_Val2 <> t2.Pk_Col_Val2 OR ( t1.Pk_Col_Val2 IS NULL AND t2.Pk_Col_Val2 IS NOT NULL) OR (t1.Pk_Col_Val2 IS NOT NULL AND t2.Pk_Col_Val2 IS NULL)) OR (t1.Pk_Col_Val3 <> t2.Pk_Col_Val3 OR ( t1.Pk_Col_Val3 IS NULL AND t2.Pk_Col_Val3 IS NOT NULL) OR (t1.Pk_Col_Val3 IS NOT NULL AND t2.Pk_Col_Val3 IS NULL)) OR (t1.Pk_Col_Val4 <> t2.Pk_Col_Val4 OR ( t1.Pk_Col_Val4 IS NULL AND t2.Pk_Col_Val4 IS NOT NULL) OR (t1.Pk_Col_Val4 IS NOT NULL AND t2.Pk_Col_Val4 IS NULL)) OR (t1.Pk_Col_Val5 <> t2.Pk_Col_Val5 OR ( t1.Pk_Col_Val5 IS NULL AND t2.Pk_Col_Val5 IS NOT NULL) OR (t1.Pk_Col_Val5 IS NOT NULL AND t2.Pk_Col_Val5 IS NULL)) OR (t1.Pk_Col_Val6 <> t2.Pk_Col_Val6 OR ( t1.Pk_Col_Val6 IS NULL AND t2.Pk_Col_Val6 IS NOT NULL) OR (t1.Pk_Col_Val6 IS NOT NULL AND t2.Pk_Col_Val6 IS NULL)) OR (t1.Pk_Col_Val7 <> t2.Pk_Col_Val7 OR ( t1.Pk_Col_Val7 IS NULL AND t2.Pk_Col_Val7 IS NOT NULL) OR (t1.Pk_Col_Val7 IS NOT NULL AND t2.Pk_Col_Val7 IS NULL)) OR (t1.Pk_Col_Val8 <> t2.Pk_Col_Val8 OR ( t1.Pk_Col_Val8 IS NULL AND t2.Pk_Col_Val8 IS NOT NULL) OR (t1.Pk_Col_Val8 IS NOT NULL AND t2.Pk_Col_Val8 IS NULL)) OR (t1.Pk_Col_Val9 <> t2.Pk_Col_Val9 OR ( t1.Pk_Col_Val9 IS NULL AND t2.Pk_Col_Val9 IS NOT NULL) OR (t1.Pk_Col_Val9 IS NOT NULL AND t2.Pk_Col_Val9 IS NULL)) OR (t1.Pk_Col_Val10 <> t2.Pk_Col_Val10 OR ( t1.Pk_Col_Val10 IS NULL AND t2.Pk_Col_Val10 IS NOT NULL) OR (t1.Pk_Col_Val10 IS NOT NULL AND t2.Pk_Col_Val10 IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_GRP_MEMBER', 'INSERT INTO NC_GRP_MEMBER ( SCENARIO_ID,MEMBER_ID,GROUP_CLASS_ID,GROUP_ID,PK_COL_VAL1,PK_COL_VAL2,PK_COL_VAL3,PK_COL_VAL4,PK_COL_VAL5,PK_COL_VAL6,PK_COL_VAL7,PK_COL_VAL8,PK_COL_VAL9,PK_COL_VAL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.MEMBER_ID,t1.GROUP_CLASS_ID,t1.GROUP_ID,t1.PK_COL_VAL1,t1.PK_COL_VAL2,t1.PK_COL_VAL3,t1.PK_COL_VAL4,t1.PK_COL_VAL5,t1.PK_COL_VAL6,t1.PK_COL_VAL7,t1.PK_COL_VAL8,t1.PK_COL_VAL9,t1.PK_COL_VAL10,''ACTIVATE'',''VALID'' FROM IN_GRP_MEMBER t1, MST_GRP_MEMBER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Member_Id = t2.Member_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LAST_SYNC_UP', 'INSERT INTO NC_LAST_SYNC_UP ( SCENARIO_ID,APPLICATION_NAME,INSTANCE_ID,END_TIME,OPERATION_CODE,OPERATION_STATUS,START_TIME,SYNC_UP_DATE,SYNC_UP_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,APPLICATION_NAME,INSTANCE_ID,END_TIME,OPERATION_CODE,OPERATION_STATUS,START_TIME,SYNC_UP_DATE,SYNC_UP_ID,''INSERT'',''VALID'' FROM IN_LAST_SYNC_UP t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_LAST_SYNC_UP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.syncUpID = t2.syncUpID )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LAST_SYNC_UP', 'INSERT INTO NC_LAST_SYNC_UP ( SCENARIO_ID,APPLICATION_NAME,INSTANCE_ID,END_TIME,OPERATION_CODE,OPERATION_STATUS,START_TIME,SYNC_UP_DATE,SYNC_UP_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,APPLICATION_NAME,INSTANCE_ID,END_TIME,OPERATION_CODE,OPERATION_STATUS,START_TIME,SYNC_UP_DATE,SYNC_UP_ID,''DELETE'',''VALID'' FROM MST_LAST_SYNC_UP t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_LAST_SYNC_UP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.syncUpID = t2.syncUpID ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_LAST_SYNC_UP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.syncUpID = t2.syncUpID));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LAST_SYNC_UP', 'INSERT INTO NC_LAST_SYNC_UP ( SCENARIO_ID,APPLICATION_NAME,INSTANCE_ID,END_TIME,OPERATION_CODE,OPERATION_STATUS,START_TIME,SYNC_UP_DATE,SYNC_UP_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.APPLICATION_NAME,t1.INSTANCE_ID,t1.END_TIME,t1.OPERATION_CODE,t1.OPERATION_STATUS,t1.START_TIME,t1.SYNC_UP_DATE,t1.SYNC_UP_ID,''UPDATE'',''VALID'' FROM IN_LAST_SYNC_UP t1, MST_LAST_SYNC_UP t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.syncUpID = t2.syncUpID AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.ApplicationName <> t2.ApplicationName OR ( t1.ApplicationName IS NULL AND t2.ApplicationName IS NOT NULL) OR (t1.ApplicationName IS NOT NULL AND t2.ApplicationName IS NULL)) OR (t1.InstanceID <> t2.InstanceID OR ( t1.InstanceID IS NULL AND t2.InstanceID IS NOT NULL) OR (t1.InstanceID IS NOT NULL AND t2.InstanceID IS NULL)) OR (t1.endTime <> t2.endTime OR ( t1.endTime IS NULL AND t2.endTime IS NOT NULL) OR (t1.endTime IS NOT NULL AND t2.endTime IS NULL)) OR (t1.operationCode <> t2.operationCode OR ( t1.operationCode IS NULL AND t2.operationCode IS NOT NULL) OR (t1.operationCode IS NOT NULL AND t2.operationCode IS NULL)) OR (t1.operationStatus <> t2.operationStatus OR ( t1.operationStatus IS NULL AND t2.operationStatus IS NOT NULL) OR (t1.operationStatus IS NOT NULL AND t2.operationStatus IS NULL)) OR (t1.startTime <> t2.startTime OR ( t1.startTime IS NULL AND t2.startTime IS NOT NULL) OR (t1.startTime IS NOT NULL AND t2.startTime IS NULL)) OR (t1.syncUpDate <> t2.syncUpDate OR ( t1.syncUpDate IS NULL AND t2.syncUpDate IS NOT NULL) OR (t1.syncUpDate IS NOT NULL AND t2.syncUpDate IS NULL)) OR (t1.syncUpID <> t2.syncUpID OR ( t1.syncUpID IS NULL AND t2.syncUpID IS NOT NULL) OR (t1.syncUpID IS NOT NULL AND t2.syncUpID IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LAST_SYNC_UP', 'INSERT INTO NC_LAST_SYNC_UP ( SCENARIO_ID,APPLICATION_NAME,INSTANCE_ID,END_TIME,OPERATION_CODE,OPERATION_STATUS,START_TIME,SYNC_UP_DATE,SYNC_UP_ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.APPLICATION_NAME,t1.INSTANCE_ID,t1.END_TIME,t1.OPERATION_CODE,t1.OPERATION_STATUS,t1.START_TIME,t1.SYNC_UP_DATE,t1.SYNC_UP_ID,''ACTIVATE'',''VALID'' FROM IN_LAST_SYNC_UP t1, MST_LAST_SYNC_UP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.syncUpID = t2.syncUpID AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LOG_ERROR_DATA', 'INSERT INTO NC_LOG_ERROR_DATA ( SCENARIO_ID,ID,SURR_KEY,PRIMARY_KEY,MARKED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ID,SURR_KEY,PRIMARY_KEY,MARKED,''INSERT'',''VALID'' FROM IN_LOG_ERROR_DATA t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_LOG_ERROR_DATA t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LOG_ERROR_DATA', 'INSERT INTO NC_LOG_ERROR_DATA ( SCENARIO_ID,ID,SURR_KEY,PRIMARY_KEY,MARKED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ID,SURR_KEY,PRIMARY_KEY,MARKED,''DELETE'',''VALID'' FROM MST_LOG_ERROR_DATA t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_LOG_ERROR_DATA t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_LOG_ERROR_DATA t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LOG_ERROR_DATA', 'INSERT INTO NC_LOG_ERROR_DATA ( SCENARIO_ID,ID,SURR_KEY,PRIMARY_KEY,MARKED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ID,t1.SURR_KEY,t1.PRIMARY_KEY,t1.MARKED,''UPDATE'',''VALID'' FROM IN_LOG_ERROR_DATA t1, MST_LOG_ERROR_DATA t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.ID <> t2.ID OR ( t1.ID IS NULL AND t2.ID IS NOT NULL) OR (t1.ID IS NOT NULL AND t2.ID IS NULL)) OR (t1.surrKey <> t2.surrKey OR ( t1.surrKey IS NULL AND t2.surrKey IS NOT NULL) OR (t1.surrKey IS NOT NULL AND t2.surrKey IS NULL)) OR (t1.primaryKey <> t2.primaryKey OR ( t1.primaryKey IS NULL AND t2.primaryKey IS NOT NULL) OR (t1.primaryKey IS NOT NULL AND t2.primaryKey IS NULL)) OR (t1.marked <> t2.marked OR ( t1.marked IS NULL AND t2.marked IS NOT NULL) OR (t1.marked IS NOT NULL AND t2.marked IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_LOG_ERROR_DATA', 'INSERT INTO NC_LOG_ERROR_DATA ( SCENARIO_ID,ID,SURR_KEY,PRIMARY_KEY,MARKED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ID,t1.SURR_KEY,t1.PRIMARY_KEY,t1.MARKED,''ACTIVATE'',''VALID'' FROM IN_LOG_ERROR_DATA t1, MST_LOG_ERROR_DATA t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_MULTITABLE_MAP', 'INSERT INTO NC_MULTITABLE_MAP ( SCENARIO_ID,MAP_TABLE_NAME,TABLE_TYPE,IS_USED,START_DATE,END_DATE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,MAP_TABLE_NAME,TABLE_TYPE,IS_USED,START_DATE,END_DATE,ID,''INSERT'',''VALID'' FROM IN_MULTITABLE_MAP t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_MULTITABLE_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Id = t2.Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_MULTITABLE_MAP', 'INSERT INTO NC_MULTITABLE_MAP ( SCENARIO_ID,MAP_TABLE_NAME,TABLE_TYPE,IS_USED,START_DATE,END_DATE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,MAP_TABLE_NAME,TABLE_TYPE,IS_USED,START_DATE,END_DATE,ID,''DELETE'',''VALID'' FROM MST_MULTITABLE_MAP t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_MULTITABLE_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Id = t2.Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_MULTITABLE_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Id = t2.Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_MULTITABLE_MAP', 'INSERT INTO NC_MULTITABLE_MAP ( SCENARIO_ID,MAP_TABLE_NAME,TABLE_TYPE,IS_USED,START_DATE,END_DATE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.MAP_TABLE_NAME,t1.TABLE_TYPE,t1.IS_USED,t1.START_DATE,t1.END_DATE,t1.ID,''UPDATE'',''VALID'' FROM IN_MULTITABLE_MAP t1, MST_MULTITABLE_MAP t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Id = t2.Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Map_Table_Name <> t2.Map_Table_Name OR ( t1.Map_Table_Name IS NULL AND t2.Map_Table_Name IS NOT NULL) OR (t1.Map_Table_Name IS NOT NULL AND t2.Map_Table_Name IS NULL)) OR (t1.Table_Type <> t2.Table_Type OR ( t1.Table_Type IS NULL AND t2.Table_Type IS NOT NULL) OR (t1.Table_Type IS NOT NULL AND t2.Table_Type IS NULL)) OR (t1.IS_USED <> t2.IS_USED OR ( t1.IS_USED IS NULL AND t2.IS_USED IS NOT NULL) OR (t1.IS_USED IS NOT NULL AND t2.IS_USED IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Id <> t2.Id OR ( t1.Id IS NULL AND t2.Id IS NOT NULL) OR (t1.Id IS NOT NULL AND t2.Id IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_MULTITABLE_MAP', 'INSERT INTO NC_MULTITABLE_MAP ( SCENARIO_ID,MAP_TABLE_NAME,TABLE_TYPE,IS_USED,START_DATE,END_DATE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.MAP_TABLE_NAME,t1.TABLE_TYPE,t1.IS_USED,t1.START_DATE,t1.END_DATE,t1.ID,''ACTIVATE'',''VALID'' FROM IN_MULTITABLE_MAP t1, MST_MULTITABLE_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Id = t2.Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSET_PARAMS', 'INSERT INTO NC_PSET_PARAMS ( SCENARIO_ID,P_NAME,P_DESC,P_DISPLAYNAME,P_Value,P_VALUE_TYPE,P_ISLOOKUP,Code_Name,P_PRECISION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,P_NAME,P_DESC,P_DISPLAYNAME,P_Value,P_VALUE_TYPE,P_ISLOOKUP,Code_Name,P_PRECISION,''INSERT'',''VALID'' FROM IN_PSET_PARAMS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_PSET_PARAMS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.pName = t2.pName )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSET_PARAMS', 'INSERT INTO NC_PSET_PARAMS ( SCENARIO_ID,P_NAME,P_DESC,P_DISPLAYNAME,P_Value,P_VALUE_TYPE,P_ISLOOKUP,Code_Name,P_PRECISION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,P_NAME,P_DESC,P_DISPLAYNAME,P_Value,P_VALUE_TYPE,P_ISLOOKUP,Code_Name,P_PRECISION,''DELETE'',''VALID'' FROM MST_PSET_PARAMS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_PSET_PARAMS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.pName = t2.pName ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_PSET_PARAMS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.pName = t2.pName));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSET_PARAMS', 'INSERT INTO NC_PSET_PARAMS ( SCENARIO_ID,P_NAME,P_DESC,P_DISPLAYNAME,P_Value,P_VALUE_TYPE,P_ISLOOKUP,Code_Name,P_PRECISION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.P_NAME,t1.P_DESC,t1.P_DISPLAYNAME,t1.P_Value,t1.P_VALUE_TYPE,t1.P_ISLOOKUP,t1.Code_Name,t1.P_PRECISION,''UPDATE'',''VALID'' FROM IN_PSET_PARAMS t1, MST_PSET_PARAMS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.pName = t2.pName AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.pName <> t2.pName OR ( t1.pName IS NULL AND t2.pName IS NOT NULL) OR (t1.pName IS NOT NULL AND t2.pName IS NULL)) OR (t1.pDesc <> t2.pDesc OR ( t1.pDesc IS NULL AND t2.pDesc IS NOT NULL) OR (t1.pDesc IS NOT NULL AND t2.pDesc IS NULL)) OR (t1.pDisplayName <> t2.pDisplayName OR ( t1.pDisplayName IS NULL AND t2.pDisplayName IS NOT NULL) OR (t1.pDisplayName IS NOT NULL AND t2.pDisplayName IS NULL)) OR (t1.pValue <> t2.pValue OR ( t1.pValue IS NULL AND t2.pValue IS NOT NULL) OR (t1.pValue IS NOT NULL AND t2.pValue IS NULL)) OR (t1.pValueType <> t2.pValueType OR ( t1.pValueType IS NULL AND t2.pValueType IS NOT NULL) OR (t1.pValueType IS NOT NULL AND t2.pValueType IS NULL)) OR (t1.IsLookUp <> t2.IsLookUp OR ( t1.IsLookUp IS NULL AND t2.IsLookUp IS NOT NULL) OR (t1.IsLookUp IS NOT NULL AND t2.IsLookUp IS NULL)) OR (t1.codeSetName <> t2.codeSetName OR ( t1.codeSetName IS NULL AND t2.codeSetName IS NOT NULL) OR (t1.codeSetName IS NOT NULL AND t2.codeSetName IS NULL)) OR (t1.pPrecision <> t2.pPrecision OR ( t1.pPrecision IS NULL AND t2.pPrecision IS NOT NULL) OR (t1.pPrecision IS NOT NULL AND t2.pPrecision IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSET_PARAMS', 'INSERT INTO NC_PSET_PARAMS ( SCENARIO_ID,P_NAME,P_DESC,P_DISPLAYNAME,P_Value,P_VALUE_TYPE,P_ISLOOKUP,Code_Name,P_PRECISION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.P_NAME,t1.P_DESC,t1.P_DISPLAYNAME,t1.P_Value,t1.P_VALUE_TYPE,t1.P_ISLOOKUP,t1.Code_Name,t1.P_PRECISION,''ACTIVATE'',''VALID'' FROM IN_PSET_PARAMS t1, MST_PSET_PARAMS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.pName = t2.pName AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALHDR', 'INSERT INTO NC_PSETVALHDR ( SCENARIO_ID,VH_ID,VH_NAME,VH_DESC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VH_ID,VH_NAME,VH_DESC,''INSERT'',''VALID'' FROM IN_PSETVALHDR t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_PSET_VAL_HDR t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALHDR', 'INSERT INTO NC_PSETVALHDR ( SCENARIO_ID,VH_ID,VH_NAME,VH_DESC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VH_ID,VH_NAME,VH_DESC,''DELETE'',''VALID'' FROM MST_PSET_VAL_HDR t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_PSETVALHDR t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_PSETVALHDR t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALHDR', 'INSERT INTO NC_PSETVALHDR ( SCENARIO_ID,VH_ID,VH_NAME,VH_DESC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VH_ID,t1.VH_NAME,t1.VH_DESC,''UPDATE'',''VALID'' FROM IN_PSETVALHDR t1, MST_PSET_VAL_HDR t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.vhId <> t2.vhId OR ( t1.vhId IS NULL AND t2.vhId IS NOT NULL) OR (t1.vhId IS NOT NULL AND t2.vhId IS NULL)) OR (t1.vhName <> t2.vhName OR ( t1.vhName IS NULL AND t2.vhName IS NOT NULL) OR (t1.vhName IS NOT NULL AND t2.vhName IS NULL)) OR (t1.vhDesc <> t2.vhDesc OR ( t1.vhDesc IS NULL AND t2.vhDesc IS NOT NULL) OR (t1.vhDesc IS NOT NULL AND t2.vhDesc IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALHDR', 'INSERT INTO NC_PSETVALHDR ( SCENARIO_ID,VH_ID,VH_NAME,VH_DESC,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VH_ID,t1.VH_NAME,t1.VH_DESC,''ACTIVATE'',''VALID'' FROM IN_PSETVALHDR t1, MST_PSET_VAL_HDR t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALUES', 'INSERT INTO NC_PSETVALUES ( SCENARIO_ID,VH_ID,P_NAME,P_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VH_ID,P_NAME,P_VALUE,''INSERT'',''VALID'' FROM IN_PSETVALUES t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_PSET_VALUES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND t1.pName = t2.pName )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALUES', 'INSERT INTO NC_PSETVALUES ( SCENARIO_ID,VH_ID,P_NAME,P_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VH_ID,P_NAME,P_VALUE,''DELETE'',''VALID'' FROM MST_PSET_VALUES t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_PSETVALUES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND t1.pName = t2.pName ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_PSETVALUES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND t1.pName = t2.pName));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALUES', 'INSERT INTO NC_PSETVALUES ( SCENARIO_ID,VH_ID,P_NAME,P_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VH_ID,t1.P_NAME,t1.P_VALUE,''UPDATE'',''VALID'' FROM IN_PSETVALUES t1, MST_PSET_VALUES t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND t1.pName = t2.pName AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.vhId <> t2.vhId OR ( t1.vhId IS NULL AND t2.vhId IS NOT NULL) OR (t1.vhId IS NOT NULL AND t2.vhId IS NULL)) OR (t1.pName <> t2.pName OR ( t1.pName IS NULL AND t2.pName IS NOT NULL) OR (t1.pName IS NOT NULL AND t2.pName IS NULL)) OR (t1.pValue <> t2.pValue OR ( t1.pValue IS NULL AND t2.pValue IS NOT NULL) OR (t1.pValue IS NOT NULL AND t2.pValue IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_PSETVALUES', 'INSERT INTO NC_PSETVALUES ( SCENARIO_ID,VH_ID,P_NAME,P_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VH_ID,t1.P_NAME,t1.P_VALUE,''ACTIVATE'',''VALID'' FROM IN_PSETVALUES t1, MST_PSET_VALUES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.vhId = t2.vhId AND t1.pName = t2.pName AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_EXECUTION_LOG', 'INSERT INTO NC_QUERY_EXECUTION_LOG ( SCENARIO_ID,QUERY_ID,EXECUTED_BY,RUN_DATETIME,QUERY_RESULT,NUMBER_OF_RECORDS,ERROR_MESSAGE,RUN_TIME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,QUERY_ID,EXECUTED_BY,RUN_DATETIME,QUERY_RESULT,NUMBER_OF_RECORDS,ERROR_MESSAGE,RUN_TIME,''INSERT'',''VALID'' FROM IN_QUERY_EXECUTION_LOG t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM QUERY_EXECUTION_LOG t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.executedBy = t2.executedBy AND t1.runDateTime = t2.runDateTime )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_EXECUTION_LOG', 'INSERT INTO NC_QUERY_EXECUTION_LOG ( SCENARIO_ID,QUERY_ID,EXECUTED_BY,RUN_DATETIME,QUERY_RESULT,NUMBER_OF_RECORDS,ERROR_MESSAGE,RUN_TIME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,QUERY_ID,EXECUTED_BY,RUN_DATETIME,QUERY_RESULT,NUMBER_OF_RECORDS,ERROR_MESSAGE,RUN_TIME,''DELETE'',''VALID'' FROM QUERY_EXECUTION_LOG t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_QUERY_EXECUTION_LOG t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.executedBy = t2.executedBy AND t1.runDateTime = t2.runDateTime ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_QUERY_EXECUTION_LOG t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.executedBy = t2.executedBy AND t1.runDateTime = t2.runDateTime));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_EXECUTION_LOG', 'INSERT INTO NC_QUERY_EXECUTION_LOG ( SCENARIO_ID,QUERY_ID,EXECUTED_BY,RUN_DATETIME,QUERY_RESULT,NUMBER_OF_RECORDS,ERROR_MESSAGE,RUN_TIME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.QUERY_ID,t1.EXECUTED_BY,t1.RUN_DATETIME,t1.QUERY_RESULT,t1.NUMBER_OF_RECORDS,t1.ERROR_MESSAGE,t1.RUN_TIME,''UPDATE'',''VALID'' FROM IN_QUERY_EXECUTION_LOG t1, QUERY_EXECUTION_LOG t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.executedBy = t2.executedBy AND t1.runDateTime = t2.runDateTime AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.queryID <> t2.queryID OR ( t1.queryID IS NULL AND t2.queryID IS NOT NULL) OR (t1.queryID IS NOT NULL AND t2.queryID IS NULL)) OR (t1.executedBy <> t2.executedBy OR ( t1.executedBy IS NULL AND t2.executedBy IS NOT NULL) OR (t1.executedBy IS NOT NULL AND t2.executedBy IS NULL)) OR (t1.runDateTime <> t2.runDateTime OR ( t1.runDateTime IS NULL AND t2.runDateTime IS NOT NULL) OR (t1.runDateTime IS NOT NULL AND t2.runDateTime IS NULL)) OR (t1.result <> t2.result OR ( t1.result IS NULL AND t2.result IS NOT NULL) OR (t1.result IS NOT NULL AND t2.result IS NULL)) OR (t1.numberOfRecord <> t2.numberOfRecord OR ( t1.numberOfRecord IS NULL AND t2.numberOfRecord IS NOT NULL) OR (t1.numberOfRecord IS NOT NULL AND t2.numberOfRecord IS NULL)) OR (t1.errorMessage <> t2.errorMessage OR ( t1.errorMessage IS NULL AND t2.errorMessage IS NOT NULL) OR (t1.errorMessage IS NOT NULL AND t2.errorMessage IS NULL)) OR (t1.runTime <> t2.runTime OR ( t1.runTime IS NULL AND t2.runTime IS NOT NULL) OR (t1.runTime IS NOT NULL AND t2.runTime IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_EXECUTION_LOG', 'INSERT INTO NC_QUERY_EXECUTION_LOG ( SCENARIO_ID,QUERY_ID,EXECUTED_BY,RUN_DATETIME,QUERY_RESULT,NUMBER_OF_RECORDS,ERROR_MESSAGE,RUN_TIME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.QUERY_ID,t1.EXECUTED_BY,t1.RUN_DATETIME,t1.QUERY_RESULT,t1.NUMBER_OF_RECORDS,t1.ERROR_MESSAGE,t1.RUN_TIME,''ACTIVATE'',''VALID'' FROM IN_QUERY_EXECUTION_LOG t1, QUERY_EXECUTION_LOG t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.executedBy = t2.executedBy AND t1.runDateTime = t2.runDateTime AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_MASTER', 'INSERT INTO NC_QUERY_MASTER ( SCENARIO_ID,QUERY_ID,QUERY_NAME,LAST_EXECUTED_BY,LAST_RESULT,NUMBER_OF_RUNS,LAST_RUN_DATETIME,QUERY_STRING,LAST_RUN_TIME,SECONDARY_CONNECTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,QUERY_ID,QUERY_NAME,LAST_EXECUTED_BY,LAST_RESULT,NUMBER_OF_RUNS,LAST_RUN_DATETIME,QUERY_STRING,LAST_RUN_TIME,SECONDARY_CONNECTION,''INSERT'',''VALID'' FROM IN_QUERY_MASTER t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM QUERY_MASTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_MASTER', 'INSERT INTO NC_QUERY_MASTER ( SCENARIO_ID,QUERY_ID,QUERY_NAME,LAST_EXECUTED_BY,LAST_RESULT,NUMBER_OF_RUNS,LAST_RUN_DATETIME,QUERY_STRING,LAST_RUN_TIME,SECONDARY_CONNECTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,QUERY_ID,QUERY_NAME,LAST_EXECUTED_BY,LAST_RESULT,NUMBER_OF_RUNS,LAST_RUN_DATETIME,QUERY_STRING,LAST_RUN_TIME,SECONDARY_CONNECTION,''DELETE'',''VALID'' FROM QUERY_MASTER t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_QUERY_MASTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_QUERY_MASTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_MASTER', 'INSERT INTO NC_QUERY_MASTER ( SCENARIO_ID,QUERY_ID,QUERY_NAME,LAST_EXECUTED_BY,LAST_RESULT,NUMBER_OF_RUNS,LAST_RUN_DATETIME,QUERY_STRING,LAST_RUN_TIME,SECONDARY_CONNECTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.QUERY_ID,t1.QUERY_NAME,t1.LAST_EXECUTED_BY,t1.LAST_RESULT,t1.NUMBER_OF_RUNS,t1.LAST_RUN_DATETIME,t1.QUERY_STRING,t1.LAST_RUN_TIME,t1.SECONDARY_CONNECTION,''UPDATE'',''VALID'' FROM IN_QUERY_MASTER t1, QUERY_MASTER t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.queryID <> t2.queryID OR ( t1.queryID IS NULL AND t2.queryID IS NOT NULL) OR (t1.queryID IS NOT NULL AND t2.queryID IS NULL)) OR (t1.queryName <> t2.queryName OR ( t1.queryName IS NULL AND t2.queryName IS NOT NULL) OR (t1.queryName IS NOT NULL AND t2.queryName IS NULL)) OR (t1.lastExecutedBy <> t2.lastExecutedBy OR ( t1.lastExecutedBy IS NULL AND t2.lastExecutedBy IS NOT NULL) OR (t1.lastExecutedBy IS NOT NULL AND t2.lastExecutedBy IS NULL)) OR (t1.lastResult <> t2.lastResult OR ( t1.lastResult IS NULL AND t2.lastResult IS NOT NULL) OR (t1.lastResult IS NOT NULL AND t2.lastResult IS NULL)) OR (t1.numberOfRuns <> t2.numberOfRuns OR ( t1.numberOfRuns IS NULL AND t2.numberOfRuns IS NOT NULL) OR (t1.numberOfRuns IS NOT NULL AND t2.numberOfRuns IS NULL)) OR (t1.lastRunDateTime <> t2.lastRunDateTime OR ( t1.lastRunDateTime IS NULL AND t2.lastRunDateTime IS NOT NULL) OR (t1.lastRunDateTime IS NOT NULL AND t2.lastRunDateTime IS NULL)) OR (t1.queryString <> t2.queryString OR ( t1.queryString IS NULL AND t2.queryString IS NOT NULL) OR (t1.queryString IS NOT NULL AND t2.queryString IS NULL)) OR (t1.lastRunTime <> t2.lastRunTime OR ( t1.lastRunTime IS NULL AND t2.lastRunTime IS NOT NULL) OR (t1.lastRunTime IS NOT NULL AND t2.lastRunTime IS NULL)) OR (t1.SecondaryConnection <> t2.SecondaryConnection OR ( t1.SecondaryConnection IS NULL AND t2.SecondaryConnection IS NOT NULL) OR (t1.SecondaryConnection IS NOT NULL AND t2.SecondaryConnection IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_MASTER', 'INSERT INTO NC_QUERY_MASTER ( SCENARIO_ID,QUERY_ID,QUERY_NAME,LAST_EXECUTED_BY,LAST_RESULT,NUMBER_OF_RUNS,LAST_RUN_DATETIME,QUERY_STRING,LAST_RUN_TIME,SECONDARY_CONNECTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.QUERY_ID,t1.QUERY_NAME,t1.LAST_EXECUTED_BY,t1.LAST_RESULT,t1.NUMBER_OF_RUNS,t1.LAST_RUN_DATETIME,t1.QUERY_STRING,t1.LAST_RUN_TIME,t1.SECONDARY_CONNECTION,''ACTIVATE'',''VALID'' FROM IN_QUERY_MASTER t1, QUERY_MASTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_PARAM', 'INSERT INTO NC_QUERY_PARAM ( SCENARIO_ID,QUERY_ID,PARAMETER_NAME,DESCRIPTION,DATA_TYPE,PARAMETER_VALUE,SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,QUERY_ID,PARAMETER_NAME,DESCRIPTION,DATA_TYPE,PARAMETER_VALUE,SEQUENCE,''INSERT'',''VALID'' FROM IN_QUERY_PARAM t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM QUERY_PARAM t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.parameter = t2.parameter )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_PARAM', 'INSERT INTO NC_QUERY_PARAM ( SCENARIO_ID,QUERY_ID,PARAMETER_NAME,DESCRIPTION,DATA_TYPE,PARAMETER_VALUE,SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,QUERY_ID,PARAMETER_NAME,DESCRIPTION,DATA_TYPE,PARAMETER_VALUE,SEQUENCE,''DELETE'',''VALID'' FROM QUERY_PARAM t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_QUERY_PARAM t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.parameter = t2.parameter ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_QUERY_PARAM t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.parameter = t2.parameter));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_PARAM', 'INSERT INTO NC_QUERY_PARAM ( SCENARIO_ID,QUERY_ID,PARAMETER_NAME,DESCRIPTION,DATA_TYPE,PARAMETER_VALUE,SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.QUERY_ID,t1.PARAMETER_NAME,t1.DESCRIPTION,t1.DATA_TYPE,t1.PARAMETER_VALUE,t1.SEQUENCE,''UPDATE'',''VALID'' FROM IN_QUERY_PARAM t1, QUERY_PARAM t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.parameter = t2.parameter AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.queryID <> t2.queryID OR ( t1.queryID IS NULL AND t2.queryID IS NOT NULL) OR (t1.queryID IS NOT NULL AND t2.queryID IS NULL)) OR (t1.parameter <> t2.parameter OR ( t1.parameter IS NULL AND t2.parameter IS NOT NULL) OR (t1.parameter IS NOT NULL AND t2.parameter IS NULL)) OR (t1.description <> t2.description OR ( t1.description IS NULL AND t2.description IS NOT NULL) OR (t1.description IS NOT NULL AND t2.description IS NULL)) OR (t1.dataType <> t2.dataType OR ( t1.dataType IS NULL AND t2.dataType IS NOT NULL) OR (t1.dataType IS NOT NULL AND t2.dataType IS NULL)) OR (t1.paramValue <> t2.paramValue OR ( t1.paramValue IS NULL AND t2.paramValue IS NOT NULL) OR (t1.paramValue IS NOT NULL AND t2.paramValue IS NULL)) OR (t1.sequence <> t2.sequence OR ( t1.sequence IS NULL AND t2.sequence IS NOT NULL) OR (t1.sequence IS NOT NULL AND t2.sequence IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_QUERY_PARAM', 'INSERT INTO NC_QUERY_PARAM ( SCENARIO_ID,QUERY_ID,PARAMETER_NAME,DESCRIPTION,DATA_TYPE,PARAMETER_VALUE,SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.QUERY_ID,t1.PARAMETER_NAME,t1.DESCRIPTION,t1.DATA_TYPE,t1.PARAMETER_VALUE,t1.SEQUENCE,''ACTIVATE'',''VALID'' FROM IN_QUERY_PARAM t1, QUERY_PARAM t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.queryID = t2.queryID AND t1.parameter = t2.parameter AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_CODE', 'INSERT INTO NC_REFERENCE_CODE ( SCENARIO_ID,EDW_Code,Code_Set_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,VALUE_ID,PARENT_EDW_CODE,PARENT_CODE_SET_ID,PARENT_VALUE_ID,CODE_NAME,PARENT_CODE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,EDW_Code,Code_Set_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,VALUE_ID,PARENT_EDW_CODE,PARENT_CODE_SET_ID,PARENT_VALUE_ID,CODE_NAME,PARENT_CODE_NAME,''INSERT'',''VALID'' FROM IN_REFERENCE_CODE t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REFERENCE_CODE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_CODE', 'INSERT INTO NC_REFERENCE_CODE ( SCENARIO_ID,EDW_Code,Code_Set_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,VALUE_ID,PARENT_EDW_CODE,PARENT_CODE_SET_ID,PARENT_VALUE_ID,CODE_NAME,PARENT_CODE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,EDW_Code,Code_Set_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,VALUE_ID,PARENT_EDW_CODE,PARENT_CODE_SET_ID,PARENT_VALUE_ID,CODE_NAME,PARENT_CODE_NAME,''DELETE'',''VALID'' FROM MST_REFERENCE_CODE t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REFERENCE_CODE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REFERENCE_CODE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_CODE', 'INSERT INTO NC_REFERENCE_CODE ( SCENARIO_ID,EDW_Code,Code_Set_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,VALUE_ID,PARENT_EDW_CODE,PARENT_CODE_SET_ID,PARENT_VALUE_ID,CODE_NAME,PARENT_CODE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.EDW_Code,t1.Code_Set_Id,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,t1.VALUE_ID,t1.PARENT_EDW_CODE,t1.PARENT_CODE_SET_ID,t1.PARENT_VALUE_ID,t1.CODE_NAME,t1.PARENT_CODE_NAME,''UPDATE'',''VALID'' FROM IN_REFERENCE_CODE t1, MST_REFERENCE_CODE t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.EDW_Code <> t2.EDW_Code OR ( t1.EDW_Code IS NULL AND t2.EDW_Code IS NOT NULL) OR (t1.EDW_Code IS NOT NULL AND t2.EDW_Code IS NULL)) OR (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Record_Deleted_Flag <> t2.Record_Deleted_Flag OR ( t1.Record_Deleted_Flag IS NULL AND t2.Record_Deleted_Flag IS NOT NULL) OR (t1.Record_Deleted_Flag IS NOT NULL AND t2.Record_Deleted_Flag IS NULL)) OR (t1.Ctl_Id <> t2.Ctl_Id OR ( t1.Ctl_Id IS NULL AND t2.Ctl_Id IS NOT NULL) OR (t1.Ctl_Id IS NOT NULL AND t2.Ctl_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Update_Process_Name <> t2.Update_Process_Name OR ( t1.Update_Process_Name IS NULL AND t2.Update_Process_Name IS NOT NULL) OR (t1.Update_Process_Name IS NOT NULL AND t2.Update_Process_Name IS NULL)) OR (t1.Update_Process_Id <> t2.Update_Process_Id OR ( t1.Update_Process_Id IS NULL AND t2.Update_Process_Id IS NOT NULL) OR (t1.Update_Process_Id IS NOT NULL AND t2.Update_Process_Id IS NULL)) OR (t1.VALUE_ID <> t2.VALUE_ID OR ( t1.VALUE_ID IS NULL AND t2.VALUE_ID IS NOT NULL) OR (t1.VALUE_ID IS NOT NULL AND t2.VALUE_ID IS NULL)) OR (t1.Parent_EDW_Code <> t2.Parent_EDW_Code OR ( t1.Parent_EDW_Code IS NULL AND t2.Parent_EDW_Code IS NOT NULL) OR (t1.Parent_EDW_Code IS NOT NULL AND t2.Parent_EDW_Code IS NULL)) OR (t1.Parent_Code_Set_Id <> t2.Parent_Code_Set_Id OR ( t1.Parent_Code_Set_Id IS NULL AND t2.Parent_Code_Set_Id IS NOT NULL) OR (t1.Parent_Code_Set_Id IS NOT NULL AND t2.Parent_Code_Set_Id IS NULL)) OR (t1.Parent_VALUE_ID <> t2.Parent_VALUE_ID OR ( t1.Parent_VALUE_ID IS NULL AND t2.Parent_VALUE_ID IS NOT NULL) OR (t1.Parent_VALUE_ID IS NOT NULL AND t2.Parent_VALUE_ID IS NULL)) OR (t1.Code_Name <> t2.Code_Name OR ( t1.Code_Name IS NULL AND t2.Code_Name IS NOT NULL) OR (t1.Code_Name IS NOT NULL AND t2.Code_Name IS NULL)) OR (t1.Parent_Code_Name <> t2.Parent_Code_Name OR ( t1.Parent_Code_Name IS NULL AND t2.Parent_Code_Name IS NOT NULL) OR (t1.Parent_Code_Name IS NOT NULL AND t2.Parent_Code_Name IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_CODE', 'INSERT INTO NC_REFERENCE_CODE ( SCENARIO_ID,EDW_Code,Code_Set_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,VALUE_ID,PARENT_EDW_CODE,PARENT_CODE_SET_ID,PARENT_VALUE_ID,CODE_NAME,PARENT_CODE_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.EDW_Code,t1.Code_Set_Id,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,t1.VALUE_ID,t1.PARENT_EDW_CODE,t1.PARENT_CODE_SET_ID,t1.PARENT_VALUE_ID,t1.CODE_NAME,t1.PARENT_CODE_NAME,''ACTIVATE'',''VALID'' FROM IN_REFERENCE_CODE t1, MST_REFERENCE_CODE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_DESCRIPTION', 'INSERT INTO NC_REFERENCE_DESCRIPTION ( SCENARIO_ID,EDW_Code,Code_Set_Id,Language_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,EDW_Code,Code_Set_Id,Language_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,''INSERT'',''VALID'' FROM IN_REFERENCE_DESCRIPTION t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REFERENCE_DESCRIPTION t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND t1.Language_Id = t2.Language_Id AND t1.Start_Date = t2.Start_Date )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_DESCRIPTION', 'INSERT INTO NC_REFERENCE_DESCRIPTION ( SCENARIO_ID,EDW_Code,Code_Set_Id,Language_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,EDW_Code,Code_Set_Id,Language_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,''DELETE'',''VALID'' FROM MST_REFERENCE_DESCRIPTION t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REFERENCE_DESCRIPTION t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND t1.Language_Id = t2.Language_Id AND t1.Start_Date = t2.Start_Date ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REFERENCE_DESCRIPTION t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND t1.Language_Id = t2.Language_Id AND t1.Start_Date = t2.Start_Date));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_DESCRIPTION', 'INSERT INTO NC_REFERENCE_DESCRIPTION ( SCENARIO_ID,EDW_Code,Code_Set_Id,Language_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.EDW_Code,t1.Code_Set_Id,t1.Language_Id,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,''UPDATE'',''VALID'' FROM IN_REFERENCE_DESCRIPTION t1, MST_REFERENCE_DESCRIPTION t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND t1.Language_Id = t2.Language_Id AND t1.Start_Date = t2.Start_Date AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.EDW_Code <> t2.EDW_Code OR ( t1.EDW_Code IS NULL AND t2.EDW_Code IS NOT NULL) OR (t1.EDW_Code IS NOT NULL AND t2.EDW_Code IS NULL)) OR (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.Language_Id <> t2.Language_Id OR ( t1.Language_Id IS NULL AND t2.Language_Id IS NOT NULL) OR (t1.Language_Id IS NOT NULL AND t2.Language_Id IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Record_Deleted_Flag <> t2.Record_Deleted_Flag OR ( t1.Record_Deleted_Flag IS NULL AND t2.Record_Deleted_Flag IS NOT NULL) OR (t1.Record_Deleted_Flag IS NOT NULL AND t2.Record_Deleted_Flag IS NULL)) OR (t1.Ctl_Id <> t2.Ctl_Id OR ( t1.Ctl_Id IS NULL AND t2.Ctl_Id IS NOT NULL) OR (t1.Ctl_Id IS NOT NULL AND t2.Ctl_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Update_Process_Name <> t2.Update_Process_Name OR ( t1.Update_Process_Name IS NULL AND t2.Update_Process_Name IS NOT NULL) OR (t1.Update_Process_Name IS NOT NULL AND t2.Update_Process_Name IS NULL)) OR (t1.Update_Process_Id <> t2.Update_Process_Id OR ( t1.Update_Process_Id IS NULL AND t2.Update_Process_Id IS NOT NULL) OR (t1.Update_Process_Id IS NOT NULL AND t2.Update_Process_Id IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REFERENCE_DESCRIPTION', 'INSERT INTO NC_REFERENCE_DESCRIPTION ( SCENARIO_ID,EDW_Code,Code_Set_Id,Language_Id,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.EDW_Code,t1.Code_Set_Id,t1.Language_Id,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,''ACTIVATE'',''VALID'' FROM IN_REFERENCE_DESCRIPTION t1, MST_REFERENCE_DESCRIPTION t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.EDW_Code = t2.EDW_Code AND t1.Language_Id = t2.Language_Id AND t1.Start_Date = t2.Start_Date AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_DESC', 'INSERT INTO NC_REL_OBJ_KEY_DESC ( SCENARIO_ID,ROKD_ID,ROKT_ID,KEY_COL_LOG_NAME,KEY_COL_PHY_NAME,KEY_DATA_TYPE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,KEY_COL_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROKD_ID,ROKT_ID,KEY_COL_LOG_NAME,KEY_COL_PHY_NAME,KEY_DATA_TYPE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,KEY_COL_SEQUENCE,''INSERT'',''VALID'' FROM IN_REL_OBJ_KEY_DESC t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_OBJ_KEY_DESC t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RokdId = t2.RokdId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_DESC', 'INSERT INTO NC_REL_OBJ_KEY_DESC ( SCENARIO_ID,ROKD_ID,ROKT_ID,KEY_COL_LOG_NAME,KEY_COL_PHY_NAME,KEY_DATA_TYPE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,KEY_COL_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROKD_ID,ROKT_ID,KEY_COL_LOG_NAME,KEY_COL_PHY_NAME,KEY_DATA_TYPE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,KEY_COL_SEQUENCE,''DELETE'',''VALID'' FROM MST_REL_OBJ_KEY_DESC t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_OBJ_KEY_DESC t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RokdId = t2.RokdId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_OBJ_KEY_DESC t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RokdId = t2.RokdId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_DESC', 'INSERT INTO NC_REL_OBJ_KEY_DESC ( SCENARIO_ID,ROKD_ID,ROKT_ID,KEY_COL_LOG_NAME,KEY_COL_PHY_NAME,KEY_DATA_TYPE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,KEY_COL_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROKD_ID,t1.ROKT_ID,t1.KEY_COL_LOG_NAME,t1.KEY_COL_PHY_NAME,t1.KEY_DATA_TYPE,t1.DATA_TYPE_LENGTH,t1.DATA_TYPE_PRECISION,t1.KEY_COL_SEQUENCE,''UPDATE'',''VALID'' FROM IN_REL_OBJ_KEY_DESC t1, MST_REL_OBJ_KEY_DESC t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RokdId = t2.RokdId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.RokdId <> t2.RokdId OR ( t1.RokdId IS NULL AND t2.RokdId IS NOT NULL) OR (t1.RokdId IS NOT NULL AND t2.RokdId IS NULL)) OR (t1.RoktId <> t2.RoktId OR ( t1.RoktId IS NULL AND t2.RoktId IS NOT NULL) OR (t1.RoktId IS NOT NULL AND t2.RoktId IS NULL)) OR (t1.KeyColumnLogicalName <> t2.KeyColumnLogicalName OR ( t1.KeyColumnLogicalName IS NULL AND t2.KeyColumnLogicalName IS NOT NULL) OR (t1.KeyColumnLogicalName IS NOT NULL AND t2.KeyColumnLogicalName IS NULL)) OR (t1.KeyColumnPhysicalName <> t2.KeyColumnPhysicalName OR ( t1.KeyColumnPhysicalName IS NULL AND t2.KeyColumnPhysicalName IS NOT NULL) OR (t1.KeyColumnPhysicalName IS NOT NULL AND t2.KeyColumnPhysicalName IS NULL)) OR (t1.KeyDataType <> t2.KeyDataType OR ( t1.KeyDataType IS NULL AND t2.KeyDataType IS NOT NULL) OR (t1.KeyDataType IS NOT NULL AND t2.KeyDataType IS NULL)) OR (t1.DataTypeLength <> t2.DataTypeLength OR ( t1.DataTypeLength IS NULL AND t2.DataTypeLength IS NOT NULL) OR (t1.DataTypeLength IS NOT NULL AND t2.DataTypeLength IS NULL)) OR (t1.DataTypePrecision <> t2.DataTypePrecision OR ( t1.DataTypePrecision IS NULL AND t2.DataTypePrecision IS NOT NULL) OR (t1.DataTypePrecision IS NOT NULL AND t2.DataTypePrecision IS NULL)) OR (t1.KeyColumnSequence <> t2.KeyColumnSequence OR ( t1.KeyColumnSequence IS NULL AND t2.KeyColumnSequence IS NOT NULL) OR (t1.KeyColumnSequence IS NOT NULL AND t2.KeyColumnSequence IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_DESC', 'INSERT INTO NC_REL_OBJ_KEY_DESC ( SCENARIO_ID,ROKD_ID,ROKT_ID,KEY_COL_LOG_NAME,KEY_COL_PHY_NAME,KEY_DATA_TYPE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,KEY_COL_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROKD_ID,t1.ROKT_ID,t1.KEY_COL_LOG_NAME,t1.KEY_COL_PHY_NAME,t1.KEY_DATA_TYPE,t1.DATA_TYPE_LENGTH,t1.DATA_TYPE_PRECISION,t1.KEY_COL_SEQUENCE,''ACTIVATE'',''VALID'' FROM IN_REL_OBJ_KEY_DESC t1, MST_REL_OBJ_KEY_DESC t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RokdId = t2.RokdId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_PROPERTIES', 'INSERT INTO NC_REL_OBJ_PROPERTIES ( SCENARIO_ID,ROP_ID,ROM_ID,NAME,DISPLAY_NAME,DATA_TYPE,NULLABLE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,RODV_COL_NAME,DEFAULT_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROP_ID,ROM_ID,NAME,DISPLAY_NAME,DATA_TYPE,NULLABLE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,RODV_COL_NAME,DEFAULT_VALUE,''INSERT'',''VALID'' FROM IN_REL_OBJ_PROPERTIES t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_OBJ_PROPERTIES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RopId = t2.RopId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_PROPERTIES', 'INSERT INTO NC_REL_OBJ_PROPERTIES ( SCENARIO_ID,ROP_ID,ROM_ID,NAME,DISPLAY_NAME,DATA_TYPE,NULLABLE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,RODV_COL_NAME,DEFAULT_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROP_ID,ROM_ID,NAME,DISPLAY_NAME,DATA_TYPE,NULLABLE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,RODV_COL_NAME,DEFAULT_VALUE,''DELETE'',''VALID'' FROM MST_REL_OBJ_PROPERTIES t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_OBJ_PROPERTIES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RopId = t2.RopId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_OBJ_PROPERTIES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RopId = t2.RopId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_PROPERTIES', 'INSERT INTO NC_REL_OBJ_PROPERTIES ( SCENARIO_ID,ROP_ID,ROM_ID,NAME,DISPLAY_NAME,DATA_TYPE,NULLABLE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,RODV_COL_NAME,DEFAULT_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROP_ID,t1.ROM_ID,t1.NAME,t1.DISPLAY_NAME,t1.DATA_TYPE,t1.NULLABLE,t1.DATA_TYPE_LENGTH,t1.DATA_TYPE_PRECISION,t1.RODV_COL_NAME,t1.DEFAULT_VALUE,''UPDATE'',''VALID'' FROM IN_REL_OBJ_PROPERTIES t1, MST_REL_OBJ_PROPERTIES t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RopId = t2.RopId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.RopId <> t2.RopId OR ( t1.RopId IS NULL AND t2.RopId IS NOT NULL) OR (t1.RopId IS NOT NULL AND t2.RopId IS NULL)) OR (t1.RomId <> t2.RomId OR ( t1.RomId IS NULL AND t2.RomId IS NOT NULL) OR (t1.RomId IS NOT NULL AND t2.RomId IS NULL)) OR (t1.Name <> t2.Name OR ( t1.Name IS NULL AND t2.Name IS NOT NULL) OR (t1.Name IS NOT NULL AND t2.Name IS NULL)) OR (t1.DisplayName <> t2.DisplayName OR ( t1.DisplayName IS NULL AND t2.DisplayName IS NOT NULL) OR (t1.DisplayName IS NOT NULL AND t2.DisplayName IS NULL)) OR (t1.DataType <> t2.DataType OR ( t1.DataType IS NULL AND t2.DataType IS NOT NULL) OR (t1.DataType IS NOT NULL AND t2.DataType IS NULL)) OR (t1.Nullable <> t2.Nullable OR ( t1.Nullable IS NULL AND t2.Nullable IS NOT NULL) OR (t1.Nullable IS NOT NULL AND t2.Nullable IS NULL)) OR (t1.DataTypeLength <> t2.DataTypeLength OR ( t1.DataTypeLength IS NULL AND t2.DataTypeLength IS NOT NULL) OR (t1.DataTypeLength IS NOT NULL AND t2.DataTypeLength IS NULL)) OR (t1.DataTypePrecision <> t2.DataTypePrecision OR ( t1.DataTypePrecision IS NULL AND t2.DataTypePrecision IS NOT NULL) OR (t1.DataTypePrecision IS NOT NULL AND t2.DataTypePrecision IS NULL)) OR (t1.RelObjDataValColName <> t2.RelObjDataValColName OR ( t1.RelObjDataValColName IS NULL AND t2.RelObjDataValColName IS NOT NULL) OR (t1.RelObjDataValColName IS NOT NULL AND t2.RelObjDataValColName IS NULL)) OR (t1.DefaultValue <> t2.DefaultValue OR ( t1.DefaultValue IS NULL AND t2.DefaultValue IS NOT NULL) OR (t1.DefaultValue IS NOT NULL AND t2.DefaultValue IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_PROPERTIES', 'INSERT INTO NC_REL_OBJ_PROPERTIES ( SCENARIO_ID,ROP_ID,ROM_ID,NAME,DISPLAY_NAME,DATA_TYPE,NULLABLE,DATA_TYPE_LENGTH,DATA_TYPE_PRECISION,RODV_COL_NAME,DEFAULT_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROP_ID,t1.ROM_ID,t1.NAME,t1.DISPLAY_NAME,t1.DATA_TYPE,t1.NULLABLE,t1.DATA_TYPE_LENGTH,t1.DATA_TYPE_PRECISION,t1.RODV_COL_NAME,t1.DEFAULT_VALUE,''ACTIVATE'',''VALID'' FROM IN_REL_OBJ_PROPERTIES t1, MST_REL_OBJ_PROPERTIES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RopId = t2.RopId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RELATIONAL_OBJECT', 'INSERT INTO NC_RELATIONAL_OBJECT ( SCENARIO_ID,RO_ID,MST_TBL_LOG_NAME,MST_TBL_PHY_NAME,NAME,DESCRIPTION,MST_VIEW_NAME,DISPLAY_NAME,MASTER_DATA_URL,URL_PARAMETER,SORT_COLUMNS_NAME,DISPLAY_COLUMNS_NAME_LOG,SORT_COLUMNS_NAME_LOG,DISPLAY_COL_LOG_HOVER,VER_DISPLAY_NAME,VER_SORT_COLUMNS_NAME,VER_MASTER_DATA_URL,VER_TBL_PHY_NAME,VER_VIEW_NAME,VER_TBL_LOG_NAME,VER_DISPLAY_COL_LOG_HOVER,IS_NON_MDM,IS_TEMPORAL,TOOLTIP_COLUMN_LOG_NAME,TOOLTIP_COLUMNS,VER_TOOLTIP_COLUMNS,TOOLTIP_DISPLAY_NAME,VER_TOOLTIP_DISPLAY_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,RO_ID,MST_TBL_LOG_NAME,MST_TBL_PHY_NAME,NAME,DESCRIPTION,MST_VIEW_NAME,DISPLAY_NAME,MASTER_DATA_URL,URL_PARAMETER,SORT_COLUMNS_NAME,DISPLAY_COLUMNS_NAME_LOG,SORT_COLUMNS_NAME_LOG,DISPLAY_COL_LOG_HOVER,VER_DISPLAY_NAME,VER_SORT_COLUMNS_NAME,VER_MASTER_DATA_URL,VER_TBL_PHY_NAME,VER_VIEW_NAME,VER_TBL_LOG_NAME,VER_DISPLAY_COL_LOG_HOVER,IS_NON_MDM,IS_TEMPORAL,TOOLTIP_COLUMN_LOG_NAME,TOOLTIP_COLUMNS,VER_TOOLTIP_COLUMNS,TOOLTIP_DISPLAY_NAME,VER_TOOLTIP_DISPLAY_NAME,''INSERT'',''VALID'' FROM IN_RELATIONAL_OBJECT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_RELATIONAL_OBJECT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoId = t2.RoId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RELATIONAL_OBJECT', 'INSERT INTO NC_RELATIONAL_OBJECT ( SCENARIO_ID,RO_ID,MST_TBL_LOG_NAME,MST_TBL_PHY_NAME,NAME,DESCRIPTION,MST_VIEW_NAME,DISPLAY_NAME,MASTER_DATA_URL,URL_PARAMETER,SORT_COLUMNS_NAME,DISPLAY_COLUMNS_NAME_LOG,SORT_COLUMNS_NAME_LOG,DISPLAY_COL_LOG_HOVER,VER_DISPLAY_NAME,VER_SORT_COLUMNS_NAME,VER_MASTER_DATA_URL,VER_TBL_PHY_NAME,VER_VIEW_NAME,VER_TBL_LOG_NAME,VER_DISPLAY_COL_LOG_HOVER,IS_NON_MDM,IS_TEMPORAL,TOOLTIP_COLUMN_LOG_NAME,TOOLTIP_COLUMNS,VER_TOOLTIP_COLUMNS,TOOLTIP_DISPLAY_NAME,VER_TOOLTIP_DISPLAY_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,RO_ID,MST_TBL_LOG_NAME,MST_TBL_PHY_NAME,NAME,DESCRIPTION,MST_VIEW_NAME,DISPLAY_NAME,MASTER_DATA_URL,URL_PARAMETER,SORT_COLUMNS_NAME,DISPLAY_COLUMNS_NAME_LOG,SORT_COLUMNS_NAME_LOG,DISPLAY_COL_LOG_HOVER,VER_DISPLAY_NAME,VER_SORT_COLUMNS_NAME,VER_MASTER_DATA_URL,VER_TBL_PHY_NAME,VER_VIEW_NAME,VER_TBL_LOG_NAME,VER_DISPLAY_COL_LOG_HOVER,IS_NON_MDM,IS_TEMPORAL,TOOLTIP_COLUMN_LOG_NAME,TOOLTIP_COLUMNS,VER_TOOLTIP_COLUMNS,TOOLTIP_DISPLAY_NAME,VER_TOOLTIP_DISPLAY_NAME,''DELETE'',''VALID'' FROM MST_RELATIONAL_OBJECT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_RELATIONAL_OBJECT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoId = t2.RoId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_RELATIONAL_OBJECT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoId = t2.RoId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RELATIONAL_OBJECT', 'INSERT INTO NC_RELATIONAL_OBJECT ( SCENARIO_ID,RO_ID,MST_TBL_LOG_NAME,MST_TBL_PHY_NAME,NAME,DESCRIPTION,MST_VIEW_NAME,DISPLAY_NAME,MASTER_DATA_URL,URL_PARAMETER,SORT_COLUMNS_NAME,DISPLAY_COLUMNS_NAME_LOG,SORT_COLUMNS_NAME_LOG,DISPLAY_COL_LOG_HOVER,VER_DISPLAY_NAME,VER_SORT_COLUMNS_NAME,VER_MASTER_DATA_URL,VER_TBL_PHY_NAME,VER_VIEW_NAME,VER_TBL_LOG_NAME,VER_DISPLAY_COL_LOG_HOVER,IS_NON_MDM,IS_TEMPORAL,TOOLTIP_COLUMN_LOG_NAME,TOOLTIP_COLUMNS,VER_TOOLTIP_COLUMNS,TOOLTIP_DISPLAY_NAME,VER_TOOLTIP_DISPLAY_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.RO_ID,t1.MST_TBL_LOG_NAME,t1.MST_TBL_PHY_NAME,t1.NAME,t1.DESCRIPTION,t1.MST_VIEW_NAME,t1.DISPLAY_NAME,t1.MASTER_DATA_URL,t1.URL_PARAMETER,t1.SORT_COLUMNS_NAME,t1.DISPLAY_COLUMNS_NAME_LOG,t1.SORT_COLUMNS_NAME_LOG,t1.DISPLAY_COL_LOG_HOVER,t1.VER_DISPLAY_NAME,t1.VER_SORT_COLUMNS_NAME,t1.VER_MASTER_DATA_URL,t1.VER_TBL_PHY_NAME,t1.VER_VIEW_NAME,t1.VER_TBL_LOG_NAME,t1.VER_DISPLAY_COL_LOG_HOVER,t1.IS_NON_MDM,t1.IS_TEMPORAL,t1.TOOLTIP_COLUMN_LOG_NAME,t1.TOOLTIP_COLUMNS,t1.VER_TOOLTIP_COLUMNS,t1.TOOLTIP_DISPLAY_NAME,t1.VER_TOOLTIP_DISPLAY_NAME,''UPDATE'',''VALID'' FROM IN_RELATIONAL_OBJECT t1, MST_RELATIONAL_OBJECT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoId = t2.RoId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.RoId <> t2.RoId OR ( t1.RoId IS NULL AND t2.RoId IS NOT NULL) OR (t1.RoId IS NOT NULL AND t2.RoId IS NULL)) OR (t1.LogicalTableName <> t2.LogicalTableName OR ( t1.LogicalTableName IS NULL AND t2.LogicalTableName IS NOT NULL) OR (t1.LogicalTableName IS NOT NULL AND t2.LogicalTableName IS NULL)) OR (t1.PhysicalTableName <> t2.PhysicalTableName OR ( t1.PhysicalTableName IS NULL AND t2.PhysicalTableName IS NOT NULL) OR (t1.PhysicalTableName IS NOT NULL AND t2.PhysicalTableName IS NULL)) OR (t1.ObjectName <> t2.ObjectName OR ( t1.ObjectName IS NULL AND t2.ObjectName IS NOT NULL) OR (t1.ObjectName IS NOT NULL AND t2.ObjectName IS NULL)) OR (t1.ObjectDescription <> t2.ObjectDescription OR ( t1.ObjectDescription IS NULL AND t2.ObjectDescription IS NOT NULL) OR (t1.ObjectDescription IS NOT NULL AND t2.ObjectDescription IS NULL)) OR (t1.PhysicalViewName <> t2.PhysicalViewName OR ( t1.PhysicalViewName IS NULL AND t2.PhysicalViewName IS NOT NULL) OR (t1.PhysicalViewName IS NOT NULL AND t2.PhysicalViewName IS NULL)) OR (t1.DisplayColumnNames <> t2.DisplayColumnNames OR ( t1.DisplayColumnNames IS NULL AND t2.DisplayColumnNames IS NOT NULL) OR (t1.DisplayColumnNames IS NOT NULL AND t2.DisplayColumnNames IS NULL)) OR (t1.Url <> t2.Url OR ( t1.Url IS NULL AND t2.Url IS NOT NULL) OR (t1.Url IS NOT NULL AND t2.Url IS NULL)) OR (t1.UrlParam <> t2.UrlParam OR ( t1.UrlParam IS NULL AND t2.UrlParam IS NOT NULL) OR (t1.UrlParam IS NOT NULL AND t2.UrlParam IS NULL)) OR (t1.SortColumnNames <> t2.SortColumnNames OR ( t1.SortColumnNames IS NULL AND t2.SortColumnNames IS NOT NULL) OR (t1.SortColumnNames IS NOT NULL AND t2.SortColumnNames IS NULL)) OR (t1.DisplayColumnLogicalNames <> t2.DisplayColumnLogicalNames OR ( t1.DisplayColumnLogicalNames IS NULL AND t2.DisplayColumnLogicalNames IS NOT NULL) OR (t1.DisplayColumnLogicalNames IS NOT NULL AND t2.DisplayColumnLogicalNames IS NULL)) OR (t1.SortColumnLogicalNames <> t2.SortColumnLogicalNames OR ( t1.SortColumnLogicalNames IS NULL AND t2.SortColumnLogicalNames IS NOT NULL) OR (t1.SortColumnLogicalNames IS NOT NULL AND t2.SortColumnLogicalNames IS NULL)) OR (t1.DisplayColumnLogicalHover <> t2.DisplayColumnLogicalHover OR ( t1.DisplayColumnLogicalHover IS NULL AND t2.DisplayColumnLogicalHover IS NOT NULL) OR (t1.DisplayColumnLogicalHover IS NOT NULL AND t2.DisplayColumnLogicalHover IS NULL)) OR (t1.DisplayColumnsVersion <> t2.DisplayColumnsVersion OR ( t1.DisplayColumnsVersion IS NULL AND t2.DisplayColumnsVersion IS NOT NULL) OR (t1.DisplayColumnsVersion IS NOT NULL AND t2.DisplayColumnsVersion IS NULL)) OR (t1.SortColumnVersion <> t2.SortColumnVersion OR ( t1.SortColumnVersion IS NULL AND t2.SortColumnVersion IS NOT NULL) OR (t1.SortColumnVersion IS NOT NULL AND t2.SortColumnVersion IS NULL)) OR (t1.MasterDataURLVersion <> t2.MasterDataURLVersion OR ( t1.MasterDataURLVersion IS NULL AND t2.MasterDataURLVersion IS NOT NULL) OR (t1.MasterDataURLVersion IS NOT NULL AND t2.MasterDataURLVersion IS NULL)) OR (t1.PhysicalTableNameVersion <> t2.PhysicalTableNameVersion OR ( t1.PhysicalTableNameVersion IS NULL AND t2.PhysicalTableNameVersion IS NOT NULL) OR (t1.PhysicalTableNameVersion IS NOT NULL AND t2.PhysicalTableNameVersion IS NULL)) OR (t1.PhysicalViewNameVersion <> t2.PhysicalViewNameVersion OR ( t1.PhysicalViewNameVersion IS NULL AND t2.PhysicalViewNameVersion IS NOT NULL) OR (t1.PhysicalViewNameVersion IS NOT NULL AND t2.PhysicalViewNameVersion IS NULL)) OR (t1.LogicalTableNameVersion <> t2.LogicalTableNameVersion OR ( t1.LogicalTableNameVersion IS NULL AND t2.LogicalTableNameVersion IS NOT NULL) OR (t1.LogicalTableNameVersion IS NOT NULL AND t2.LogicalTableNameVersion IS NULL)) OR (t1.DisplayColLogHoverVersion <> t2.DisplayColLogHoverVersion OR ( t1.DisplayColLogHoverVersion IS NULL AND t2.DisplayColLogHoverVersion IS NOT NULL) OR (t1.DisplayColLogHoverVersion IS NOT NULL AND t2.DisplayColLogHoverVersion IS NULL)) OR (t1.IsNonMdm <> t2.IsNonMdm OR ( t1.IsNonMdm IS NULL AND t2.IsNonMdm IS NOT NULL) OR (t1.IsNonMdm IS NOT NULL AND t2.IsNonMdm IS NULL)) OR (t1.IsTemporal <> t2.IsTemporal OR ( t1.IsTemporal IS NULL AND t2.IsTemporal IS NOT NULL) OR (t1.IsTemporal IS NOT NULL AND t2.IsTemporal IS NULL)) OR (t1.TooltipLogicalColumnNames <> t2.TooltipLogicalColumnNames OR ( t1.TooltipLogicalColumnNames IS NULL AND t2.TooltipLogicalColumnNames IS NOT NULL) OR (t1.TooltipLogicalColumnNames IS NOT NULL AND t2.TooltipLogicalColumnNames IS NULL)) OR (t1.TooltipColumns <> t2.TooltipColumns OR ( t1.TooltipColumns IS NULL AND t2.TooltipColumns IS NOT NULL) OR (t1.TooltipColumns IS NOT NULL AND t2.TooltipColumns IS NULL)) OR (t1.TooltipVersionColumns <> t2.TooltipVersionColumns OR ( t1.TooltipVersionColumns IS NULL AND t2.TooltipVersionColumns IS NOT NULL) OR (t1.TooltipVersionColumns IS NOT NULL AND t2.TooltipVersionColumns IS NULL)) OR (t1.TooltipDisplayName <> t2.TooltipDisplayName OR ( t1.TooltipDisplayName IS NULL AND t2.TooltipDisplayName IS NOT NULL) OR (t1.TooltipDisplayName IS NOT NULL AND t2.TooltipDisplayName IS NULL)) OR (t1.TooltipDisplayNameVersion <> t2.TooltipDisplayNameVersion OR ( t1.TooltipDisplayNameVersion IS NULL AND t2.TooltipDisplayNameVersion IS NOT NULL) OR (t1.TooltipDisplayNameVersion IS NOT NULL AND t2.TooltipDisplayNameVersion IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RELATIONAL_OBJECT', 'INSERT INTO NC_RELATIONAL_OBJECT ( SCENARIO_ID,RO_ID,MST_TBL_LOG_NAME,MST_TBL_PHY_NAME,NAME,DESCRIPTION,MST_VIEW_NAME,DISPLAY_NAME,MASTER_DATA_URL,URL_PARAMETER,SORT_COLUMNS_NAME,DISPLAY_COLUMNS_NAME_LOG,SORT_COLUMNS_NAME_LOG,DISPLAY_COL_LOG_HOVER,VER_DISPLAY_NAME,VER_SORT_COLUMNS_NAME,VER_MASTER_DATA_URL,VER_TBL_PHY_NAME,VER_VIEW_NAME,VER_TBL_LOG_NAME,VER_DISPLAY_COL_LOG_HOVER,IS_NON_MDM,IS_TEMPORAL,TOOLTIP_COLUMN_LOG_NAME,TOOLTIP_COLUMNS,VER_TOOLTIP_COLUMNS,TOOLTIP_DISPLAY_NAME,VER_TOOLTIP_DISPLAY_NAME,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.RO_ID,t1.MST_TBL_LOG_NAME,t1.MST_TBL_PHY_NAME,t1.NAME,t1.DESCRIPTION,t1.MST_VIEW_NAME,t1.DISPLAY_NAME,t1.MASTER_DATA_URL,t1.URL_PARAMETER,t1.SORT_COLUMNS_NAME,t1.DISPLAY_COLUMNS_NAME_LOG,t1.SORT_COLUMNS_NAME_LOG,t1.DISPLAY_COL_LOG_HOVER,t1.VER_DISPLAY_NAME,t1.VER_SORT_COLUMNS_NAME,t1.VER_MASTER_DATA_URL,t1.VER_TBL_PHY_NAME,t1.VER_VIEW_NAME,t1.VER_TBL_LOG_NAME,t1.VER_DISPLAY_COL_LOG_HOVER,t1.IS_NON_MDM,t1.IS_TEMPORAL,t1.TOOLTIP_COLUMN_LOG_NAME,t1.TOOLTIP_COLUMNS,t1.VER_TOOLTIP_COLUMNS,t1.TOOLTIP_DISPLAY_NAME,t1.VER_TOOLTIP_DISPLAY_NAME,''ACTIVATE'',''VALID'' FROM IN_RELATIONAL_OBJECT t1, MST_RELATIONAL_OBJECT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoId = t2.RoId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_DATA_VAL', 'INSERT INTO NC_REL_CLM_OBJ_DATA_VAL ( SCENARIO_ID,CLM_RODV_ID,CLM_ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,CHILD_VALUE,WORKFLOW_NAME,WORKFLOW_INSTANCE_ID,START_DATE,END_DATE,APPROVED_BY,null,STATUS,APPROVED_DATE,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,CLM_RODV_ID,CLM_ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,CHILD_VALUE,WORKFLOW_NAME,WORKFLOW_INSTANCE_ID,START_DATE,END_DATE,APPROVED_BY,null,STATUS,APPROVED_DATE,XREF_UUID,''INSERT'',''VALID'' FROM IN_REL_CLM_OBJ_DATA_VAL t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_CLM_OBJ_DATA_VAL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRodvId = t2.ColumnRodvId AND t1.Xref_uuid = t2.Xref_uuid )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_DATA_VAL', 'INSERT INTO NC_REL_CLM_OBJ_DATA_VAL ( SCENARIO_ID,CLM_RODV_ID,CLM_ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,CHILD_VALUE,WORKFLOW_NAME,WORKFLOW_INSTANCE_ID,START_DATE,END_DATE,APPROVED_BY,null,STATUS,APPROVED_DATE,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,CLM_RODV_ID,CLM_ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,CHILD_VALUE,WORKFLOW_NAME,WORKFLOW_INSTANCE_ID,START_DATE,END_DATE,APPROVED_BY,null,STATUS,APPROVED_DATE,XREF_UUID,''DELETE'',''VALID'' FROM MST_REL_CLM_OBJ_DATA_VAL t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_CLM_OBJ_DATA_VAL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRodvId = t2.ColumnRodvId AND t1.Xref_uuid = t2.Xref_uuid ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_CLM_OBJ_DATA_VAL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRodvId = t2.ColumnRodvId AND t1.Xref_uuid = t2.Xref_uuid));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_DATA_VAL', 'INSERT INTO NC_REL_CLM_OBJ_DATA_VAL ( SCENARIO_ID,CLM_RODV_ID,CLM_ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,CHILD_VALUE,WORKFLOW_NAME,WORKFLOW_INSTANCE_ID,START_DATE,END_DATE,APPROVED_BY,null,STATUS,APPROVED_DATE,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.CLM_RODV_ID,t1.CLM_ROM_ID,t1.PARENT_ROKD_VAL1,t1.PARENT_ROKD_VAL2,t1.PARENT_ROKD_VAL3,t1.PARENT_ROKD_VAL4,t1.PARENT_ROKD_VAL5,t1.PARENT_ROKD_VAL6,t1.PARENT_ROKD_VAL7,t1.PARENT_ROKD_VAL8,t1.PARENT_ROKD_VAL9,t1.PARENT_ROKD_VAL10,t1.CHILD_ROKD_VAL1,t1.CHILD_ROKD_VAL2,t1.CHILD_ROKD_VAL3,t1.CHILD_ROKD_VAL4,t1.CHILD_ROKD_VAL5,t1.CHILD_ROKD_VAL6,t1.CHILD_ROKD_VAL7,t1.CHILD_ROKD_VAL8,t1.CHILD_ROKD_VAL9,t1.CHILD_ROKD_VAL10,t1.CHILD_VALUE,t1.WORKFLOW_NAME,t1.WORKFLOW_INSTANCE_ID,t1.START_DATE,t1.END_DATE,t1.APPROVED_BY,t1.null,t1.STATUS,t1.APPROVED_DATE,t1.XREF_UUID,''UPDATE'',''VALID'' FROM IN_REL_CLM_OBJ_DATA_VAL t1, MST_REL_CLM_OBJ_DATA_VAL t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRodvId = t2.ColumnRodvId AND t1.Xref_uuid = t2.Xref_uuid AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.ColumnRodvId <> t2.ColumnRodvId OR ( t1.ColumnRodvId IS NULL AND t2.ColumnRodvId IS NOT NULL) OR (t1.ColumnRodvId IS NOT NULL AND t2.ColumnRodvId IS NULL)) OR (t1.ColumnRomId <> t2.ColumnRomId OR ( t1.ColumnRomId IS NULL AND t2.ColumnRomId IS NOT NULL) OR (t1.ColumnRomId IS NOT NULL AND t2.ColumnRomId IS NULL)) OR (t1.ParentRokdVal1 <> t2.ParentRokdVal1 OR ( t1.ParentRokdVal1 IS NULL AND t2.ParentRokdVal1 IS NOT NULL) OR (t1.ParentRokdVal1 IS NOT NULL AND t2.ParentRokdVal1 IS NULL)) OR (t1.ParentRokdVal2 <> t2.ParentRokdVal2 OR ( t1.ParentRokdVal2 IS NULL AND t2.ParentRokdVal2 IS NOT NULL) OR (t1.ParentRokdVal2 IS NOT NULL AND t2.ParentRokdVal2 IS NULL)) OR (t1.ParentRokdVal3 <> t2.ParentRokdVal3 OR ( t1.ParentRokdVal3 IS NULL AND t2.ParentRokdVal3 IS NOT NULL) OR (t1.ParentRokdVal3 IS NOT NULL AND t2.ParentRokdVal3 IS NULL)) OR (t1.ParentRokdVal4 <> t2.ParentRokdVal4 OR ( t1.ParentRokdVal4 IS NULL AND t2.ParentRokdVal4 IS NOT NULL) OR (t1.ParentRokdVal4 IS NOT NULL AND t2.ParentRokdVal4 IS NULL)) OR (t1.ParentRokdVal5 <> t2.ParentRokdVal5 OR ( t1.ParentRokdVal5 IS NULL AND t2.ParentRokdVal5 IS NOT NULL) OR (t1.ParentRokdVal5 IS NOT NULL AND t2.ParentRokdVal5 IS NULL)) OR (t1.ParentRokdVal6 <> t2.ParentRokdVal6 OR ( t1.ParentRokdVal6 IS NULL AND t2.ParentRokdVal6 IS NOT NULL) OR (t1.ParentRokdVal6 IS NOT NULL AND t2.ParentRokdVal6 IS NULL)) OR (t1.ParentRokdVal7 <> t2.ParentRokdVal7 OR ( t1.ParentRokdVal7 IS NULL AND t2.ParentRokdVal7 IS NOT NULL) OR (t1.ParentRokdVal7 IS NOT NULL AND t2.ParentRokdVal7 IS NULL)) OR (t1.ParentRokdVal8 <> t2.ParentRokdVal8 OR ( t1.ParentRokdVal8 IS NULL AND t2.ParentRokdVal8 IS NOT NULL) OR (t1.ParentRokdVal8 IS NOT NULL AND t2.ParentRokdVal8 IS NULL)) OR (t1.ParentRokdVal9 <> t2.ParentRokdVal9 OR ( t1.ParentRokdVal9 IS NULL AND t2.ParentRokdVal9 IS NOT NULL) OR (t1.ParentRokdVal9 IS NOT NULL AND t2.ParentRokdVal9 IS NULL)) OR (t1.ParentRokdVal10 <> t2.ParentRokdVal10 OR ( t1.ParentRokdVal10 IS NULL AND t2.ParentRokdVal10 IS NOT NULL) OR (t1.ParentRokdVal10 IS NOT NULL AND t2.ParentRokdVal10 IS NULL)) OR (t1.ChildRokdVal1 <> t2.ChildRokdVal1 OR ( t1.ChildRokdVal1 IS NULL AND t2.ChildRokdVal1 IS NOT NULL) OR (t1.ChildRokdVal1 IS NOT NULL AND t2.ChildRokdVal1 IS NULL)) OR (t1.ChildRokdVal2 <> t2.ChildRokdVal2 OR ( t1.ChildRokdVal2 IS NULL AND t2.ChildRokdVal2 IS NOT NULL) OR (t1.ChildRokdVal2 IS NOT NULL AND t2.ChildRokdVal2 IS NULL)) OR (t1.ChildRokdVal3 <> t2.ChildRokdVal3 OR ( t1.ChildRokdVal3 IS NULL AND t2.ChildRokdVal3 IS NOT NULL) OR (t1.ChildRokdVal3 IS NOT NULL AND t2.ChildRokdVal3 IS NULL)) OR (t1.ChildRokdVal4 <> t2.ChildRokdVal4 OR ( t1.ChildRokdVal4 IS NULL AND t2.ChildRokdVal4 IS NOT NULL) OR (t1.ChildRokdVal4 IS NOT NULL AND t2.ChildRokdVal4 IS NULL)) OR (t1.ChildRokdVal5 <> t2.ChildRokdVal5 OR ( t1.ChildRokdVal5 IS NULL AND t2.ChildRokdVal5 IS NOT NULL) OR (t1.ChildRokdVal5 IS NOT NULL AND t2.ChildRokdVal5 IS NULL)) OR (t1.ChildRokdVal6 <> t2.ChildRokdVal6 OR ( t1.ChildRokdVal6 IS NULL AND t2.ChildRokdVal6 IS NOT NULL) OR (t1.ChildRokdVal6 IS NOT NULL AND t2.ChildRokdVal6 IS NULL)) OR (t1.ChildRokdVal7 <> t2.ChildRokdVal7 OR ( t1.ChildRokdVal7 IS NULL AND t2.ChildRokdVal7 IS NOT NULL) OR (t1.ChildRokdVal7 IS NOT NULL AND t2.ChildRokdVal7 IS NULL)) OR (t1.ChildRokdVal8 <> t2.ChildRokdVal8 OR ( t1.ChildRokdVal8 IS NULL AND t2.ChildRokdVal8 IS NOT NULL) OR (t1.ChildRokdVal8 IS NOT NULL AND t2.ChildRokdVal8 IS NULL)) OR (t1.ChildRokdVal9 <> t2.ChildRokdVal9 OR ( t1.ChildRokdVal9 IS NULL AND t2.ChildRokdVal9 IS NOT NULL) OR (t1.ChildRokdVal9 IS NOT NULL AND t2.ChildRokdVal9 IS NULL)) OR (t1.ChildRokdVal10 <> t2.ChildRokdVal10 OR ( t1.ChildRokdVal10 IS NULL AND t2.ChildRokdVal10 IS NOT NULL) OR (t1.ChildRokdVal10 IS NOT NULL AND t2.ChildRokdVal10 IS NULL)) OR (t1.ChildValue <> t2.ChildValue OR ( t1.ChildValue IS NULL AND t2.ChildValue IS NOT NULL) OR (t1.ChildValue IS NOT NULL AND t2.ChildValue IS NULL)) OR (t1.WorkflowName <> t2.WorkflowName OR ( t1.WorkflowName IS NULL AND t2.WorkflowName IS NOT NULL) OR (t1.WorkflowName IS NOT NULL AND t2.WorkflowName IS NULL)) OR (t1.WorkflowInstanceId <> t2.WorkflowInstanceId OR ( t1.WorkflowInstanceId IS NULL AND t2.WorkflowInstanceId IS NOT NULL) OR (t1.WorkflowInstanceId IS NOT NULL AND t2.WorkflowInstanceId IS NULL)) OR (t1.StartDate <> t2.StartDate OR ( t1.StartDate IS NULL AND t2.StartDate IS NOT NULL) OR (t1.StartDate IS NOT NULL AND t2.StartDate IS NULL)) OR (t1.EndDate <> t2.EndDate OR ( t1.EndDate IS NULL AND t2.EndDate IS NOT NULL) OR (t1.EndDate IS NOT NULL AND t2.EndDate IS NULL)) OR (t1.ApprovedBy <> t2.ApprovedBy OR ( t1.ApprovedBy IS NULL AND t2.ApprovedBy IS NOT NULL) OR (t1.ApprovedBy IS NOT NULL AND t2.ApprovedBy IS NULL)) OR (t1.Comments <> t2.Comments OR ( t1.Comments IS NULL AND t2.Comments IS NOT NULL) OR (t1.Comments IS NOT NULL AND t2.Comments IS NULL)) OR (t1.Status <> t2.Status OR ( t1.Status IS NULL AND t2.Status IS NOT NULL) OR (t1.Status IS NOT NULL AND t2.Status IS NULL)) OR (t1.ApprovedDate <> t2.ApprovedDate OR ( t1.ApprovedDate IS NULL AND t2.ApprovedDate IS NOT NULL) OR (t1.ApprovedDate IS NOT NULL AND t2.ApprovedDate IS NULL)) OR (t1.Xref_uuid <> t2.Xref_uuid OR ( t1.Xref_uuid IS NULL AND t2.Xref_uuid IS NOT NULL) OR (t1.Xref_uuid IS NOT NULL AND t2.Xref_uuid IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_DATA_VAL', 'INSERT INTO NC_REL_CLM_OBJ_DATA_VAL ( SCENARIO_ID,CLM_RODV_ID,CLM_ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,CHILD_VALUE,WORKFLOW_NAME,WORKFLOW_INSTANCE_ID,START_DATE,END_DATE,APPROVED_BY,null,STATUS,APPROVED_DATE,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.CLM_RODV_ID,t1.CLM_ROM_ID,t1.PARENT_ROKD_VAL1,t1.PARENT_ROKD_VAL2,t1.PARENT_ROKD_VAL3,t1.PARENT_ROKD_VAL4,t1.PARENT_ROKD_VAL5,t1.PARENT_ROKD_VAL6,t1.PARENT_ROKD_VAL7,t1.PARENT_ROKD_VAL8,t1.PARENT_ROKD_VAL9,t1.PARENT_ROKD_VAL10,t1.CHILD_ROKD_VAL1,t1.CHILD_ROKD_VAL2,t1.CHILD_ROKD_VAL3,t1.CHILD_ROKD_VAL4,t1.CHILD_ROKD_VAL5,t1.CHILD_ROKD_VAL6,t1.CHILD_ROKD_VAL7,t1.CHILD_ROKD_VAL8,t1.CHILD_ROKD_VAL9,t1.CHILD_ROKD_VAL10,t1.CHILD_VALUE,t1.WORKFLOW_NAME,t1.WORKFLOW_INSTANCE_ID,t1.START_DATE,t1.END_DATE,t1.APPROVED_BY,t1.null,t1.STATUS,t1.APPROVED_DATE,t1.XREF_UUID,''ACTIVATE'',''VALID'' FROM IN_REL_CLM_OBJ_DATA_VAL t1, MST_REL_CLM_OBJ_DATA_VAL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRodvId = t2.ColumnRodvId AND t1.Xref_uuid = t2.Xref_uuid AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_MAP', 'INSERT INTO NC_REL_CLM_OBJ_MAP ( SCENARIO_ID,CLM_ROM_ID,CLM_REL_NAME,CLM_REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAPPING_ID,TARGET_TABLE,CROSS_REF_ROM_ID,SOURCE_SERVICE,SOURCE_DB,SOURCE_TABLE,TARGET_COLUMN,TARGET_COLUMN_PHY,ENABLE_PK_UPDT,COLUMNSEQ,SOURCE_COLUMN,SOURCE_COLUMN_PHY,ATTRB_DETAIL_ID,ATTRB_TYPE,EXT_COL_1,EXT_COL_2,PRIORITY_NO,PRIORITY_START_TM,PRIORITY_END_TM,IS_ALCR_ENABLED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,CLM_ROM_ID,CLM_REL_NAME,CLM_REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAPPING_ID,TARGET_TABLE,CROSS_REF_ROM_ID,SOURCE_SERVICE,SOURCE_DB,SOURCE_TABLE,TARGET_COLUMN,TARGET_COLUMN_PHY,ENABLE_PK_UPDT,COLUMNSEQ,SOURCE_COLUMN,SOURCE_COLUMN_PHY,ATTRB_DETAIL_ID,ATTRB_TYPE,EXT_COL_1,EXT_COL_2,PRIORITY_NO,PRIORITY_START_TM,PRIORITY_END_TM,IS_ALCR_ENABLED,''INSERT'',''VALID'' FROM IN_REL_CLM_OBJ_MAP t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_CLM_OBJ_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRomId = t2.ColumnRomId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_MAP', 'INSERT INTO NC_REL_CLM_OBJ_MAP ( SCENARIO_ID,CLM_ROM_ID,CLM_REL_NAME,CLM_REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAPPING_ID,TARGET_TABLE,CROSS_REF_ROM_ID,SOURCE_SERVICE,SOURCE_DB,SOURCE_TABLE,TARGET_COLUMN,TARGET_COLUMN_PHY,ENABLE_PK_UPDT,COLUMNSEQ,SOURCE_COLUMN,SOURCE_COLUMN_PHY,ATTRB_DETAIL_ID,ATTRB_TYPE,EXT_COL_1,EXT_COL_2,PRIORITY_NO,PRIORITY_START_TM,PRIORITY_END_TM,IS_ALCR_ENABLED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,CLM_ROM_ID,CLM_REL_NAME,CLM_REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAPPING_ID,TARGET_TABLE,CROSS_REF_ROM_ID,SOURCE_SERVICE,SOURCE_DB,SOURCE_TABLE,TARGET_COLUMN,TARGET_COLUMN_PHY,ENABLE_PK_UPDT,COLUMNSEQ,SOURCE_COLUMN,SOURCE_COLUMN_PHY,ATTRB_DETAIL_ID,ATTRB_TYPE,EXT_COL_1,EXT_COL_2,PRIORITY_NO,PRIORITY_START_TM,PRIORITY_END_TM,IS_ALCR_ENABLED,''DELETE'',''VALID'' FROM MST_REL_CLM_OBJ_MAP t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_CLM_OBJ_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRomId = t2.ColumnRomId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_CLM_OBJ_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRomId = t2.ColumnRomId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_MAP', 'INSERT INTO NC_REL_CLM_OBJ_MAP ( SCENARIO_ID,CLM_ROM_ID,CLM_REL_NAME,CLM_REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAPPING_ID,TARGET_TABLE,CROSS_REF_ROM_ID,SOURCE_SERVICE,SOURCE_DB,SOURCE_TABLE,TARGET_COLUMN,TARGET_COLUMN_PHY,ENABLE_PK_UPDT,COLUMNSEQ,SOURCE_COLUMN,SOURCE_COLUMN_PHY,ATTRB_DETAIL_ID,ATTRB_TYPE,EXT_COL_1,EXT_COL_2,PRIORITY_NO,PRIORITY_START_TM,PRIORITY_END_TM,IS_ALCR_ENABLED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.CLM_ROM_ID,t1.CLM_REL_NAME,t1.CLM_REL_TYPE,t1.PARENT_RO_ID,t1.CHILD_RO_ID,t1.PARENT_ROKT_ID,t1.CHILD_ROKT_ID,t1.TGT_TBL_RO_ID,t1.MAPPING_ID,t1.TARGET_TABLE,t1.CROSS_REF_ROM_ID,t1.SOURCE_SERVICE,t1.SOURCE_DB,t1.SOURCE_TABLE,t1.TARGET_COLUMN,t1.TARGET_COLUMN_PHY,t1.ENABLE_PK_UPDT,t1.COLUMNSEQ,t1.SOURCE_COLUMN,t1.SOURCE_COLUMN_PHY,t1.ATTRB_DETAIL_ID,t1.ATTRB_TYPE,t1.EXT_COL_1,t1.EXT_COL_2,t1.PRIORITY_NO,t1.PRIORITY_START_TM,t1.PRIORITY_END_TM,t1.IS_ALCR_ENABLED,''UPDATE'',''VALID'' FROM IN_REL_CLM_OBJ_MAP t1, MST_REL_CLM_OBJ_MAP t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRomId = t2.ColumnRomId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.ColumnRomId <> t2.ColumnRomId OR ( t1.ColumnRomId IS NULL AND t2.ColumnRomId IS NOT NULL) OR (t1.ColumnRomId IS NOT NULL AND t2.ColumnRomId IS NULL)) OR (t1.ColumnRelationName <> t2.ColumnRelationName OR ( t1.ColumnRelationName IS NULL AND t2.ColumnRelationName IS NOT NULL) OR (t1.ColumnRelationName IS NOT NULL AND t2.ColumnRelationName IS NULL)) OR (t1.ColumnRelationType <> t2.ColumnRelationType OR ( t1.ColumnRelationType IS NULL AND t2.ColumnRelationType IS NOT NULL) OR (t1.ColumnRelationType IS NOT NULL AND t2.ColumnRelationType IS NULL)) OR (t1.ParentROId <> t2.ParentROId OR ( t1.ParentROId IS NULL AND t2.ParentROId IS NOT NULL) OR (t1.ParentROId IS NOT NULL AND t2.ParentROId IS NULL)) OR (t1.ChildROId <> t2.ChildROId OR ( t1.ChildROId IS NULL AND t2.ChildROId IS NOT NULL) OR (t1.ChildROId IS NOT NULL AND t2.ChildROId IS NULL)) OR (t1.ParentROKTId <> t2.ParentROKTId OR ( t1.ParentROKTId IS NULL AND t2.ParentROKTId IS NOT NULL) OR (t1.ParentROKTId IS NOT NULL AND t2.ParentROKTId IS NULL)) OR (t1.CHILD_ROKT_ID <> t2.CHILD_ROKT_ID OR ( t1.CHILD_ROKT_ID IS NULL AND t2.CHILD_ROKT_ID IS NOT NULL) OR (t1.CHILD_ROKT_ID IS NOT NULL AND t2.CHILD_ROKT_ID IS NULL)) OR (t1.TargetTableROId <> t2.TargetTableROId OR ( t1.TargetTableROId IS NULL AND t2.TargetTableROId IS NOT NULL) OR (t1.TargetTableROId IS NOT NULL AND t2.TargetTableROId IS NULL)) OR (t1.MappingId <> t2.MappingId OR ( t1.MappingId IS NULL AND t2.MappingId IS NOT NULL) OR (t1.MappingId IS NOT NULL AND t2.MappingId IS NULL)) OR (t1.TargetTable <> t2.TargetTable OR ( t1.TargetTable IS NULL AND t2.TargetTable IS NOT NULL) OR (t1.TargetTable IS NOT NULL AND t2.TargetTable IS NULL)) OR (t1.CrossRefRomId <> t2.CrossRefRomId OR ( t1.CrossRefRomId IS NULL AND t2.CrossRefRomId IS NOT NULL) OR (t1.CrossRefRomId IS NOT NULL AND t2.CrossRefRomId IS NULL)) OR (t1.SourceService <> t2.SourceService OR ( t1.SourceService IS NULL AND t2.SourceService IS NOT NULL) OR (t1.SourceService IS NOT NULL AND t2.SourceService IS NULL)) OR (t1.SourceDB <> t2.SourceDB OR ( t1.SourceDB IS NULL AND t2.SourceDB IS NOT NULL) OR (t1.SourceDB IS NOT NULL AND t2.SourceDB IS NULL)) OR (t1.Source_Table <> t2.Source_Table OR ( t1.Source_Table IS NULL AND t2.Source_Table IS NOT NULL) OR (t1.Source_Table IS NOT NULL AND t2.Source_Table IS NULL)) OR (t1.TargetColumn <> t2.TargetColumn OR ( t1.TargetColumn IS NULL AND t2.TargetColumn IS NOT NULL) OR (t1.TargetColumn IS NOT NULL AND t2.TargetColumn IS NULL)) OR (t1.TargetColumnPhysical <> t2.TargetColumnPhysical OR ( t1.TargetColumnPhysical IS NULL AND t2.TargetColumnPhysical IS NOT NULL) OR (t1.TargetColumnPhysical IS NOT NULL AND t2.TargetColumnPhysical IS NULL)) OR (t1.EnablePkUpdt <> t2.EnablePkUpdt OR ( t1.EnablePkUpdt IS NULL AND t2.EnablePkUpdt IS NOT NULL) OR (t1.EnablePkUpdt IS NOT NULL AND t2.EnablePkUpdt IS NULL)) OR (t1.ColumnSequence <> t2.ColumnSequence OR ( t1.ColumnSequence IS NULL AND t2.ColumnSequence IS NOT NULL) OR (t1.ColumnSequence IS NOT NULL AND t2.ColumnSequence IS NULL)) OR (t1.SourceColumn <> t2.SourceColumn OR ( t1.SourceColumn IS NULL AND t2.SourceColumn IS NOT NULL) OR (t1.SourceColumn IS NOT NULL AND t2.SourceColumn IS NULL)) OR (t1.SourceColumnPhysical <> t2.SourceColumnPhysical OR ( t1.SourceColumnPhysical IS NULL AND t2.SourceColumnPhysical IS NOT NULL) OR (t1.SourceColumnPhysical IS NOT NULL AND t2.SourceColumnPhysical IS NULL)) OR (t1.AttributeDetailId <> t2.AttributeDetailId OR ( t1.AttributeDetailId IS NULL AND t2.AttributeDetailId IS NOT NULL) OR (t1.AttributeDetailId IS NOT NULL AND t2.AttributeDetailId IS NULL)) OR (t1.AttributeType <> t2.AttributeType OR ( t1.AttributeType IS NULL AND t2.AttributeType IS NOT NULL) OR (t1.AttributeType IS NOT NULL AND t2.AttributeType IS NULL)) OR (t1.ExtCol1 <> t2.ExtCol1 OR ( t1.ExtCol1 IS NULL AND t2.ExtCol1 IS NOT NULL) OR (t1.ExtCol1 IS NOT NULL AND t2.ExtCol1 IS NULL)) OR (t1.EctCol2 <> t2.EctCol2 OR ( t1.EctCol2 IS NULL AND t2.EctCol2 IS NOT NULL) OR (t1.EctCol2 IS NOT NULL AND t2.EctCol2 IS NULL)) OR (t1.PriorityNo <> t2.PriorityNo OR ( t1.PriorityNo IS NULL AND t2.PriorityNo IS NOT NULL) OR (t1.PriorityNo IS NOT NULL AND t2.PriorityNo IS NULL)) OR (t1.PriorityStartTime <> t2.PriorityStartTime OR ( t1.PriorityStartTime IS NULL AND t2.PriorityStartTime IS NOT NULL) OR (t1.PriorityStartTime IS NOT NULL AND t2.PriorityStartTime IS NULL)) OR (t1.PriorityEndTime <> t2.PriorityEndTime OR ( t1.PriorityEndTime IS NULL AND t2.PriorityEndTime IS NOT NULL) OR (t1.PriorityEndTime IS NOT NULL AND t2.PriorityEndTime IS NULL)) OR (t1.IsALCREnabled <> t2.IsALCREnabled OR ( t1.IsALCREnabled IS NULL AND t2.IsALCREnabled IS NOT NULL) OR (t1.IsALCREnabled IS NOT NULL AND t2.IsALCREnabled IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_CLM_OBJ_MAP', 'INSERT INTO NC_REL_CLM_OBJ_MAP ( SCENARIO_ID,CLM_ROM_ID,CLM_REL_NAME,CLM_REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAPPING_ID,TARGET_TABLE,CROSS_REF_ROM_ID,SOURCE_SERVICE,SOURCE_DB,SOURCE_TABLE,TARGET_COLUMN,TARGET_COLUMN_PHY,ENABLE_PK_UPDT,COLUMNSEQ,SOURCE_COLUMN,SOURCE_COLUMN_PHY,ATTRB_DETAIL_ID,ATTRB_TYPE,EXT_COL_1,EXT_COL_2,PRIORITY_NO,PRIORITY_START_TM,PRIORITY_END_TM,IS_ALCR_ENABLED,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.CLM_ROM_ID,t1.CLM_REL_NAME,t1.CLM_REL_TYPE,t1.PARENT_RO_ID,t1.CHILD_RO_ID,t1.PARENT_ROKT_ID,t1.CHILD_ROKT_ID,t1.TGT_TBL_RO_ID,t1.MAPPING_ID,t1.TARGET_TABLE,t1.CROSS_REF_ROM_ID,t1.SOURCE_SERVICE,t1.SOURCE_DB,t1.SOURCE_TABLE,t1.TARGET_COLUMN,t1.TARGET_COLUMN_PHY,t1.ENABLE_PK_UPDT,t1.COLUMNSEQ,t1.SOURCE_COLUMN,t1.SOURCE_COLUMN_PHY,t1.ATTRB_DETAIL_ID,t1.ATTRB_TYPE,t1.EXT_COL_1,t1.EXT_COL_2,t1.PRIORITY_NO,t1.PRIORITY_START_TM,t1.PRIORITY_END_TM,t1.IS_ALCR_ENABLED,''ACTIVATE'',''VALID'' FROM IN_REL_CLM_OBJ_MAP t1, MST_REL_CLM_OBJ_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ColumnRomId = t2.ColumnRomId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_DATA_VAL', 'INSERT INTO NC_REL_OBJ_DATA_VAL ( SCENARIO_ID,RODV_ID,ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,ROP_VAL1,ROP_VAL2,ROP_VAL3,ROP_VAL4,ROP_VAL5,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,APPROVED_BY,COMMENTS,STATUS,APPROVED_DATE,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,RODV_ID,ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,ROP_VAL1,ROP_VAL2,ROP_VAL3,ROP_VAL4,ROP_VAL5,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,APPROVED_BY,COMMENTS,STATUS,APPROVED_DATE,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,XREF_UUID,''INSERT'',''VALID'' FROM IN_REL_OBJ_DATA_VAL t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_OBJ_DATA_VAL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RovId = t2.RovId AND t1.Xref_uuid = t2.Xref_uuid )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_DATA_VAL', 'INSERT INTO NC_REL_OBJ_DATA_VAL ( SCENARIO_ID,RODV_ID,ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,ROP_VAL1,ROP_VAL2,ROP_VAL3,ROP_VAL4,ROP_VAL5,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,APPROVED_BY,COMMENTS,STATUS,APPROVED_DATE,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,RODV_ID,ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,ROP_VAL1,ROP_VAL2,ROP_VAL3,ROP_VAL4,ROP_VAL5,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,APPROVED_BY,COMMENTS,STATUS,APPROVED_DATE,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,XREF_UUID,''DELETE'',''VALID'' FROM MST_REL_OBJ_DATA_VAL t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_OBJ_DATA_VAL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RovId = t2.RovId AND t1.Xref_uuid = t2.Xref_uuid ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_OBJ_DATA_VAL t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RovId = t2.RovId AND t1.Xref_uuid = t2.Xref_uuid));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_DATA_VAL', 'INSERT INTO NC_REL_OBJ_DATA_VAL ( SCENARIO_ID,RODV_ID,ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,ROP_VAL1,ROP_VAL2,ROP_VAL3,ROP_VAL4,ROP_VAL5,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,APPROVED_BY,COMMENTS,STATUS,APPROVED_DATE,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.RODV_ID,t1.ROM_ID,t1.PARENT_ROKD_VAL1,t1.PARENT_ROKD_VAL2,t1.PARENT_ROKD_VAL3,t1.PARENT_ROKD_VAL4,t1.PARENT_ROKD_VAL5,t1.CHILD_ROKD_VAL1,t1.CHILD_ROKD_VAL2,t1.CHILD_ROKD_VAL3,t1.CHILD_ROKD_VAL4,t1.CHILD_ROKD_VAL5,t1.ROP_VAL1,t1.ROP_VAL2,t1.ROP_VAL3,t1.ROP_VAL4,t1.ROP_VAL5,t1.EFFECTIVE_START_DATE,t1.EFFECTIVE_END_DATE,t1.APPROVED_BY,t1.COMMENTS,t1.STATUS,t1.APPROVED_DATE,t1.PARENT_ROKD_VAL6,t1.PARENT_ROKD_VAL7,t1.PARENT_ROKD_VAL8,t1.PARENT_ROKD_VAL9,t1.PARENT_ROKD_VAL10,t1.CHILD_ROKD_VAL6,t1.CHILD_ROKD_VAL7,t1.CHILD_ROKD_VAL8,t1.CHILD_ROKD_VAL9,t1.CHILD_ROKD_VAL10,t1.XREF_UUID,''UPDATE'',''VALID'' FROM IN_REL_OBJ_DATA_VAL t1, MST_REL_OBJ_DATA_VAL t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RovId = t2.RovId AND t1.Xref_uuid = t2.Xref_uuid AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.RovId <> t2.RovId OR ( t1.RovId IS NULL AND t2.RovId IS NOT NULL) OR (t1.RovId IS NOT NULL AND t2.RovId IS NULL)) OR (t1.RomId <> t2.RomId OR ( t1.RomId IS NULL AND t2.RomId IS NOT NULL) OR (t1.RomId IS NOT NULL AND t2.RomId IS NULL)) OR (t1.ParentRokdVal1 <> t2.ParentRokdVal1 OR ( t1.ParentRokdVal1 IS NULL AND t2.ParentRokdVal1 IS NOT NULL) OR (t1.ParentRokdVal1 IS NOT NULL AND t2.ParentRokdVal1 IS NULL)) OR (t1.ParentRokdVal2 <> t2.ParentRokdVal2 OR ( t1.ParentRokdVal2 IS NULL AND t2.ParentRokdVal2 IS NOT NULL) OR (t1.ParentRokdVal2 IS NOT NULL AND t2.ParentRokdVal2 IS NULL)) OR (t1.ParentRokdVal3 <> t2.ParentRokdVal3 OR ( t1.ParentRokdVal3 IS NULL AND t2.ParentRokdVal3 IS NOT NULL) OR (t1.ParentRokdVal3 IS NOT NULL AND t2.ParentRokdVal3 IS NULL)) OR (t1.ParentRokdVal4 <> t2.ParentRokdVal4 OR ( t1.ParentRokdVal4 IS NULL AND t2.ParentRokdVal4 IS NOT NULL) OR (t1.ParentRokdVal4 IS NOT NULL AND t2.ParentRokdVal4 IS NULL)) OR (t1.ParentRokdVal5 <> t2.ParentRokdVal5 OR ( t1.ParentRokdVal5 IS NULL AND t2.ParentRokdVal5 IS NOT NULL) OR (t1.ParentRokdVal5 IS NOT NULL AND t2.ParentRokdVal5 IS NULL)) OR (t1.ChildRokdVal1 <> t2.ChildRokdVal1 OR ( t1.ChildRokdVal1 IS NULL AND t2.ChildRokdVal1 IS NOT NULL) OR (t1.ChildRokdVal1 IS NOT NULL AND t2.ChildRokdVal1 IS NULL)) OR (t1.ChildRokdVal2 <> t2.ChildRokdVal2 OR ( t1.ChildRokdVal2 IS NULL AND t2.ChildRokdVal2 IS NOT NULL) OR (t1.ChildRokdVal2 IS NOT NULL AND t2.ChildRokdVal2 IS NULL)) OR (t1.ChildRokdVal3 <> t2.ChildRokdVal3 OR ( t1.ChildRokdVal3 IS NULL AND t2.ChildRokdVal3 IS NOT NULL) OR (t1.ChildRokdVal3 IS NOT NULL AND t2.ChildRokdVal3 IS NULL)) OR (t1.ChildRokdVal4 <> t2.ChildRokdVal4 OR ( t1.ChildRokdVal4 IS NULL AND t2.ChildRokdVal4 IS NOT NULL) OR (t1.ChildRokdVal4 IS NOT NULL AND t2.ChildRokdVal4 IS NULL)) OR (t1.ChildRokdVal5 <> t2.ChildRokdVal5 OR ( t1.ChildRokdVal5 IS NULL AND t2.ChildRokdVal5 IS NOT NULL) OR (t1.ChildRokdVal5 IS NOT NULL AND t2.ChildRokdVal5 IS NULL)) OR (t1.RopValue1 <> t2.RopValue1 OR ( t1.RopValue1 IS NULL AND t2.RopValue1 IS NOT NULL) OR (t1.RopValue1 IS NOT NULL AND t2.RopValue1 IS NULL)) OR (t1.RopValue2 <> t2.RopValue2 OR ( t1.RopValue2 IS NULL AND t2.RopValue2 IS NOT NULL) OR (t1.RopValue2 IS NOT NULL AND t2.RopValue2 IS NULL)) OR (t1.RopValue3 <> t2.RopValue3 OR ( t1.RopValue3 IS NULL AND t2.RopValue3 IS NOT NULL) OR (t1.RopValue3 IS NOT NULL AND t2.RopValue3 IS NULL)) OR (t1.RopValue4 <> t2.RopValue4 OR ( t1.RopValue4 IS NULL AND t2.RopValue4 IS NOT NULL) OR (t1.RopValue4 IS NOT NULL AND t2.RopValue4 IS NULL)) OR (t1.RopValue5 <> t2.RopValue5 OR ( t1.RopValue5 IS NULL AND t2.RopValue5 IS NOT NULL) OR (t1.RopValue5 IS NOT NULL AND t2.RopValue5 IS NULL)) OR (t1.EffectiveStartDate <> t2.EffectiveStartDate OR ( t1.EffectiveStartDate IS NULL AND t2.EffectiveStartDate IS NOT NULL) OR (t1.EffectiveStartDate IS NOT NULL AND t2.EffectiveStartDate IS NULL)) OR (t1.EffectiveEndDate <> t2.EffectiveEndDate OR ( t1.EffectiveEndDate IS NULL AND t2.EffectiveEndDate IS NOT NULL) OR (t1.EffectiveEndDate IS NOT NULL AND t2.EffectiveEndDate IS NULL)) OR (t1.ApprovedBy <> t2.ApprovedBy OR ( t1.ApprovedBy IS NULL AND t2.ApprovedBy IS NOT NULL) OR (t1.ApprovedBy IS NOT NULL AND t2.ApprovedBy IS NULL)) OR (t1.Comments <> t2.Comments OR ( t1.Comments IS NULL AND t2.Comments IS NOT NULL) OR (t1.Comments IS NOT NULL AND t2.Comments IS NULL)) OR (t1.Status <> t2.Status OR ( t1.Status IS NULL AND t2.Status IS NOT NULL) OR (t1.Status IS NOT NULL AND t2.Status IS NULL)) OR (t1.ApprovedDate <> t2.ApprovedDate OR ( t1.ApprovedDate IS NULL AND t2.ApprovedDate IS NOT NULL) OR (t1.ApprovedDate IS NOT NULL AND t2.ApprovedDate IS NULL)) OR (t1.ParentRokdVal6 <> t2.ParentRokdVal6 OR ( t1.ParentRokdVal6 IS NULL AND t2.ParentRokdVal6 IS NOT NULL) OR (t1.ParentRokdVal6 IS NOT NULL AND t2.ParentRokdVal6 IS NULL)) OR (t1.ParentRokdVal7 <> t2.ParentRokdVal7 OR ( t1.ParentRokdVal7 IS NULL AND t2.ParentRokdVal7 IS NOT NULL) OR (t1.ParentRokdVal7 IS NOT NULL AND t2.ParentRokdVal7 IS NULL)) OR (t1.ParentRokdVal8 <> t2.ParentRokdVal8 OR ( t1.ParentRokdVal8 IS NULL AND t2.ParentRokdVal8 IS NOT NULL) OR (t1.ParentRokdVal8 IS NOT NULL AND t2.ParentRokdVal8 IS NULL)) OR (t1.ParentRokdVal9 <> t2.ParentRokdVal9 OR ( t1.ParentRokdVal9 IS NULL AND t2.ParentRokdVal9 IS NOT NULL) OR (t1.ParentRokdVal9 IS NOT NULL AND t2.ParentRokdVal9 IS NULL)) OR (t1.ParentRokdVal10 <> t2.ParentRokdVal10 OR ( t1.ParentRokdVal10 IS NULL AND t2.ParentRokdVal10 IS NOT NULL) OR (t1.ParentRokdVal10 IS NOT NULL AND t2.ParentRokdVal10 IS NULL)) OR (t1.ChildRokdVal6 <> t2.ChildRokdVal6 OR ( t1.ChildRokdVal6 IS NULL AND t2.ChildRokdVal6 IS NOT NULL) OR (t1.ChildRokdVal6 IS NOT NULL AND t2.ChildRokdVal6 IS NULL)) OR (t1.ChildRokdVal7 <> t2.ChildRokdVal7 OR ( t1.ChildRokdVal7 IS NULL AND t2.ChildRokdVal7 IS NOT NULL) OR (t1.ChildRokdVal7 IS NOT NULL AND t2.ChildRokdVal7 IS NULL)) OR (t1.ChildRokdVal8 <> t2.ChildRokdVal8 OR ( t1.ChildRokdVal8 IS NULL AND t2.ChildRokdVal8 IS NOT NULL) OR (t1.ChildRokdVal8 IS NOT NULL AND t2.ChildRokdVal8 IS NULL)) OR (t1.ChildRokdVal9 <> t2.ChildRokdVal9 OR ( t1.ChildRokdVal9 IS NULL AND t2.ChildRokdVal9 IS NOT NULL) OR (t1.ChildRokdVal9 IS NOT NULL AND t2.ChildRokdVal9 IS NULL)) OR (t1.ChildRokdVal10 <> t2.ChildRokdVal10 OR ( t1.ChildRokdVal10 IS NULL AND t2.ChildRokdVal10 IS NOT NULL) OR (t1.ChildRokdVal10 IS NOT NULL AND t2.ChildRokdVal10 IS NULL)) OR (t1.Xref_uuid <> t2.Xref_uuid OR ( t1.Xref_uuid IS NULL AND t2.Xref_uuid IS NOT NULL) OR (t1.Xref_uuid IS NOT NULL AND t2.Xref_uuid IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_DATA_VAL', 'INSERT INTO NC_REL_OBJ_DATA_VAL ( SCENARIO_ID,RODV_ID,ROM_ID,PARENT_ROKD_VAL1,PARENT_ROKD_VAL2,PARENT_ROKD_VAL3,PARENT_ROKD_VAL4,PARENT_ROKD_VAL5,CHILD_ROKD_VAL1,CHILD_ROKD_VAL2,CHILD_ROKD_VAL3,CHILD_ROKD_VAL4,CHILD_ROKD_VAL5,ROP_VAL1,ROP_VAL2,ROP_VAL3,ROP_VAL4,ROP_VAL5,EFFECTIVE_START_DATE,EFFECTIVE_END_DATE,APPROVED_BY,COMMENTS,STATUS,APPROVED_DATE,PARENT_ROKD_VAL6,PARENT_ROKD_VAL7,PARENT_ROKD_VAL8,PARENT_ROKD_VAL9,PARENT_ROKD_VAL10,CHILD_ROKD_VAL6,CHILD_ROKD_VAL7,CHILD_ROKD_VAL8,CHILD_ROKD_VAL9,CHILD_ROKD_VAL10,XREF_UUID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.RODV_ID,t1.ROM_ID,t1.PARENT_ROKD_VAL1,t1.PARENT_ROKD_VAL2,t1.PARENT_ROKD_VAL3,t1.PARENT_ROKD_VAL4,t1.PARENT_ROKD_VAL5,t1.CHILD_ROKD_VAL1,t1.CHILD_ROKD_VAL2,t1.CHILD_ROKD_VAL3,t1.CHILD_ROKD_VAL4,t1.CHILD_ROKD_VAL5,t1.ROP_VAL1,t1.ROP_VAL2,t1.ROP_VAL3,t1.ROP_VAL4,t1.ROP_VAL5,t1.EFFECTIVE_START_DATE,t1.EFFECTIVE_END_DATE,t1.APPROVED_BY,t1.COMMENTS,t1.STATUS,t1.APPROVED_DATE,t1.PARENT_ROKD_VAL6,t1.PARENT_ROKD_VAL7,t1.PARENT_ROKD_VAL8,t1.PARENT_ROKD_VAL9,t1.PARENT_ROKD_VAL10,t1.CHILD_ROKD_VAL6,t1.CHILD_ROKD_VAL7,t1.CHILD_ROKD_VAL8,t1.CHILD_ROKD_VAL9,t1.CHILD_ROKD_VAL10,t1.XREF_UUID,''ACTIVATE'',''VALID'' FROM IN_REL_OBJ_DATA_VAL t1, MST_REL_OBJ_DATA_VAL t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RovId = t2.RovId AND t1.Xref_uuid = t2.Xref_uuid AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RO_FILTER', 'INSERT INTO NC_RO_FILTER ( SCENARIO_ID,FILTER_ID,RO_ID,FILTER_NAME,FILTER_CONDITION_LOG,FILTER_CONDITION,DESCRIPTION,ROM_ID,IS_GLOBAL,MDM_APP_USER_ID_OR_ROLE_ID,IS_ACTIVE,VER_FILTER_CONDITION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,FILTER_ID,RO_ID,FILTER_NAME,FILTER_CONDITION_LOG,FILTER_CONDITION,DESCRIPTION,ROM_ID,IS_GLOBAL,MDM_APP_USER_ID_OR_ROLE_ID,IS_ACTIVE,VER_FILTER_CONDITION,''INSERT'',''VALID'' FROM IN_RO_FILTER t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_RO_FILTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.FilterId = t2.FilterId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RO_FILTER', 'INSERT INTO NC_RO_FILTER ( SCENARIO_ID,FILTER_ID,RO_ID,FILTER_NAME,FILTER_CONDITION_LOG,FILTER_CONDITION,DESCRIPTION,ROM_ID,IS_GLOBAL,MDM_APP_USER_ID_OR_ROLE_ID,IS_ACTIVE,VER_FILTER_CONDITION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,FILTER_ID,RO_ID,FILTER_NAME,FILTER_CONDITION_LOG,FILTER_CONDITION,DESCRIPTION,ROM_ID,IS_GLOBAL,MDM_APP_USER_ID_OR_ROLE_ID,IS_ACTIVE,VER_FILTER_CONDITION,''DELETE'',''VALID'' FROM MST_RO_FILTER t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_RO_FILTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.FilterId = t2.FilterId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_RO_FILTER t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.FilterId = t2.FilterId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RO_FILTER', 'INSERT INTO NC_RO_FILTER ( SCENARIO_ID,FILTER_ID,RO_ID,FILTER_NAME,FILTER_CONDITION_LOG,FILTER_CONDITION,DESCRIPTION,ROM_ID,IS_GLOBAL,MDM_APP_USER_ID_OR_ROLE_ID,IS_ACTIVE,VER_FILTER_CONDITION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.FILTER_ID,t1.RO_ID,t1.FILTER_NAME,t1.FILTER_CONDITION_LOG,t1.FILTER_CONDITION,t1.DESCRIPTION,t1.ROM_ID,t1.IS_GLOBAL,t1.MDM_APP_USER_ID_OR_ROLE_ID,t1.IS_ACTIVE,t1.VER_FILTER_CONDITION,''UPDATE'',''VALID'' FROM IN_RO_FILTER t1, MST_RO_FILTER t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.FilterId = t2.FilterId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.FilterId <> t2.FilterId OR ( t1.FilterId IS NULL AND t2.FilterId IS NOT NULL) OR (t1.FilterId IS NOT NULL AND t2.FilterId IS NULL)) OR (t1.RoId <> t2.RoId OR ( t1.RoId IS NULL AND t2.RoId IS NOT NULL) OR (t1.RoId IS NOT NULL AND t2.RoId IS NULL)) OR (t1.FilterName <> t2.FilterName OR ( t1.FilterName IS NULL AND t2.FilterName IS NOT NULL) OR (t1.FilterName IS NOT NULL AND t2.FilterName IS NULL)) OR (t1.LogicalFilterCondition <> t2.LogicalFilterCondition OR ( t1.LogicalFilterCondition IS NULL AND t2.LogicalFilterCondition IS NOT NULL) OR (t1.LogicalFilterCondition IS NOT NULL AND t2.LogicalFilterCondition IS NULL)) OR (t1.FilterCondition <> t2.FilterCondition OR ( t1.FilterCondition IS NULL AND t2.FilterCondition IS NOT NULL) OR (t1.FilterCondition IS NOT NULL AND t2.FilterCondition IS NULL)) OR (t1.FilterDescription <> t2.FilterDescription OR ( t1.FilterDescription IS NULL AND t2.FilterDescription IS NOT NULL) OR (t1.FilterDescription IS NOT NULL AND t2.FilterDescription IS NULL)) OR (t1.RomId <> t2.RomId OR ( t1.RomId IS NULL AND t2.RomId IS NOT NULL) OR (t1.RomId IS NOT NULL AND t2.RomId IS NULL)) OR (t1.IsGlobal <> t2.IsGlobal OR ( t1.IsGlobal IS NULL AND t2.IsGlobal IS NOT NULL) OR (t1.IsGlobal IS NOT NULL AND t2.IsGlobal IS NULL)) OR (t1.MdmUserRoleId <> t2.MdmUserRoleId OR ( t1.MdmUserRoleId IS NULL AND t2.MdmUserRoleId IS NOT NULL) OR (t1.MdmUserRoleId IS NOT NULL AND t2.MdmUserRoleId IS NULL)) OR (t1.IsActive <> t2.IsActive OR ( t1.IsActive IS NULL AND t2.IsActive IS NOT NULL) OR (t1.IsActive IS NOT NULL AND t2.IsActive IS NULL)) OR (t1.FilterConditionVersion <> t2.FilterConditionVersion OR ( t1.FilterConditionVersion IS NULL AND t2.FilterConditionVersion IS NOT NULL) OR (t1.FilterConditionVersion IS NOT NULL AND t2.FilterConditionVersion IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_RO_FILTER', 'INSERT INTO NC_RO_FILTER ( SCENARIO_ID,FILTER_ID,RO_ID,FILTER_NAME,FILTER_CONDITION_LOG,FILTER_CONDITION,DESCRIPTION,ROM_ID,IS_GLOBAL,MDM_APP_USER_ID_OR_ROLE_ID,IS_ACTIVE,VER_FILTER_CONDITION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.FILTER_ID,t1.RO_ID,t1.FILTER_NAME,t1.FILTER_CONDITION_LOG,t1.FILTER_CONDITION,t1.DESCRIPTION,t1.ROM_ID,t1.IS_GLOBAL,t1.MDM_APP_USER_ID_OR_ROLE_ID,t1.IS_ACTIVE,t1.VER_FILTER_CONDITION,''ACTIVATE'',''VALID'' FROM IN_RO_FILTER t1, MST_RO_FILTER t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.FilterId = t2.FilterId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_TYPE', 'INSERT INTO NC_REL_OBJ_KEY_TYPE ( SCENARIO_ID,ROKT_ID,RO_ID,KEY_TYPE,NAME,DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROKT_ID,RO_ID,KEY_TYPE,NAME,DESCRIPTION,''INSERT'',''VALID'' FROM IN_REL_OBJ_KEY_TYPE t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_OBJ_KEY_TYPE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoktId = t2.RoktId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_TYPE', 'INSERT INTO NC_REL_OBJ_KEY_TYPE ( SCENARIO_ID,ROKT_ID,RO_ID,KEY_TYPE,NAME,DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROKT_ID,RO_ID,KEY_TYPE,NAME,DESCRIPTION,''DELETE'',''VALID'' FROM MST_REL_OBJ_KEY_TYPE t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_OBJ_KEY_TYPE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoktId = t2.RoktId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_OBJ_KEY_TYPE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoktId = t2.RoktId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_TYPE', 'INSERT INTO NC_REL_OBJ_KEY_TYPE ( SCENARIO_ID,ROKT_ID,RO_ID,KEY_TYPE,NAME,DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROKT_ID,t1.RO_ID,t1.KEY_TYPE,t1.NAME,t1.DESCRIPTION,''UPDATE'',''VALID'' FROM IN_REL_OBJ_KEY_TYPE t1, MST_REL_OBJ_KEY_TYPE t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoktId = t2.RoktId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.RoktId <> t2.RoktId OR ( t1.RoktId IS NULL AND t2.RoktId IS NOT NULL) OR (t1.RoktId IS NOT NULL AND t2.RoktId IS NULL)) OR (t1.RoId <> t2.RoId OR ( t1.RoId IS NULL AND t2.RoId IS NOT NULL) OR (t1.RoId IS NOT NULL AND t2.RoId IS NULL)) OR (t1.KeyType <> t2.KeyType OR ( t1.KeyType IS NULL AND t2.KeyType IS NOT NULL) OR (t1.KeyType IS NOT NULL AND t2.KeyType IS NULL)) OR (t1.KeyName <> t2.KeyName OR ( t1.KeyName IS NULL AND t2.KeyName IS NOT NULL) OR (t1.KeyName IS NOT NULL AND t2.KeyName IS NULL)) OR (t1.KeyDescription <> t2.KeyDescription OR ( t1.KeyDescription IS NULL AND t2.KeyDescription IS NOT NULL) OR (t1.KeyDescription IS NOT NULL AND t2.KeyDescription IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_KEY_TYPE', 'INSERT INTO NC_REL_OBJ_KEY_TYPE ( SCENARIO_ID,ROKT_ID,RO_ID,KEY_TYPE,NAME,DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROKT_ID,t1.RO_ID,t1.KEY_TYPE,t1.NAME,t1.DESCRIPTION,''ACTIVATE'',''VALID'' FROM IN_REL_OBJ_KEY_TYPE t1, MST_REL_OBJ_KEY_TYPE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RoktId = t2.RoktId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_MAP', 'INSERT INTO NC_REL_OBJ_MAP ( SCENARIO_ID,ROM_ID,REL_NAME,REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAP_PARENT_COL1,MAP_PARENT_COL2,MAP_PARENT_COL3,MAP_PARENT_COL4,MAP_PARENT_COL5,MAP_CHILD_COL1,MAP_CHILD_COL2,MAP_CHILD_COL3,MAP_CHILD_COL4,MAP_CHILD_COL5,RM_VIEWER_QUERY,DESCRIPTION,MAP_PARENT_LOG_COL1,MAP_PARENT_LOG_COL2,MAP_PARENT_LOG_COL3,MAP_PARENT_LOG_COL4,MAP_PARENT_LOG_COL5,MAP_CHILD_LOG_COL1,MAP_CHILD_LOG_COL2,MAP_CHILD_LOG_COL3,MAP_CHILD_LOG_COL4,MAP_CHILD_LOG_COL5,ROM_ORIGIN,MAP_PARENT_COL6,MAP_PARENT_COL7,MAP_PARENT_COL8,MAP_PARENT_COL9,MAP_PARENT_COL10,MAP_CHILD_COL6,MAP_CHILD_COL7,MAP_CHILD_COL8,MAP_CHILD_COL9,MAP_CHILD_COL10,MAP_PARENT_LOG_COL6,MAP_PARENT_LOG_COL7,MAP_PARENT_LOG_COL8,MAP_PARENT_LOG_COL9,MAP_PARENT_LOG_COL10,MAP_CHILD_LOG_COL6,MAP_CHILD_LOG_COL7,MAP_CHILD_LOG_COL8,MAP_CHILD_LOG_COL9,MAP_CHILD_LOG_COL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROM_ID,REL_NAME,REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAP_PARENT_COL1,MAP_PARENT_COL2,MAP_PARENT_COL3,MAP_PARENT_COL4,MAP_PARENT_COL5,MAP_CHILD_COL1,MAP_CHILD_COL2,MAP_CHILD_COL3,MAP_CHILD_COL4,MAP_CHILD_COL5,RM_VIEWER_QUERY,DESCRIPTION,MAP_PARENT_LOG_COL1,MAP_PARENT_LOG_COL2,MAP_PARENT_LOG_COL3,MAP_PARENT_LOG_COL4,MAP_PARENT_LOG_COL5,MAP_CHILD_LOG_COL1,MAP_CHILD_LOG_COL2,MAP_CHILD_LOG_COL3,MAP_CHILD_LOG_COL4,MAP_CHILD_LOG_COL5,ROM_ORIGIN,MAP_PARENT_COL6,MAP_PARENT_COL7,MAP_PARENT_COL8,MAP_PARENT_COL9,MAP_PARENT_COL10,MAP_CHILD_COL6,MAP_CHILD_COL7,MAP_CHILD_COL8,MAP_CHILD_COL9,MAP_CHILD_COL10,MAP_PARENT_LOG_COL6,MAP_PARENT_LOG_COL7,MAP_PARENT_LOG_COL8,MAP_PARENT_LOG_COL9,MAP_PARENT_LOG_COL10,MAP_CHILD_LOG_COL6,MAP_CHILD_LOG_COL7,MAP_CHILD_LOG_COL8,MAP_CHILD_LOG_COL9,MAP_CHILD_LOG_COL10,''INSERT'',''VALID'' FROM IN_REL_OBJ_MAP t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_REL_OBJ_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_MAP', 'INSERT INTO NC_REL_OBJ_MAP ( SCENARIO_ID,ROM_ID,REL_NAME,REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAP_PARENT_COL1,MAP_PARENT_COL2,MAP_PARENT_COL3,MAP_PARENT_COL4,MAP_PARENT_COL5,MAP_CHILD_COL1,MAP_CHILD_COL2,MAP_CHILD_COL3,MAP_CHILD_COL4,MAP_CHILD_COL5,RM_VIEWER_QUERY,DESCRIPTION,MAP_PARENT_LOG_COL1,MAP_PARENT_LOG_COL2,MAP_PARENT_LOG_COL3,MAP_PARENT_LOG_COL4,MAP_PARENT_LOG_COL5,MAP_CHILD_LOG_COL1,MAP_CHILD_LOG_COL2,MAP_CHILD_LOG_COL3,MAP_CHILD_LOG_COL4,MAP_CHILD_LOG_COL5,ROM_ORIGIN,MAP_PARENT_COL6,MAP_PARENT_COL7,MAP_PARENT_COL8,MAP_PARENT_COL9,MAP_PARENT_COL10,MAP_CHILD_COL6,MAP_CHILD_COL7,MAP_CHILD_COL8,MAP_CHILD_COL9,MAP_CHILD_COL10,MAP_PARENT_LOG_COL6,MAP_PARENT_LOG_COL7,MAP_PARENT_LOG_COL8,MAP_PARENT_LOG_COL9,MAP_PARENT_LOG_COL10,MAP_CHILD_LOG_COL6,MAP_CHILD_LOG_COL7,MAP_CHILD_LOG_COL8,MAP_CHILD_LOG_COL9,MAP_CHILD_LOG_COL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,ROM_ID,REL_NAME,REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAP_PARENT_COL1,MAP_PARENT_COL2,MAP_PARENT_COL3,MAP_PARENT_COL4,MAP_PARENT_COL5,MAP_CHILD_COL1,MAP_CHILD_COL2,MAP_CHILD_COL3,MAP_CHILD_COL4,MAP_CHILD_COL5,RM_VIEWER_QUERY,DESCRIPTION,MAP_PARENT_LOG_COL1,MAP_PARENT_LOG_COL2,MAP_PARENT_LOG_COL3,MAP_PARENT_LOG_COL4,MAP_PARENT_LOG_COL5,MAP_CHILD_LOG_COL1,MAP_CHILD_LOG_COL2,MAP_CHILD_LOG_COL3,MAP_CHILD_LOG_COL4,MAP_CHILD_LOG_COL5,ROM_ORIGIN,MAP_PARENT_COL6,MAP_PARENT_COL7,MAP_PARENT_COL8,MAP_PARENT_COL9,MAP_PARENT_COL10,MAP_CHILD_COL6,MAP_CHILD_COL7,MAP_CHILD_COL8,MAP_CHILD_COL9,MAP_CHILD_COL10,MAP_PARENT_LOG_COL6,MAP_PARENT_LOG_COL7,MAP_PARENT_LOG_COL8,MAP_PARENT_LOG_COL9,MAP_PARENT_LOG_COL10,MAP_CHILD_LOG_COL6,MAP_CHILD_LOG_COL7,MAP_CHILD_LOG_COL8,MAP_CHILD_LOG_COL9,MAP_CHILD_LOG_COL10,''DELETE'',''VALID'' FROM MST_REL_OBJ_MAP t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_REL_OBJ_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_REL_OBJ_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_MAP', 'INSERT INTO NC_REL_OBJ_MAP ( SCENARIO_ID,ROM_ID,REL_NAME,REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAP_PARENT_COL1,MAP_PARENT_COL2,MAP_PARENT_COL3,MAP_PARENT_COL4,MAP_PARENT_COL5,MAP_CHILD_COL1,MAP_CHILD_COL2,MAP_CHILD_COL3,MAP_CHILD_COL4,MAP_CHILD_COL5,RM_VIEWER_QUERY,DESCRIPTION,MAP_PARENT_LOG_COL1,MAP_PARENT_LOG_COL2,MAP_PARENT_LOG_COL3,MAP_PARENT_LOG_COL4,MAP_PARENT_LOG_COL5,MAP_CHILD_LOG_COL1,MAP_CHILD_LOG_COL2,MAP_CHILD_LOG_COL3,MAP_CHILD_LOG_COL4,MAP_CHILD_LOG_COL5,ROM_ORIGIN,MAP_PARENT_COL6,MAP_PARENT_COL7,MAP_PARENT_COL8,MAP_PARENT_COL9,MAP_PARENT_COL10,MAP_CHILD_COL6,MAP_CHILD_COL7,MAP_CHILD_COL8,MAP_CHILD_COL9,MAP_CHILD_COL10,MAP_PARENT_LOG_COL6,MAP_PARENT_LOG_COL7,MAP_PARENT_LOG_COL8,MAP_PARENT_LOG_COL9,MAP_PARENT_LOG_COL10,MAP_CHILD_LOG_COL6,MAP_CHILD_LOG_COL7,MAP_CHILD_LOG_COL8,MAP_CHILD_LOG_COL9,MAP_CHILD_LOG_COL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROM_ID,t1.REL_NAME,t1.REL_TYPE,t1.PARENT_RO_ID,t1.CHILD_RO_ID,t1.PARENT_ROKT_ID,t1.CHILD_ROKT_ID,t1.TGT_TBL_RO_ID,t1.MAP_PARENT_COL1,t1.MAP_PARENT_COL2,t1.MAP_PARENT_COL3,t1.MAP_PARENT_COL4,t1.MAP_PARENT_COL5,t1.MAP_CHILD_COL1,t1.MAP_CHILD_COL2,t1.MAP_CHILD_COL3,t1.MAP_CHILD_COL4,t1.MAP_CHILD_COL5,t1.RM_VIEWER_QUERY,t1.DESCRIPTION,t1.MAP_PARENT_LOG_COL1,t1.MAP_PARENT_LOG_COL2,t1.MAP_PARENT_LOG_COL3,t1.MAP_PARENT_LOG_COL4,t1.MAP_PARENT_LOG_COL5,t1.MAP_CHILD_LOG_COL1,t1.MAP_CHILD_LOG_COL2,t1.MAP_CHILD_LOG_COL3,t1.MAP_CHILD_LOG_COL4,t1.MAP_CHILD_LOG_COL5,t1.ROM_ORIGIN,t1.MAP_PARENT_COL6,t1.MAP_PARENT_COL7,t1.MAP_PARENT_COL8,t1.MAP_PARENT_COL9,t1.MAP_PARENT_COL10,t1.MAP_CHILD_COL6,t1.MAP_CHILD_COL7,t1.MAP_CHILD_COL8,t1.MAP_CHILD_COL9,t1.MAP_CHILD_COL10,t1.MAP_PARENT_LOG_COL6,t1.MAP_PARENT_LOG_COL7,t1.MAP_PARENT_LOG_COL8,t1.MAP_PARENT_LOG_COL9,t1.MAP_PARENT_LOG_COL10,t1.MAP_CHILD_LOG_COL6,t1.MAP_CHILD_LOG_COL7,t1.MAP_CHILD_LOG_COL8,t1.MAP_CHILD_LOG_COL9,t1.MAP_CHILD_LOG_COL10,''UPDATE'',''VALID'' FROM IN_REL_OBJ_MAP t1, MST_REL_OBJ_MAP t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.RomId <> t2.RomId OR ( t1.RomId IS NULL AND t2.RomId IS NOT NULL) OR (t1.RomId IS NOT NULL AND t2.RomId IS NULL)) OR (t1.RelationName <> t2.RelationName OR ( t1.RelationName IS NULL AND t2.RelationName IS NOT NULL) OR (t1.RelationName IS NOT NULL AND t2.RelationName IS NULL)) OR (t1.RelationType <> t2.RelationType OR ( t1.RelationType IS NULL AND t2.RelationType IS NOT NULL) OR (t1.RelationType IS NOT NULL AND t2.RelationType IS NULL)) OR (t1.ParentROId <> t2.ParentROId OR ( t1.ParentROId IS NULL AND t2.ParentROId IS NOT NULL) OR (t1.ParentROId IS NOT NULL AND t2.ParentROId IS NULL)) OR (t1.ChildROId <> t2.ChildROId OR ( t1.ChildROId IS NULL AND t2.ChildROId IS NOT NULL) OR (t1.ChildROId IS NOT NULL AND t2.ChildROId IS NULL)) OR (t1.ParentROKTId <> t2.ParentROKTId OR ( t1.ParentROKTId IS NULL AND t2.ParentROKTId IS NOT NULL) OR (t1.ParentROKTId IS NOT NULL AND t2.ParentROKTId IS NULL)) OR (t1.ChildROKTId <> t2.ChildROKTId OR ( t1.ChildROKTId IS NULL AND t2.ChildROKTId IS NOT NULL) OR (t1.ChildROKTId IS NOT NULL AND t2.ChildROKTId IS NULL)) OR (t1.TargetTableRelObjId <> t2.TargetTableRelObjId OR ( t1.TargetTableRelObjId IS NULL AND t2.TargetTableRelObjId IS NOT NULL) OR (t1.TargetTableRelObjId IS NOT NULL AND t2.TargetTableRelObjId IS NULL)) OR (t1.MapParentColumn1 <> t2.MapParentColumn1 OR ( t1.MapParentColumn1 IS NULL AND t2.MapParentColumn1 IS NOT NULL) OR (t1.MapParentColumn1 IS NOT NULL AND t2.MapParentColumn1 IS NULL)) OR (t1.MapParentColumn2 <> t2.MapParentColumn2 OR ( t1.MapParentColumn2 IS NULL AND t2.MapParentColumn2 IS NOT NULL) OR (t1.MapParentColumn2 IS NOT NULL AND t2.MapParentColumn2 IS NULL)) OR (t1.MapParentColumn3 <> t2.MapParentColumn3 OR ( t1.MapParentColumn3 IS NULL AND t2.MapParentColumn3 IS NOT NULL) OR (t1.MapParentColumn3 IS NOT NULL AND t2.MapParentColumn3 IS NULL)) OR (t1.MapParentColumn4 <> t2.MapParentColumn4 OR ( t1.MapParentColumn4 IS NULL AND t2.MapParentColumn4 IS NOT NULL) OR (t1.MapParentColumn4 IS NOT NULL AND t2.MapParentColumn4 IS NULL)) OR (t1.MapParentColumn5 <> t2.MapParentColumn5 OR ( t1.MapParentColumn5 IS NULL AND t2.MapParentColumn5 IS NOT NULL) OR (t1.MapParentColumn5 IS NOT NULL AND t2.MapParentColumn5 IS NULL)) OR (t1.MapChildColumn1 <> t2.MapChildColumn1 OR ( t1.MapChildColumn1 IS NULL AND t2.MapChildColumn1 IS NOT NULL) OR (t1.MapChildColumn1 IS NOT NULL AND t2.MapChildColumn1 IS NULL)) OR (t1.MapChildColumn2 <> t2.MapChildColumn2 OR ( t1.MapChildColumn2 IS NULL AND t2.MapChildColumn2 IS NOT NULL) OR (t1.MapChildColumn2 IS NOT NULL AND t2.MapChildColumn2 IS NULL)) OR (t1.MapChildColumn3 <> t2.MapChildColumn3 OR ( t1.MapChildColumn3 IS NULL AND t2.MapChildColumn3 IS NOT NULL) OR (t1.MapChildColumn3 IS NOT NULL AND t2.MapChildColumn3 IS NULL)) OR (t1.MapChildColumn4 <> t2.MapChildColumn4 OR ( t1.MapChildColumn4 IS NULL AND t2.MapChildColumn4 IS NOT NULL) OR (t1.MapChildColumn4 IS NOT NULL AND t2.MapChildColumn4 IS NULL)) OR (t1.MapChildColumn5 <> t2.MapChildColumn5 OR ( t1.MapChildColumn5 IS NULL AND t2.MapChildColumn5 IS NOT NULL) OR (t1.MapChildColumn5 IS NOT NULL AND t2.MapChildColumn5 IS NULL)) OR (t1.ViewerQuery <> t2.ViewerQuery OR ( t1.ViewerQuery IS NULL AND t2.ViewerQuery IS NOT NULL) OR (t1.ViewerQuery IS NOT NULL AND t2.ViewerQuery IS NULL)) OR (t1.RelationDescription <> t2.RelationDescription OR ( t1.RelationDescription IS NULL AND t2.RelationDescription IS NOT NULL) OR (t1.RelationDescription IS NOT NULL AND t2.RelationDescription IS NULL)) OR (t1.MapParentLogColumn1 <> t2.MapParentLogColumn1 OR ( t1.MapParentLogColumn1 IS NULL AND t2.MapParentLogColumn1 IS NOT NULL) OR (t1.MapParentLogColumn1 IS NOT NULL AND t2.MapParentLogColumn1 IS NULL)) OR (t1.MapParentLogColumn2 <> t2.MapParentLogColumn2 OR ( t1.MapParentLogColumn2 IS NULL AND t2.MapParentLogColumn2 IS NOT NULL) OR (t1.MapParentLogColumn2 IS NOT NULL AND t2.MapParentLogColumn2 IS NULL)) OR (t1.MapParentLogColumn3 <> t2.MapParentLogColumn3 OR ( t1.MapParentLogColumn3 IS NULL AND t2.MapParentLogColumn3 IS NOT NULL) OR (t1.MapParentLogColumn3 IS NOT NULL AND t2.MapParentLogColumn3 IS NULL)) OR (t1.MapParentLogColumn4 <> t2.MapParentLogColumn4 OR ( t1.MapParentLogColumn4 IS NULL AND t2.MapParentLogColumn4 IS NOT NULL) OR (t1.MapParentLogColumn4 IS NOT NULL AND t2.MapParentLogColumn4 IS NULL)) OR (t1.MapParentLogColumn5 <> t2.MapParentLogColumn5 OR ( t1.MapParentLogColumn5 IS NULL AND t2.MapParentLogColumn5 IS NOT NULL) OR (t1.MapParentLogColumn5 IS NOT NULL AND t2.MapParentLogColumn5 IS NULL)) OR (t1.MapChildLogColumn1 <> t2.MapChildLogColumn1 OR ( t1.MapChildLogColumn1 IS NULL AND t2.MapChildLogColumn1 IS NOT NULL) OR (t1.MapChildLogColumn1 IS NOT NULL AND t2.MapChildLogColumn1 IS NULL)) OR (t1.MapChildLogColumn2 <> t2.MapChildLogColumn2 OR ( t1.MapChildLogColumn2 IS NULL AND t2.MapChildLogColumn2 IS NOT NULL) OR (t1.MapChildLogColumn2 IS NOT NULL AND t2.MapChildLogColumn2 IS NULL)) OR (t1.MapChildLogColumn3 <> t2.MapChildLogColumn3 OR ( t1.MapChildLogColumn3 IS NULL AND t2.MapChildLogColumn3 IS NOT NULL) OR (t1.MapChildLogColumn3 IS NOT NULL AND t2.MapChildLogColumn3 IS NULL)) OR (t1.MapChildLogColumn4 <> t2.MapChildLogColumn4 OR ( t1.MapChildLogColumn4 IS NULL AND t2.MapChildLogColumn4 IS NOT NULL) OR (t1.MapChildLogColumn4 IS NOT NULL AND t2.MapChildLogColumn4 IS NULL)) OR (t1.MapChildLogColumn5 <> t2.MapChildLogColumn5 OR ( t1.MapChildLogColumn5 IS NULL AND t2.MapChildLogColumn5 IS NOT NULL) OR (t1.MapChildLogColumn5 IS NOT NULL AND t2.MapChildLogColumn5 IS NULL)) OR (t1.RomOrigin <> t2.RomOrigin OR ( t1.RomOrigin IS NULL AND t2.RomOrigin IS NOT NULL) OR (t1.RomOrigin IS NOT NULL AND t2.RomOrigin IS NULL)) OR (t1.MapParentColumn6 <> t2.MapParentColumn6 OR ( t1.MapParentColumn6 IS NULL AND t2.MapParentColumn6 IS NOT NULL) OR (t1.MapParentColumn6 IS NOT NULL AND t2.MapParentColumn6 IS NULL)) OR (t1.MapParentColumn7 <> t2.MapParentColumn7 OR ( t1.MapParentColumn7 IS NULL AND t2.MapParentColumn7 IS NOT NULL) OR (t1.MapParentColumn7 IS NOT NULL AND t2.MapParentColumn7 IS NULL)) OR (t1.MapParentColumn8 <> t2.MapParentColumn8 OR ( t1.MapParentColumn8 IS NULL AND t2.MapParentColumn8 IS NOT NULL) OR (t1.MapParentColumn8 IS NOT NULL AND t2.MapParentColumn8 IS NULL)) OR (t1.MapParentColumn9 <> t2.MapParentColumn9 OR ( t1.MapParentColumn9 IS NULL AND t2.MapParentColumn9 IS NOT NULL) OR (t1.MapParentColumn9 IS NOT NULL AND t2.MapParentColumn9 IS NULL)) OR (t1.MapParentColumn10 <> t2.MapParentColumn10 OR ( t1.MapParentColumn10 IS NULL AND t2.MapParentColumn10 IS NOT NULL) OR (t1.MapParentColumn10 IS NOT NULL AND t2.MapParentColumn10 IS NULL)) OR (t1.MapChildColumn6 <> t2.MapChildColumn6 OR ( t1.MapChildColumn6 IS NULL AND t2.MapChildColumn6 IS NOT NULL) OR (t1.MapChildColumn6 IS NOT NULL AND t2.MapChildColumn6 IS NULL)) OR (t1.MapChildColumn7 <> t2.MapChildColumn7 OR ( t1.MapChildColumn7 IS NULL AND t2.MapChildColumn7 IS NOT NULL) OR (t1.MapChildColumn7 IS NOT NULL AND t2.MapChildColumn7 IS NULL)) OR (t1.MapChildColumn8 <> t2.MapChildColumn8 OR ( t1.MapChildColumn8 IS NULL AND t2.MapChildColumn8 IS NOT NULL) OR (t1.MapChildColumn8 IS NOT NULL AND t2.MapChildColumn8 IS NULL)) OR (t1.MapChildColumn9 <> t2.MapChildColumn9 OR ( t1.MapChildColumn9 IS NULL AND t2.MapChildColumn9 IS NOT NULL) OR (t1.MapChildColumn9 IS NOT NULL AND t2.MapChildColumn9 IS NULL)) OR (t1.MapChildColumn10 <> t2.MapChildColumn10 OR ( t1.MapChildColumn10 IS NULL AND t2.MapChildColumn10 IS NOT NULL) OR (t1.MapChildColumn10 IS NOT NULL AND t2.MapChildColumn10 IS NULL)) OR (t1.MapParentLogColumn6 <> t2.MapParentLogColumn6 OR ( t1.MapParentLogColumn6 IS NULL AND t2.MapParentLogColumn6 IS NOT NULL) OR (t1.MapParentLogColumn6 IS NOT NULL AND t2.MapParentLogColumn6 IS NULL)) OR (t1.MapParentLogColumn7 <> t2.MapParentLogColumn7 OR ( t1.MapParentLogColumn7 IS NULL AND t2.MapParentLogColumn7 IS NOT NULL) OR (t1.MapParentLogColumn7 IS NOT NULL AND t2.MapParentLogColumn7 IS NULL)) OR (t1.MapParentLogColumn8 <> t2.MapParentLogColumn8 OR ( t1.MapParentLogColumn8 IS NULL AND t2.MapParentLogColumn8 IS NOT NULL) OR (t1.MapParentLogColumn8 IS NOT NULL AND t2.MapParentLogColumn8 IS NULL)) OR (t1.MapParentLogColumn9 <> t2.MapParentLogColumn9 OR ( t1.MapParentLogColumn9 IS NULL AND t2.MapParentLogColumn9 IS NOT NULL) OR (t1.MapParentLogColumn9 IS NOT NULL AND t2.MapParentLogColumn9 IS NULL)) OR (t1.MapParentLogColumn10 <> t2.MapParentLogColumn10 OR ( t1.MapParentLogColumn10 IS NULL AND t2.MapParentLogColumn10 IS NOT NULL) OR (t1.MapParentLogColumn10 IS NOT NULL AND t2.MapParentLogColumn10 IS NULL)) OR (t1.MapChildLogColumn6 <> t2.MapChildLogColumn6 OR ( t1.MapChildLogColumn6 IS NULL AND t2.MapChildLogColumn6 IS NOT NULL) OR (t1.MapChildLogColumn6 IS NOT NULL AND t2.MapChildLogColumn6 IS NULL)) OR (t1.MapChildLogColumn7 <> t2.MapChildLogColumn7 OR ( t1.MapChildLogColumn7 IS NULL AND t2.MapChildLogColumn7 IS NOT NULL) OR (t1.MapChildLogColumn7 IS NOT NULL AND t2.MapChildLogColumn7 IS NULL)) OR (t1.MapChildLogColumn8 <> t2.MapChildLogColumn8 OR ( t1.MapChildLogColumn8 IS NULL AND t2.MapChildLogColumn8 IS NOT NULL) OR (t1.MapChildLogColumn8 IS NOT NULL AND t2.MapChildLogColumn8 IS NULL)) OR (t1.MapChildLogColumn9 <> t2.MapChildLogColumn9 OR ( t1.MapChildLogColumn9 IS NULL AND t2.MapChildLogColumn9 IS NOT NULL) OR (t1.MapChildLogColumn9 IS NOT NULL AND t2.MapChildLogColumn9 IS NULL)) OR (t1.MapChildLogColumn10 <> t2.MapChildLogColumn10 OR ( t1.MapChildLogColumn10 IS NULL AND t2.MapChildLogColumn10 IS NOT NULL) OR (t1.MapChildLogColumn10 IS NOT NULL AND t2.MapChildLogColumn10 IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_REL_OBJ_MAP', 'INSERT INTO NC_REL_OBJ_MAP ( SCENARIO_ID,ROM_ID,REL_NAME,REL_TYPE,PARENT_RO_ID,CHILD_RO_ID,PARENT_ROKT_ID,CHILD_ROKT_ID,TGT_TBL_RO_ID,MAP_PARENT_COL1,MAP_PARENT_COL2,MAP_PARENT_COL3,MAP_PARENT_COL4,MAP_PARENT_COL5,MAP_CHILD_COL1,MAP_CHILD_COL2,MAP_CHILD_COL3,MAP_CHILD_COL4,MAP_CHILD_COL5,RM_VIEWER_QUERY,DESCRIPTION,MAP_PARENT_LOG_COL1,MAP_PARENT_LOG_COL2,MAP_PARENT_LOG_COL3,MAP_PARENT_LOG_COL4,MAP_PARENT_LOG_COL5,MAP_CHILD_LOG_COL1,MAP_CHILD_LOG_COL2,MAP_CHILD_LOG_COL3,MAP_CHILD_LOG_COL4,MAP_CHILD_LOG_COL5,ROM_ORIGIN,MAP_PARENT_COL6,MAP_PARENT_COL7,MAP_PARENT_COL8,MAP_PARENT_COL9,MAP_PARENT_COL10,MAP_CHILD_COL6,MAP_CHILD_COL7,MAP_CHILD_COL8,MAP_CHILD_COL9,MAP_CHILD_COL10,MAP_PARENT_LOG_COL6,MAP_PARENT_LOG_COL7,MAP_PARENT_LOG_COL8,MAP_PARENT_LOG_COL9,MAP_PARENT_LOG_COL10,MAP_CHILD_LOG_COL6,MAP_CHILD_LOG_COL7,MAP_CHILD_LOG_COL8,MAP_CHILD_LOG_COL9,MAP_CHILD_LOG_COL10,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.ROM_ID,t1.REL_NAME,t1.REL_TYPE,t1.PARENT_RO_ID,t1.CHILD_RO_ID,t1.PARENT_ROKT_ID,t1.CHILD_ROKT_ID,t1.TGT_TBL_RO_ID,t1.MAP_PARENT_COL1,t1.MAP_PARENT_COL2,t1.MAP_PARENT_COL3,t1.MAP_PARENT_COL4,t1.MAP_PARENT_COL5,t1.MAP_CHILD_COL1,t1.MAP_CHILD_COL2,t1.MAP_CHILD_COL3,t1.MAP_CHILD_COL4,t1.MAP_CHILD_COL5,t1.RM_VIEWER_QUERY,t1.DESCRIPTION,t1.MAP_PARENT_LOG_COL1,t1.MAP_PARENT_LOG_COL2,t1.MAP_PARENT_LOG_COL3,t1.MAP_PARENT_LOG_COL4,t1.MAP_PARENT_LOG_COL5,t1.MAP_CHILD_LOG_COL1,t1.MAP_CHILD_LOG_COL2,t1.MAP_CHILD_LOG_COL3,t1.MAP_CHILD_LOG_COL4,t1.MAP_CHILD_LOG_COL5,t1.ROM_ORIGIN,t1.MAP_PARENT_COL6,t1.MAP_PARENT_COL7,t1.MAP_PARENT_COL8,t1.MAP_PARENT_COL9,t1.MAP_PARENT_COL10,t1.MAP_CHILD_COL6,t1.MAP_CHILD_COL7,t1.MAP_CHILD_COL8,t1.MAP_CHILD_COL9,t1.MAP_CHILD_COL10,t1.MAP_PARENT_LOG_COL6,t1.MAP_PARENT_LOG_COL7,t1.MAP_PARENT_LOG_COL8,t1.MAP_PARENT_LOG_COL9,t1.MAP_PARENT_LOG_COL10,t1.MAP_CHILD_LOG_COL6,t1.MAP_CHILD_LOG_COL7,t1.MAP_CHILD_LOG_COL8,t1.MAP_CHILD_LOG_COL9,t1.MAP_CHILD_LOG_COL10,''ACTIVATE'',''VALID'' FROM IN_REL_OBJ_MAP t1, MST_REL_OBJ_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.RomId = t2.RomId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_STANDARD_MAP', 'INSERT INTO NC_STANDARD_MAP ( SCENARIO_ID,Source_Code,Ctl_Id,Domain_Id,Code_Set_Id,EDW_Code,Description,Start_Date,End_Date,Record_Deleted_Flag,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,Source_Code_Value_Id,OTHER_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Source_Code,Ctl_Id,Domain_Id,Code_Set_Id,EDW_Code,Description,Start_Date,End_Date,Record_Deleted_Flag,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,Source_Code_Value_Id,OTHER_DESCRIPTION,''INSERT'',''VALID'' FROM IN_STANDARD_MAP t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_STANDARD_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Ctl_Id = t2.Ctl_Id AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Source_Code = t2.Source_Code AND t1.EDW_Code = t2.EDW_Code )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_STANDARD_MAP', 'INSERT INTO NC_STANDARD_MAP ( SCENARIO_ID,Source_Code,Ctl_Id,Domain_Id,Code_Set_Id,EDW_Code,Description,Start_Date,End_Date,Record_Deleted_Flag,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,Source_Code_Value_Id,OTHER_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Source_Code,Ctl_Id,Domain_Id,Code_Set_Id,EDW_Code,Description,Start_Date,End_Date,Record_Deleted_Flag,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,Source_Code_Value_Id,OTHER_DESCRIPTION,''DELETE'',''VALID'' FROM MST_STANDARD_MAP t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_STANDARD_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Ctl_Id = t2.Ctl_Id AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Source_Code = t2.Source_Code AND t1.EDW_Code = t2.EDW_Code ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_STANDARD_MAP t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Ctl_Id = t2.Ctl_Id AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Source_Code = t2.Source_Code AND t1.EDW_Code = t2.EDW_Code));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_STANDARD_MAP', 'INSERT INTO NC_STANDARD_MAP ( SCENARIO_ID,Source_Code,Ctl_Id,Domain_Id,Code_Set_Id,EDW_Code,Description,Start_Date,End_Date,Record_Deleted_Flag,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,Source_Code_Value_Id,OTHER_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Source_Code,t1.Ctl_Id,t1.Domain_Id,t1.Code_Set_Id,t1.EDW_Code,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,t1.Source_Code_Value_Id,t1.OTHER_DESCRIPTION,''UPDATE'',''VALID'' FROM IN_STANDARD_MAP t1, MST_STANDARD_MAP t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Ctl_Id = t2.Ctl_Id AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Source_Code = t2.Source_Code AND t1.EDW_Code = t2.EDW_Code AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Source_Code <> t2.Source_Code OR ( t1.Source_Code IS NULL AND t2.Source_Code IS NOT NULL) OR (t1.Source_Code IS NOT NULL AND t2.Source_Code IS NULL)) OR (t1.Ctl_Id <> t2.Ctl_Id OR ( t1.Ctl_Id IS NULL AND t2.Ctl_Id IS NOT NULL) OR (t1.Ctl_Id IS NOT NULL AND t2.Ctl_Id IS NULL)) OR (t1.Domain_Id <> t2.Domain_Id OR ( t1.Domain_Id IS NULL AND t2.Domain_Id IS NOT NULL) OR (t1.Domain_Id IS NOT NULL AND t2.Domain_Id IS NULL)) OR (t1.Code_Set_Id <> t2.Code_Set_Id OR ( t1.Code_Set_Id IS NULL AND t2.Code_Set_Id IS NOT NULL) OR (t1.Code_Set_Id IS NOT NULL AND t2.Code_Set_Id IS NULL)) OR (t1.EDW_Code <> t2.EDW_Code OR ( t1.EDW_Code IS NULL AND t2.EDW_Code IS NOT NULL) OR (t1.EDW_Code IS NOT NULL AND t2.EDW_Code IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Record_Deleted_Flag <> t2.Record_Deleted_Flag OR ( t1.Record_Deleted_Flag IS NULL AND t2.Record_Deleted_Flag IS NOT NULL) OR (t1.Record_Deleted_Flag IS NOT NULL AND t2.Record_Deleted_Flag IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Update_Process_Name <> t2.Update_Process_Name OR ( t1.Update_Process_Name IS NULL AND t2.Update_Process_Name IS NOT NULL) OR (t1.Update_Process_Name IS NOT NULL AND t2.Update_Process_Name IS NULL)) OR (t1.Update_Process_Id <> t2.Update_Process_Id OR ( t1.Update_Process_Id IS NULL AND t2.Update_Process_Id IS NOT NULL) OR (t1.Update_Process_Id IS NOT NULL AND t2.Update_Process_Id IS NULL)) OR (t1.Source_Code_Value_Id <> t2.Source_Code_Value_Id OR ( t1.Source_Code_Value_Id IS NULL AND t2.Source_Code_Value_Id IS NOT NULL) OR (t1.Source_Code_Value_Id IS NOT NULL AND t2.Source_Code_Value_Id IS NULL)) OR (t1.Other_Description <> t2.Other_Description OR ( t1.Other_Description IS NULL AND t2.Other_Description IS NOT NULL) OR (t1.Other_Description IS NOT NULL AND t2.Other_Description IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_STANDARD_MAP', 'INSERT INTO NC_STANDARD_MAP ( SCENARIO_ID,Source_Code,Ctl_Id,Domain_Id,Code_Set_Id,EDW_Code,Description,Start_Date,End_Date,Record_Deleted_Flag,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,Source_Code_Value_Id,OTHER_DESCRIPTION,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Source_Code,t1.Ctl_Id,t1.Domain_Id,t1.Code_Set_Id,t1.EDW_Code,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,t1.Source_Code_Value_Id,t1.OTHER_DESCRIPTION,''ACTIVATE'',''VALID'' FROM IN_STANDARD_MAP t1, MST_STANDARD_MAP t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Ctl_Id = t2.Ctl_Id AND t1.Code_Set_Id = t2.Code_Set_Id AND t1.Source_Code = t2.Source_Code AND t1.EDW_Code = t2.EDW_Code AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_SYS_PROPS', 'INSERT INTO NC_SYS_PROPS ( SCENARIO_ID,PROPNAME,PROPVALUE,DATA_TYPE,DESCRIPTION,PROPTYPE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROPNAME,PROPVALUE,DATA_TYPE,DESCRIPTION,PROPTYPE,ID,''INSERT'',''VALID'' FROM IN_SYS_PROPS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_SYS_PROPS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_SYS_PROPS', 'INSERT INTO NC_SYS_PROPS ( SCENARIO_ID,PROPNAME,PROPVALUE,DATA_TYPE,DESCRIPTION,PROPTYPE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROPNAME,PROPVALUE,DATA_TYPE,DESCRIPTION,PROPTYPE,ID,''DELETE'',''VALID'' FROM MST_SYS_PROPS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_SYS_PROPS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_SYS_PROPS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_SYS_PROPS', 'INSERT INTO NC_SYS_PROPS ( SCENARIO_ID,PROPNAME,PROPVALUE,DATA_TYPE,DESCRIPTION,PROPTYPE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROPNAME,t1.PROPVALUE,t1.DATA_TYPE,t1.DESCRIPTION,t1.PROPTYPE,t1.ID,''UPDATE'',''VALID'' FROM IN_SYS_PROPS t1, MST_SYS_PROPS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.propertyName <> t2.propertyName OR ( t1.propertyName IS NULL AND t2.propertyName IS NOT NULL) OR (t1.propertyName IS NOT NULL AND t2.propertyName IS NULL)) OR (t1.propertyValue <> t2.propertyValue OR ( t1.propertyValue IS NULL AND t2.propertyValue IS NOT NULL) OR (t1.propertyValue IS NOT NULL AND t2.propertyValue IS NULL)) OR (t1.dataType <> t2.dataType OR ( t1.dataType IS NULL AND t2.dataType IS NOT NULL) OR (t1.dataType IS NOT NULL AND t2.dataType IS NULL)) OR (t1.description <> t2.description OR ( t1.description IS NULL AND t2.description IS NOT NULL) OR (t1.description IS NOT NULL AND t2.description IS NULL)) OR (t1.type <> t2.type OR ( t1.type IS NULL AND t2.type IS NOT NULL) OR (t1.type IS NOT NULL AND t2.type IS NULL)) OR (t1.ID <> t2.ID OR ( t1.ID IS NULL AND t2.ID IS NOT NULL) OR (t1.ID IS NOT NULL AND t2.ID IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_SYS_PROPS', 'INSERT INTO NC_SYS_PROPS ( SCENARIO_ID,PROPNAME,PROPVALUE,DATA_TYPE,DESCRIPTION,PROPTYPE,ID,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROPNAME,t1.PROPVALUE,t1.DATA_TYPE,t1.DESCRIPTION,t1.PROPTYPE,t1.ID,''ACTIVATE'',''VALID'' FROM IN_SYS_PROPS t1, MST_SYS_PROPS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.ID = t2.ID AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VALID_LANGUAGE', 'INSERT INTO NC_VALID_LANGUAGE ( SCENARIO_ID,Language_Id,LANGUAGE_NAME,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Language_Id,LANGUAGE_NAME,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,''INSERT'',''VALID'' FROM IN_VALID_LANGUAGE t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_VALID_LANGUAGE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Language_Id = t2.Language_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VALID_LANGUAGE', 'INSERT INTO NC_VALID_LANGUAGE ( SCENARIO_ID,Language_Id,LANGUAGE_NAME,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Language_Id,LANGUAGE_NAME,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,''DELETE'',''VALID'' FROM MST_VALID_LANGUAGE t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_VALID_LANGUAGE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Language_Id = t2.Language_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_VALID_LANGUAGE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Language_Id = t2.Language_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VALID_LANGUAGE', 'INSERT INTO NC_VALID_LANGUAGE ( SCENARIO_ID,Language_Id,LANGUAGE_NAME,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Language_Id,t1.LANGUAGE_NAME,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,''UPDATE'',''VALID'' FROM IN_VALID_LANGUAGE t1, MST_VALID_LANGUAGE t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Language_Id = t2.Language_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Language_Id <> t2.Language_Id OR ( t1.Language_Id IS NULL AND t2.Language_Id IS NOT NULL) OR (t1.Language_Id IS NOT NULL AND t2.Language_Id IS NULL)) OR (t1.Language_Name <> t2.Language_Name OR ( t1.Language_Name IS NULL AND t2.Language_Name IS NOT NULL) OR (t1.Language_Name IS NOT NULL AND t2.Language_Name IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Start_Date <> t2.Start_Date OR ( t1.Start_Date IS NULL AND t2.Start_Date IS NOT NULL) OR (t1.Start_Date IS NOT NULL AND t2.Start_Date IS NULL)) OR (t1.End_Date <> t2.End_Date OR ( t1.End_Date IS NULL AND t2.End_Date IS NOT NULL) OR (t1.End_Date IS NOT NULL AND t2.End_Date IS NULL)) OR (t1.Record_Deleted_Flag <> t2.Record_Deleted_Flag OR ( t1.Record_Deleted_Flag IS NULL AND t2.Record_Deleted_Flag IS NOT NULL) OR (t1.Record_Deleted_Flag IS NOT NULL AND t2.Record_Deleted_Flag IS NULL)) OR (t1.Ctl_Id <> t2.Ctl_Id OR ( t1.Ctl_Id IS NULL AND t2.Ctl_Id IS NOT NULL) OR (t1.Ctl_Id IS NOT NULL AND t2.Ctl_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Update_Process_Name <> t2.Update_Process_Name OR ( t1.Update_Process_Name IS NULL AND t2.Update_Process_Name IS NOT NULL) OR (t1.Update_Process_Name IS NOT NULL AND t2.Update_Process_Name IS NULL)) OR (t1.Update_Process_Id <> t2.Update_Process_Id OR ( t1.Update_Process_Id IS NULL AND t2.Update_Process_Id IS NOT NULL) OR (t1.Update_Process_Id IS NOT NULL AND t2.Update_Process_Id IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VALID_LANGUAGE', 'INSERT INTO NC_VALID_LANGUAGE ( SCENARIO_ID,Language_Id,LANGUAGE_NAME,Description,Start_Date,End_Date,Record_Deleted_Flag,Ctl_Id,Process_Name,Process_Id,Update_Process_Name,Update_Process_Id,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Language_Id,t1.LANGUAGE_NAME,t1.Description,t1.Start_Date,t1.End_Date,t1.Record_Deleted_Flag,t1.Ctl_Id,t1.Process_Name,t1.Process_Id,t1.Update_Process_Name,t1.Update_Process_Id,''ACTIVATE'',''VALID'' FROM IN_VALID_LANGUAGE t1, MST_VALID_LANGUAGE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Language_Id = t2.Language_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_DETAILS', 'INSERT INTO NC_VERSION_DETAILS ( SCENARIO_ID,VERSION_ID,SRC_PHY_TABLE_NAME,TGT_PHY_TABLE_NAME,SNAPSHOT_REQ_TIME,VER_STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VERSION_ID,SRC_PHY_TABLE_NAME,TGT_PHY_TABLE_NAME,SNAPSHOT_REQ_TIME,VER_STATUS,''INSERT'',''VALID'' FROM IN_VERSION_DETAILS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_VERSION_DETAILS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.srcPhyTableName = t2.srcPhyTableName AND t1.versionId = t2.versionId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_DETAILS', 'INSERT INTO NC_VERSION_DETAILS ( SCENARIO_ID,VERSION_ID,SRC_PHY_TABLE_NAME,TGT_PHY_TABLE_NAME,SNAPSHOT_REQ_TIME,VER_STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VERSION_ID,SRC_PHY_TABLE_NAME,TGT_PHY_TABLE_NAME,SNAPSHOT_REQ_TIME,VER_STATUS,''DELETE'',''VALID'' FROM MST_VERSION_DETAILS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_VERSION_DETAILS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.srcPhyTableName = t2.srcPhyTableName AND t1.versionId = t2.versionId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_VERSION_DETAILS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.srcPhyTableName = t2.srcPhyTableName AND t1.versionId = t2.versionId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_DETAILS', 'INSERT INTO NC_VERSION_DETAILS ( SCENARIO_ID,VERSION_ID,SRC_PHY_TABLE_NAME,TGT_PHY_TABLE_NAME,SNAPSHOT_REQ_TIME,VER_STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VERSION_ID,t1.SRC_PHY_TABLE_NAME,t1.TGT_PHY_TABLE_NAME,t1.SNAPSHOT_REQ_TIME,t1.VER_STATUS,''UPDATE'',''VALID'' FROM IN_VERSION_DETAILS t1, MST_VERSION_DETAILS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.srcPhyTableName = t2.srcPhyTableName AND t1.versionId = t2.versionId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.versionId <> t2.versionId OR ( t1.versionId IS NULL AND t2.versionId IS NOT NULL) OR (t1.versionId IS NOT NULL AND t2.versionId IS NULL)) OR (t1.srcPhyTableName <> t2.srcPhyTableName OR ( t1.srcPhyTableName IS NULL AND t2.srcPhyTableName IS NOT NULL) OR (t1.srcPhyTableName IS NOT NULL AND t2.srcPhyTableName IS NULL)) OR (t1.tgtPhyTableName <> t2.tgtPhyTableName OR ( t1.tgtPhyTableName IS NULL AND t2.tgtPhyTableName IS NOT NULL) OR (t1.tgtPhyTableName IS NOT NULL AND t2.tgtPhyTableName IS NULL)) OR (t1.snapshotReqTime <> t2.snapshotReqTime OR ( t1.snapshotReqTime IS NULL AND t2.snapshotReqTime IS NOT NULL) OR (t1.snapshotReqTime IS NOT NULL AND t2.snapshotReqTime IS NULL)) OR (t1.verStatus <> t2.verStatus OR ( t1.verStatus IS NULL AND t2.verStatus IS NOT NULL) OR (t1.verStatus IS NOT NULL AND t2.verStatus IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_DETAILS', 'INSERT INTO NC_VERSION_DETAILS ( SCENARIO_ID,VERSION_ID,SRC_PHY_TABLE_NAME,TGT_PHY_TABLE_NAME,SNAPSHOT_REQ_TIME,VER_STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VERSION_ID,t1.SRC_PHY_TABLE_NAME,t1.TGT_PHY_TABLE_NAME,t1.SNAPSHOT_REQ_TIME,t1.VER_STATUS,''ACTIVATE'',''VALID'' FROM IN_VERSION_DETAILS t1, MST_VERSION_DETAILS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.srcPhyTableName = t2.srcPhyTableName AND t1.versionId = t2.versionId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_INFO', 'INSERT INTO NC_VERSION_INFO ( SCENARIO_ID,VERSION_ID,CREATION_DATE,REASON,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VERSION_ID,CREATION_DATE,REASON,''INSERT'',''VALID'' FROM IN_VERSION_INFO t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM MST_VERSION_INFO t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.versionId = t2.versionId )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_INFO', 'INSERT INTO NC_VERSION_INFO ( SCENARIO_ID,VERSION_ID,CREATION_DATE,REASON,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,VERSION_ID,CREATION_DATE,REASON,''DELETE'',''VALID'' FROM MST_VERSION_INFO t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_VERSION_INFO t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.versionId = t2.versionId ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_VERSION_INFO t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.versionId = t2.versionId));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_INFO', 'INSERT INTO NC_VERSION_INFO ( SCENARIO_ID,VERSION_ID,CREATION_DATE,REASON,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VERSION_ID,t1.CREATION_DATE,t1.REASON,''UPDATE'',''VALID'' FROM IN_VERSION_INFO t1, MST_VERSION_INFO t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.versionId = t2.versionId AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.versionId <> t2.versionId OR ( t1.versionId IS NULL AND t2.versionId IS NOT NULL) OR (t1.versionId IS NOT NULL AND t2.versionId IS NULL)) OR (t1.creationDate <> t2.creationDate OR ( t1.creationDate IS NULL AND t2.creationDate IS NOT NULL) OR (t1.creationDate IS NOT NULL AND t2.creationDate IS NULL)) OR (t1.reason <> t2.reason OR ( t1.reason IS NULL AND t2.reason IS NOT NULL) OR (t1.reason IS NOT NULL AND t2.reason IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_VERSION_INFO', 'INSERT INTO NC_VERSION_INFO ( SCENARIO_ID,VERSION_ID,CREATION_DATE,REASON,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.VERSION_ID,t1.CREATION_DATE,t1.REASON,''ACTIVATE'',''VALID'' FROM IN_VERSION_INFO t1, MST_VERSION_INFO t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.versionId = t2.versionId AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES', 'INSERT INTO NC_WF_NEXT_NODES ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,''INSERT'',''VALID'' FROM IN_WF_NEXT_NODES t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_NEXT_NODES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES', 'INSERT INTO NC_WF_NEXT_NODES ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,''DELETE'',''VALID'' FROM WF_NEXT_NODES t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_NEXT_NODES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_NEXT_NODES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES', 'INSERT INTO NC_WF_NEXT_NODES ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.NODE_ID,t1.PROCESS_ID,t1.NEXT_NODE_ID,t1.NEXT_NODE_SEQ,t1.NODE_CONDITION,t1.CONDITION_DESC,t1.PRESENTATION_DATA,''UPDATE'',''VALID'' FROM IN_WF_NEXT_NODES t1, WF_NEXT_NODES t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Next_Node_Id <> t2.Next_Node_Id OR ( t1.Next_Node_Id IS NULL AND t2.Next_Node_Id IS NOT NULL) OR (t1.Next_Node_Id IS NOT NULL AND t2.Next_Node_Id IS NULL)) OR (t1.Next_Node_Seq <> t2.Next_Node_Seq OR ( t1.Next_Node_Seq IS NULL AND t2.Next_Node_Seq IS NOT NULL) OR (t1.Next_Node_Seq IS NOT NULL AND t2.Next_Node_Seq IS NULL)) OR (t1.Node_Condition <> t2.Node_Condition OR ( t1.Node_Condition IS NULL AND t2.Node_Condition IS NOT NULL) OR (t1.Node_Condition IS NOT NULL AND t2.Node_Condition IS NULL)) OR (t1.Condition_Desc <> t2.Condition_Desc OR ( t1.Condition_Desc IS NULL AND t2.Condition_Desc IS NOT NULL) OR (t1.Condition_Desc IS NOT NULL AND t2.Condition_Desc IS NULL)) OR (t1.Presentation_Data <> t2.Presentation_Data OR ( t1.Presentation_Data IS NULL AND t2.Presentation_Data IS NOT NULL) OR (t1.Presentation_Data IS NOT NULL AND t2.Presentation_Data IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES', 'INSERT INTO NC_WF_NEXT_NODES ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.NODE_ID,t1.PROCESS_ID,t1.NEXT_NODE_ID,t1.NEXT_NODE_SEQ,t1.NODE_CONDITION,t1.CONDITION_DESC,t1.PRESENTATION_DATA,''ACTIVATE'',''VALID'' FROM IN_WF_NEXT_NODES t1, WF_NEXT_NODES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES_AUDIT', 'INSERT INTO NC_WF_NEXT_NODES_AUDIT ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,''INSERT'',''VALID'' FROM IN_WF_NEXT_NODES_AUDIT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_NEXT_NODES_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES_AUDIT', 'INSERT INTO NC_WF_NEXT_NODES_AUDIT ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,''DELETE'',''VALID'' FROM WF_NEXT_NODES_AUDIT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_NEXT_NODES_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_NEXT_NODES_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES_AUDIT', 'INSERT INTO NC_WF_NEXT_NODES_AUDIT ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.NODE_ID,t1.PROCESS_ID,t1.NEXT_NODE_ID,t1.NEXT_NODE_SEQ,t1.NODE_CONDITION,t1.CONDITION_DESC,t1.PRESENTATION_DATA,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''UPDATE'',''VALID'' FROM IN_WF_NEXT_NODES_AUDIT t1, WF_NEXT_NODES_AUDIT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Next_Node_Id <> t2.Next_Node_Id OR ( t1.Next_Node_Id IS NULL AND t2.Next_Node_Id IS NOT NULL) OR (t1.Next_Node_Id IS NOT NULL AND t2.Next_Node_Id IS NULL)) OR (t1.Next_Node_Seq <> t2.Next_Node_Seq OR ( t1.Next_Node_Seq IS NULL AND t2.Next_Node_Seq IS NOT NULL) OR (t1.Next_Node_Seq IS NOT NULL AND t2.Next_Node_Seq IS NULL)) OR (t1.Node_Condition <> t2.Node_Condition OR ( t1.Node_Condition IS NULL AND t2.Node_Condition IS NOT NULL) OR (t1.Node_Condition IS NOT NULL AND t2.Node_Condition IS NULL)) OR (t1.Condition_Desc <> t2.Condition_Desc OR ( t1.Condition_Desc IS NULL AND t2.Condition_Desc IS NOT NULL) OR (t1.Condition_Desc IS NOT NULL AND t2.Condition_Desc IS NULL)) OR (t1.Presentation_Data <> t2.Presentation_Data OR ( t1.Presentation_Data IS NULL AND t2.Presentation_Data IS NOT NULL) OR (t1.Presentation_Data IS NOT NULL AND t2.Presentation_Data IS NULL)) OR (t1.Version_Id <> t2.Version_Id OR ( t1.Version_Id IS NULL AND t2.Version_Id IS NOT NULL) OR (t1.Version_Id IS NOT NULL AND t2.Version_Id IS NULL)) OR (t1.Version_Create_Date <> t2.Version_Create_Date OR ( t1.Version_Create_Date IS NULL AND t2.Version_Create_Date IS NOT NULL) OR (t1.Version_Create_Date IS NOT NULL AND t2.Version_Create_Date IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_NEXT_NODES_AUDIT', 'INSERT INTO NC_WF_NEXT_NODES_AUDIT ( SCENARIO_ID,NODE_ID,PROCESS_ID,NEXT_NODE_ID,NEXT_NODE_SEQ,NODE_CONDITION,CONDITION_DESC,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.NODE_ID,t1.PROCESS_ID,t1.NEXT_NODE_ID,t1.NEXT_NODE_SEQ,t1.NODE_CONDITION,t1.CONDITION_DESC,t1.PRESENTATION_DATA,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''ACTIVATE'',''VALID'' FROM IN_WF_NEXT_NODES_AUDIT t1, WF_NEXT_NODES_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Next_Node_Id = t2.Next_Node_Id AND t1.Next_Node_Seq = t2.Next_Node_Seq AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS', 'INSERT INTO NC_WF_PARAMS ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,''INSERT'',''VALID'' FROM IN_WF_PARAMS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PARAMS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS', 'INSERT INTO NC_WF_PARAMS ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,''DELETE'',''VALID'' FROM WF_PARAMS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PARAMS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PARAMS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS', 'INSERT INTO NC_WF_PARAMS ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.PARAM_TYPE,t1.PARAM_NAME,t1.PARAM_DISP_NAME,t1.PARAM_VALUE,t1.PARAM_DESC,t1.IS_REQUIRED,t1.PARAM_VALUE_TYPE,t1.IS_HIDDEN,t1.IS_EDITABLE,t1.PARAM_SCOPE,''UPDATE'',''VALID'' FROM IN_WF_PARAMS t1, WF_PARAMS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Param_Type <> t2.Param_Type OR ( t1.Param_Type IS NULL AND t2.Param_Type IS NOT NULL) OR (t1.Param_Type IS NOT NULL AND t2.Param_Type IS NULL)) OR (t1.Param_Name <> t2.Param_Name OR ( t1.Param_Name IS NULL AND t2.Param_Name IS NOT NULL) OR (t1.Param_Name IS NOT NULL AND t2.Param_Name IS NULL)) OR (t1.Display_Name <> t2.Display_Name OR ( t1.Display_Name IS NULL AND t2.Display_Name IS NOT NULL) OR (t1.Display_Name IS NOT NULL AND t2.Display_Name IS NULL)) OR (t1.Param_Value <> t2.Param_Value OR ( t1.Param_Value IS NULL AND t2.Param_Value IS NOT NULL) OR (t1.Param_Value IS NOT NULL AND t2.Param_Value IS NULL)) OR (t1.Param_Desc <> t2.Param_Desc OR ( t1.Param_Desc IS NULL AND t2.Param_Desc IS NOT NULL) OR (t1.Param_Desc IS NOT NULL AND t2.Param_Desc IS NULL)) OR (t1.Is_Required <> t2.Is_Required OR ( t1.Is_Required IS NULL AND t2.Is_Required IS NOT NULL) OR (t1.Is_Required IS NOT NULL AND t2.Is_Required IS NULL)) OR (t1.Param_Value_Type <> t2.Param_Value_Type OR ( t1.Param_Value_Type IS NULL AND t2.Param_Value_Type IS NOT NULL) OR (t1.Param_Value_Type IS NOT NULL AND t2.Param_Value_Type IS NULL)) OR (t1.Is_Hidden <> t2.Is_Hidden OR ( t1.Is_Hidden IS NULL AND t2.Is_Hidden IS NOT NULL) OR (t1.Is_Hidden IS NOT NULL AND t2.Is_Hidden IS NULL)) OR (t1.Is_Editable <> t2.Is_Editable OR ( t1.Is_Editable IS NULL AND t2.Is_Editable IS NOT NULL) OR (t1.Is_Editable IS NOT NULL AND t2.Is_Editable IS NULL)) OR (t1.Param_Scope <> t2.Param_Scope OR ( t1.Param_Scope IS NULL AND t2.Param_Scope IS NOT NULL) OR (t1.Param_Scope IS NOT NULL AND t2.Param_Scope IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS', 'INSERT INTO NC_WF_PARAMS ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.PARAM_TYPE,t1.PARAM_NAME,t1.PARAM_DISP_NAME,t1.PARAM_VALUE,t1.PARAM_DESC,t1.IS_REQUIRED,t1.PARAM_VALUE_TYPE,t1.IS_HIDDEN,t1.IS_EDITABLE,t1.PARAM_SCOPE,''ACTIVATE'',''VALID'' FROM IN_WF_PARAMS t1, WF_PARAMS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_AUDIT', 'INSERT INTO NC_WF_PARAMS_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,VERSION_ID,VERSION_CREATE_DATE,''INSERT'',''VALID'' FROM IN_WF_PARAMS_AUDIT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PARAMS_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_AUDIT', 'INSERT INTO NC_WF_PARAMS_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,VERSION_ID,VERSION_CREATE_DATE,''DELETE'',''VALID'' FROM WF_PARAMS_AUDIT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PARAMS_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PARAMS_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_AUDIT', 'INSERT INTO NC_WF_PARAMS_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.PARAM_TYPE,t1.PARAM_NAME,t1.PARAM_DISP_NAME,t1.PARAM_VALUE,t1.PARAM_DESC,t1.IS_REQUIRED,t1.PARAM_VALUE_TYPE,t1.IS_HIDDEN,t1.IS_EDITABLE,t1.PARAM_SCOPE,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''UPDATE'',''VALID'' FROM IN_WF_PARAMS_AUDIT t1, WF_PARAMS_AUDIT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Param_Type <> t2.Param_Type OR ( t1.Param_Type IS NULL AND t2.Param_Type IS NOT NULL) OR (t1.Param_Type IS NOT NULL AND t2.Param_Type IS NULL)) OR (t1.Param_Name <> t2.Param_Name OR ( t1.Param_Name IS NULL AND t2.Param_Name IS NOT NULL) OR (t1.Param_Name IS NOT NULL AND t2.Param_Name IS NULL)) OR (t1.Display_Name <> t2.Display_Name OR ( t1.Display_Name IS NULL AND t2.Display_Name IS NOT NULL) OR (t1.Display_Name IS NOT NULL AND t2.Display_Name IS NULL)) OR (t1.Param_Value <> t2.Param_Value OR ( t1.Param_Value IS NULL AND t2.Param_Value IS NOT NULL) OR (t1.Param_Value IS NOT NULL AND t2.Param_Value IS NULL)) OR (t1.Param_Desc <> t2.Param_Desc OR ( t1.Param_Desc IS NULL AND t2.Param_Desc IS NOT NULL) OR (t1.Param_Desc IS NOT NULL AND t2.Param_Desc IS NULL)) OR (t1.Is_Required <> t2.Is_Required OR ( t1.Is_Required IS NULL AND t2.Is_Required IS NOT NULL) OR (t1.Is_Required IS NOT NULL AND t2.Is_Required IS NULL)) OR (t1.Param_Value_Type <> t2.Param_Value_Type OR ( t1.Param_Value_Type IS NULL AND t2.Param_Value_Type IS NOT NULL) OR (t1.Param_Value_Type IS NOT NULL AND t2.Param_Value_Type IS NULL)) OR (t1.Is_Hidden <> t2.Is_Hidden OR ( t1.Is_Hidden IS NULL AND t2.Is_Hidden IS NOT NULL) OR (t1.Is_Hidden IS NOT NULL AND t2.Is_Hidden IS NULL)) OR (t1.Is_Editable <> t2.Is_Editable OR ( t1.Is_Editable IS NULL AND t2.Is_Editable IS NOT NULL) OR (t1.Is_Editable IS NOT NULL AND t2.Is_Editable IS NULL)) OR (t1.Param_Scope <> t2.Param_Scope OR ( t1.Param_Scope IS NULL AND t2.Param_Scope IS NOT NULL) OR (t1.Param_Scope IS NOT NULL AND t2.Param_Scope IS NULL)) OR (t1.Version_Id <> t2.Version_Id OR ( t1.Version_Id IS NULL AND t2.Version_Id IS NOT NULL) OR (t1.Version_Id IS NOT NULL AND t2.Version_Id IS NULL)) OR (t1.Version_Create_Date <> t2.Version_Create_Date OR ( t1.Version_Create_Date IS NULL AND t2.Version_Create_Date IS NOT NULL) OR (t1.Version_Create_Date IS NOT NULL AND t2.Version_Create_Date IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_AUDIT', 'INSERT INTO NC_WF_PARAMS_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_TYPE,PARAM_NAME,PARAM_DISP_NAME,PARAM_VALUE,PARAM_DESC,IS_REQUIRED,PARAM_VALUE_TYPE,IS_HIDDEN,IS_EDITABLE,PARAM_SCOPE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.PARAM_TYPE,t1.PARAM_NAME,t1.PARAM_DISP_NAME,t1.PARAM_VALUE,t1.PARAM_DESC,t1.IS_REQUIRED,t1.PARAM_VALUE_TYPE,t1.IS_HIDDEN,t1.IS_EDITABLE,t1.PARAM_SCOPE,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''ACTIVATE'',''VALID'' FROM IN_WF_PARAMS_AUDIT t1, WF_PARAMS_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Param_Name = t2.Param_Name AND t1.Param_Type = t2.Param_Type AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT', 'INSERT INTO NC_WF_PARAMS_EXT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_VALUE,''INSERT'',''VALID'' FROM IN_WF_PARAMS_EXT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PARAMS_EXT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT', 'INSERT INTO NC_WF_PARAMS_EXT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_VALUE,''DELETE'',''VALID'' FROM WF_PARAMS_EXT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PARAMS_EXT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PARAMS_EXT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT', 'INSERT INTO NC_WF_PARAMS_EXT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.PARAM_VALUE,''UPDATE'',''VALID'' FROM IN_WF_PARAMS_EXT t1, WF_PARAMS_EXT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Param_Value <> t2.Param_Value OR ( t1.Param_Value IS NULL AND t2.Param_Value IS NOT NULL) OR (t1.Param_Value IS NOT NULL AND t2.Param_Value IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT', 'INSERT INTO NC_WF_PARAMS_EXT ( SCENARIO_ID,PROCESS_ID,NODE_ID,PARAM_VALUE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.PARAM_VALUE,''ACTIVATE'',''VALID'' FROM IN_WF_PARAMS_EXT t1, WF_PARAMS_EXT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT_AUDIT', 'INSERT INTO NC_WF_PARAMS_EXT_AUDIT ( SCENARIO_ID,Process_Id,NODE_ID,PARAM_VALUE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Process_Id,NODE_ID,PARAM_VALUE,VERSION_ID,VERSION_CREATE_DATE,''INSERT'',''VALID'' FROM IN_WF_PARAMS_EXT_AUDIT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PARAMS_EXT_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT_AUDIT', 'INSERT INTO NC_WF_PARAMS_EXT_AUDIT ( SCENARIO_ID,Process_Id,NODE_ID,PARAM_VALUE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,Process_Id,NODE_ID,PARAM_VALUE,VERSION_ID,VERSION_CREATE_DATE,''DELETE'',''VALID'' FROM WF_PARAMS_EXT_AUDIT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PARAMS_EXT_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PARAMS_EXT_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT_AUDIT', 'INSERT INTO NC_WF_PARAMS_EXT_AUDIT ( SCENARIO_ID,Process_Id,NODE_ID,PARAM_VALUE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Process_Id,t1.NODE_ID,t1.PARAM_VALUE,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''UPDATE'',''VALID'' FROM IN_WF_PARAMS_EXT_AUDIT t1, WF_PARAMS_EXT_AUDIT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Param_Value <> t2.Param_Value OR ( t1.Param_Value IS NULL AND t2.Param_Value IS NOT NULL) OR (t1.Param_Value IS NOT NULL AND t2.Param_Value IS NULL)) OR (t1.Version_Id <> t2.Version_Id OR ( t1.Version_Id IS NULL AND t2.Version_Id IS NOT NULL) OR (t1.Version_Id IS NOT NULL AND t2.Version_Id IS NULL)) OR (t1.Version_Create_Date <> t2.Version_Create_Date OR ( t1.Version_Create_Date IS NULL AND t2.Version_Create_Date IS NOT NULL) OR (t1.Version_Create_Date IS NOT NULL AND t2.Version_Create_Date IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PARAMS_EXT_AUDIT', 'INSERT INTO NC_WF_PARAMS_EXT_AUDIT ( SCENARIO_ID,Process_Id,NODE_ID,PARAM_VALUE,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.Process_Id,t1.NODE_ID,t1.PARAM_VALUE,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''ACTIVATE'',''VALID'' FROM IN_WF_PARAMS_EXT_AUDIT t1, WF_PARAMS_EXT_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS', 'INSERT INTO NC_WF_PROCESS ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,''INSERT'',''VALID'' FROM IN_WF_PROCESS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS', 'INSERT INTO NC_WF_PROCESS ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,''DELETE'',''VALID'' FROM WF_PROCESS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS', 'INSERT INTO NC_WF_PROCESS ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.PROCESS_NAME,t1.PROCESS_TEMPLATE,t1.DESCRIPTION,t1.NOTIFICATION_ENABLED,t1.NOTIFICATION_DETAILS,t1.MANAGE_AUTH_ROLE,t1.EXECUTE_AUTH_ROLE,t1.ENABLE_QUERYBAND,t1.WORKFLOW_TEMPLATE,t1.PROCESS_VERSION,t1.EFFECTIVE_DATE,t1.IS_DIRTY,t1.SERVICE,t1.CATEGORY,t1.LOG_LEVEL,t1.IS_SCHEDULABLE,t1.IS_FAVORITE,t1.USE_CONFIGURATION,t1.PRESENTATION_DATA,''UPDATE'',''VALID'' FROM IN_WF_PROCESS t1, WF_PROCESS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Template <> t2.Process_Template OR ( t1.Process_Template IS NULL AND t2.Process_Template IS NOT NULL) OR (t1.Process_Template IS NOT NULL AND t2.Process_Template IS NULL)) OR (t1.Process_Description <> t2.Process_Description OR ( t1.Process_Description IS NULL AND t2.Process_Description IS NOT NULL) OR (t1.Process_Description IS NOT NULL AND t2.Process_Description IS NULL)) OR (t1.Notification_Enabled <> t2.Notification_Enabled OR ( t1.Notification_Enabled IS NULL AND t2.Notification_Enabled IS NOT NULL) OR (t1.Notification_Enabled IS NOT NULL AND t2.Notification_Enabled IS NULL)) OR (t1.Notification_Details <> t2.Notification_Details OR ( t1.Notification_Details IS NULL AND t2.Notification_Details IS NOT NULL) OR (t1.Notification_Details IS NOT NULL AND t2.Notification_Details IS NULL)) OR (t1.Manage_Auth_Role <> t2.Manage_Auth_Role OR ( t1.Manage_Auth_Role IS NULL AND t2.Manage_Auth_Role IS NOT NULL) OR (t1.Manage_Auth_Role IS NOT NULL AND t2.Manage_Auth_Role IS NULL)) OR (t1.Execute_Auth_Role <> t2.Execute_Auth_Role OR ( t1.Execute_Auth_Role IS NULL AND t2.Execute_Auth_Role IS NOT NULL) OR (t1.Execute_Auth_Role IS NOT NULL AND t2.Execute_Auth_Role IS NULL)) OR (t1.Enable_Queryband <> t2.Enable_Queryband OR ( t1.Enable_Queryband IS NULL AND t2.Enable_Queryband IS NOT NULL) OR (t1.Enable_Queryband IS NOT NULL AND t2.Enable_Queryband IS NULL)) OR (t1.Workflow_Template <> t2.Workflow_Template OR ( t1.Workflow_Template IS NULL AND t2.Workflow_Template IS NOT NULL) OR (t1.Workflow_Template IS NOT NULL AND t2.Workflow_Template IS NULL)) OR (t1.Process_Version <> t2.Process_Version OR ( t1.Process_Version IS NULL AND t2.Process_Version IS NOT NULL) OR (t1.Process_Version IS NOT NULL AND t2.Process_Version IS NULL)) OR (t1.Effective_Date <> t2.Effective_Date OR ( t1.Effective_Date IS NULL AND t2.Effective_Date IS NOT NULL) OR (t1.Effective_Date IS NOT NULL AND t2.Effective_Date IS NULL)) OR (t1.Is_Dirty <> t2.Is_Dirty OR ( t1.Is_Dirty IS NULL AND t2.Is_Dirty IS NOT NULL) OR (t1.Is_Dirty IS NOT NULL AND t2.Is_Dirty IS NULL)) OR (t1.Service <> t2.Service OR ( t1.Service IS NULL AND t2.Service IS NOT NULL) OR (t1.Service IS NOT NULL AND t2.Service IS NULL)) OR (t1.Category <> t2.Category OR ( t1.Category IS NULL AND t2.Category IS NOT NULL) OR (t1.Category IS NOT NULL AND t2.Category IS NULL)) OR (t1.Log_Level <> t2.Log_Level OR ( t1.Log_Level IS NULL AND t2.Log_Level IS NOT NULL) OR (t1.Log_Level IS NOT NULL AND t2.Log_Level IS NULL)) OR (t1.Is_Schedulable <> t2.Is_Schedulable OR ( t1.Is_Schedulable IS NULL AND t2.Is_Schedulable IS NOT NULL) OR (t1.Is_Schedulable IS NOT NULL AND t2.Is_Schedulable IS NULL)) OR (t1.Is_Favorite <> t2.Is_Favorite OR ( t1.Is_Favorite IS NULL AND t2.Is_Favorite IS NOT NULL) OR (t1.Is_Favorite IS NOT NULL AND t2.Is_Favorite IS NULL)) OR (t1.Use_Configuration <> t2.Use_Configuration OR ( t1.Use_Configuration IS NULL AND t2.Use_Configuration IS NOT NULL) OR (t1.Use_Configuration IS NOT NULL AND t2.Use_Configuration IS NULL)) OR (t1.Presentation_Data <> t2.Presentation_Data OR ( t1.Presentation_Data IS NULL AND t2.Presentation_Data IS NOT NULL) OR (t1.Presentation_Data IS NOT NULL AND t2.Presentation_Data IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS', 'INSERT INTO NC_WF_PROCESS ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.PROCESS_NAME,t1.PROCESS_TEMPLATE,t1.DESCRIPTION,t1.NOTIFICATION_ENABLED,t1.NOTIFICATION_DETAILS,t1.MANAGE_AUTH_ROLE,t1.EXECUTE_AUTH_ROLE,t1.ENABLE_QUERYBAND,t1.WORKFLOW_TEMPLATE,t1.PROCESS_VERSION,t1.EFFECTIVE_DATE,t1.IS_DIRTY,t1.SERVICE,t1.CATEGORY,t1.LOG_LEVEL,t1.IS_SCHEDULABLE,t1.IS_FAVORITE,t1.USE_CONFIGURATION,t1.PRESENTATION_DATA,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS t1, WF_PROCESS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_AUDIT', 'INSERT INTO NC_WF_PROCESS_AUDIT ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,''INSERT'',''VALID'' FROM IN_WF_PROCESS_AUDIT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_AUDIT', 'INSERT INTO NC_WF_PROCESS_AUDIT ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,''DELETE'',''VALID'' FROM WF_PROCESS_AUDIT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_AUDIT', 'INSERT INTO NC_WF_PROCESS_AUDIT ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.PROCESS_NAME,t1.PROCESS_TEMPLATE,t1.DESCRIPTION,t1.NOTIFICATION_ENABLED,t1.NOTIFICATION_DETAILS,t1.MANAGE_AUTH_ROLE,t1.EXECUTE_AUTH_ROLE,t1.ENABLE_QUERYBAND,t1.WORKFLOW_TEMPLATE,t1.PROCESS_VERSION,t1.EFFECTIVE_DATE,t1.IS_DIRTY,t1.SERVICE,t1.CATEGORY,t1.LOG_LEVEL,t1.IS_SCHEDULABLE,t1.IS_FAVORITE,t1.USE_CONFIGURATION,t1.PRESENTATION_DATA,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''UPDATE'',''VALID'' FROM IN_WF_PROCESS_AUDIT t1, WF_PROCESS_AUDIT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Process_Name <> t2.Process_Name OR ( t1.Process_Name IS NULL AND t2.Process_Name IS NOT NULL) OR (t1.Process_Name IS NOT NULL AND t2.Process_Name IS NULL)) OR (t1.Process_Template <> t2.Process_Template OR ( t1.Process_Template IS NULL AND t2.Process_Template IS NOT NULL) OR (t1.Process_Template IS NOT NULL AND t2.Process_Template IS NULL)) OR (t1.Process_Description <> t2.Process_Description OR ( t1.Process_Description IS NULL AND t2.Process_Description IS NOT NULL) OR (t1.Process_Description IS NOT NULL AND t2.Process_Description IS NULL)) OR (t1.Notification_Enabled <> t2.Notification_Enabled OR ( t1.Notification_Enabled IS NULL AND t2.Notification_Enabled IS NOT NULL) OR (t1.Notification_Enabled IS NOT NULL AND t2.Notification_Enabled IS NULL)) OR (t1.Notification_Details <> t2.Notification_Details OR ( t1.Notification_Details IS NULL AND t2.Notification_Details IS NOT NULL) OR (t1.Notification_Details IS NOT NULL AND t2.Notification_Details IS NULL)) OR (t1.Manage_Auth_Role <> t2.Manage_Auth_Role OR ( t1.Manage_Auth_Role IS NULL AND t2.Manage_Auth_Role IS NOT NULL) OR (t1.Manage_Auth_Role IS NOT NULL AND t2.Manage_Auth_Role IS NULL)) OR (t1.Execute_Auth_Role <> t2.Execute_Auth_Role OR ( t1.Execute_Auth_Role IS NULL AND t2.Execute_Auth_Role IS NOT NULL) OR (t1.Execute_Auth_Role IS NOT NULL AND t2.Execute_Auth_Role IS NULL)) OR (t1.Enable_Queryband <> t2.Enable_Queryband OR ( t1.Enable_Queryband IS NULL AND t2.Enable_Queryband IS NOT NULL) OR (t1.Enable_Queryband IS NOT NULL AND t2.Enable_Queryband IS NULL)) OR (t1.Workflow_Template <> t2.Workflow_Template OR ( t1.Workflow_Template IS NULL AND t2.Workflow_Template IS NOT NULL) OR (t1.Workflow_Template IS NOT NULL AND t2.Workflow_Template IS NULL)) OR (t1.Process_Version <> t2.Process_Version OR ( t1.Process_Version IS NULL AND t2.Process_Version IS NOT NULL) OR (t1.Process_Version IS NOT NULL AND t2.Process_Version IS NULL)) OR (t1.Effective_Date <> t2.Effective_Date OR ( t1.Effective_Date IS NULL AND t2.Effective_Date IS NOT NULL) OR (t1.Effective_Date IS NOT NULL AND t2.Effective_Date IS NULL)) OR (t1.Is_Dirty <> t2.Is_Dirty OR ( t1.Is_Dirty IS NULL AND t2.Is_Dirty IS NOT NULL) OR (t1.Is_Dirty IS NOT NULL AND t2.Is_Dirty IS NULL)) OR (t1.Service <> t2.Service OR ( t1.Service IS NULL AND t2.Service IS NOT NULL) OR (t1.Service IS NOT NULL AND t2.Service IS NULL)) OR (t1.Category <> t2.Category OR ( t1.Category IS NULL AND t2.Category IS NOT NULL) OR (t1.Category IS NOT NULL AND t2.Category IS NULL)) OR (t1.Log_Level <> t2.Log_Level OR ( t1.Log_Level IS NULL AND t2.Log_Level IS NOT NULL) OR (t1.Log_Level IS NOT NULL AND t2.Log_Level IS NULL)) OR (t1.Is_Schedulable <> t2.Is_Schedulable OR ( t1.Is_Schedulable IS NULL AND t2.Is_Schedulable IS NOT NULL) OR (t1.Is_Schedulable IS NOT NULL AND t2.Is_Schedulable IS NULL)) OR (t1.Is_Favorite <> t2.Is_Favorite OR ( t1.Is_Favorite IS NULL AND t2.Is_Favorite IS NOT NULL) OR (t1.Is_Favorite IS NOT NULL AND t2.Is_Favorite IS NULL)) OR (t1.Use_Configuration <> t2.Use_Configuration OR ( t1.Use_Configuration IS NULL AND t2.Use_Configuration IS NOT NULL) OR (t1.Use_Configuration IS NOT NULL AND t2.Use_Configuration IS NULL)) OR (t1.Presentation_Data <> t2.Presentation_Data OR ( t1.Presentation_Data IS NULL AND t2.Presentation_Data IS NOT NULL) OR (t1.Presentation_Data IS NOT NULL AND t2.Presentation_Data IS NULL)) OR (t1.Version_Id <> t2.Version_Id OR ( t1.Version_Id IS NULL AND t2.Version_Id IS NOT NULL) OR (t1.Version_Id IS NOT NULL AND t2.Version_Id IS NULL)) OR (t1.Version_Create_Date <> t2.Version_Create_Date OR ( t1.Version_Create_Date IS NULL AND t2.Version_Create_Date IS NOT NULL) OR (t1.Version_Create_Date IS NOT NULL AND t2.Version_Create_Date IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_AUDIT', 'INSERT INTO NC_WF_PROCESS_AUDIT ( SCENARIO_ID,PROCESS_ID,PROCESS_NAME,PROCESS_TEMPLATE,DESCRIPTION,NOTIFICATION_ENABLED,NOTIFICATION_DETAILS,MANAGE_AUTH_ROLE,EXECUTE_AUTH_ROLE,ENABLE_QUERYBAND,WORKFLOW_TEMPLATE,PROCESS_VERSION,EFFECTIVE_DATE,IS_DIRTY,SERVICE,CATEGORY,LOG_LEVEL,IS_SCHEDULABLE,IS_FAVORITE,USE_CONFIGURATION,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.PROCESS_NAME,t1.PROCESS_TEMPLATE,t1.DESCRIPTION,t1.NOTIFICATION_ENABLED,t1.NOTIFICATION_DETAILS,t1.MANAGE_AUTH_ROLE,t1.EXECUTE_AUTH_ROLE,t1.ENABLE_QUERYBAND,t1.WORKFLOW_TEMPLATE,t1.PROCESS_VERSION,t1.EFFECTIVE_DATE,t1.IS_DIRTY,t1.SERVICE,t1.CATEGORY,t1.LOG_LEVEL,t1.IS_SCHEDULABLE,t1.IS_FAVORITE,t1.USE_CONFIGURATION,t1.PRESENTATION_DATA,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS_AUDIT t1, WF_PROCESS_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_INSTANCE', 'INSERT INTO NC_WF_PROCESS_INSTANCE ( SCENARIO_ID,PROCESS_ID,WF_INSTANCE_ID,DESCRIPTION,WF_START_DATE,WF_END_DATE,STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,WF_INSTANCE_ID,DESCRIPTION,WF_START_DATE,WF_END_DATE,STATUS,''INSERT'',''VALID'' FROM IN_WF_PROCESS_INSTANCE t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS_INSTANCE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.WfInstance_Id = t2.WfInstance_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_INSTANCE', 'INSERT INTO NC_WF_PROCESS_INSTANCE ( SCENARIO_ID,PROCESS_ID,WF_INSTANCE_ID,DESCRIPTION,WF_START_DATE,WF_END_DATE,STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,WF_INSTANCE_ID,DESCRIPTION,WF_START_DATE,WF_END_DATE,STATUS,''DELETE'',''VALID'' FROM WF_PROCESS_INSTANCE t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS_INSTANCE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.WfInstance_Id = t2.WfInstance_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS_INSTANCE t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.WfInstance_Id = t2.WfInstance_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_INSTANCE', 'INSERT INTO NC_WF_PROCESS_INSTANCE ( SCENARIO_ID,PROCESS_ID,WF_INSTANCE_ID,DESCRIPTION,WF_START_DATE,WF_END_DATE,STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.WF_INSTANCE_ID,t1.DESCRIPTION,t1.WF_START_DATE,t1.WF_END_DATE,t1.STATUS,''UPDATE'',''VALID'' FROM IN_WF_PROCESS_INSTANCE t1, WF_PROCESS_INSTANCE t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.WfInstance_Id = t2.WfInstance_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.WfInstance_Id <> t2.WfInstance_Id OR ( t1.WfInstance_Id IS NULL AND t2.WfInstance_Id IS NOT NULL) OR (t1.WfInstance_Id IS NOT NULL AND t2.WfInstance_Id IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.Wf_Start_Date <> t2.Wf_Start_Date OR ( t1.Wf_Start_Date IS NULL AND t2.Wf_Start_Date IS NOT NULL) OR (t1.Wf_Start_Date IS NOT NULL AND t2.Wf_Start_Date IS NULL)) OR (t1.Wf_End_Date <> t2.Wf_End_Date OR ( t1.Wf_End_Date IS NULL AND t2.Wf_End_Date IS NOT NULL) OR (t1.Wf_End_Date IS NOT NULL AND t2.Wf_End_Date IS NULL)) OR (t1.Status <> t2.Status OR ( t1.Status IS NULL AND t2.Status IS NOT NULL) OR (t1.Status IS NOT NULL AND t2.Status IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_INSTANCE', 'INSERT INTO NC_WF_PROCESS_INSTANCE ( SCENARIO_ID,PROCESS_ID,WF_INSTANCE_ID,DESCRIPTION,WF_START_DATE,WF_END_DATE,STATUS,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.WF_INSTANCE_ID,t1.DESCRIPTION,t1.WF_START_DATE,t1.WF_END_DATE,t1.STATUS,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS_INSTANCE t1, WF_PROCESS_INSTANCE t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.WfInstance_Id = t2.WfInstance_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES', 'INSERT INTO NC_WF_PROCESS_NODES ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,''INSERT'',''VALID'' FROM IN_WF_PROCESS_NODES t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS_NODES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES', 'INSERT INTO NC_WF_PROCESS_NODES ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,''DELETE'',''VALID'' FROM WF_PROCESS_NODES t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS_NODES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS_NODES t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES', 'INSERT INTO NC_WF_PROCESS_NODES ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.NODE_NAME,t1.NODE_DESC,t1.NODE_TYPE,t1.NODE_SUB_TYPE,t1.NODE_INPUT,t1.NODE_OUTPUT,t1.PRESENTATION_DATA,''UPDATE'',''VALID'' FROM IN_WF_PROCESS_NODES t1, WF_PROCESS_NODES t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Node_Name <> t2.Node_Name OR ( t1.Node_Name IS NULL AND t2.Node_Name IS NOT NULL) OR (t1.Node_Name IS NOT NULL AND t2.Node_Name IS NULL)) OR (t1.Node_Desc <> t2.Node_Desc OR ( t1.Node_Desc IS NULL AND t2.Node_Desc IS NOT NULL) OR (t1.Node_Desc IS NOT NULL AND t2.Node_Desc IS NULL)) OR (t1.Node_Type <> t2.Node_Type OR ( t1.Node_Type IS NULL AND t2.Node_Type IS NOT NULL) OR (t1.Node_Type IS NOT NULL AND t2.Node_Type IS NULL)) OR (t1.Node_Sub_Type <> t2.Node_Sub_Type OR ( t1.Node_Sub_Type IS NULL AND t2.Node_Sub_Type IS NOT NULL) OR (t1.Node_Sub_Type IS NOT NULL AND t2.Node_Sub_Type IS NULL)) OR (t1.Node_Input <> t2.Node_Input OR ( t1.Node_Input IS NULL AND t2.Node_Input IS NOT NULL) OR (t1.Node_Input IS NOT NULL AND t2.Node_Input IS NULL)) OR (t1.Node_Output <> t2.Node_Output OR ( t1.Node_Output IS NULL AND t2.Node_Output IS NOT NULL) OR (t1.Node_Output IS NOT NULL AND t2.Node_Output IS NULL)) OR (t1.Presentation_Data <> t2.Presentation_Data OR ( t1.Presentation_Data IS NULL AND t2.Presentation_Data IS NOT NULL) OR (t1.Presentation_Data IS NOT NULL AND t2.Presentation_Data IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES', 'INSERT INTO NC_WF_PROCESS_NODES ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.NODE_NAME,t1.NODE_DESC,t1.NODE_TYPE,t1.NODE_SUB_TYPE,t1.NODE_INPUT,t1.NODE_OUTPUT,t1.PRESENTATION_DATA,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS_NODES t1, WF_PROCESS_NODES t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES_AUDIT', 'INSERT INTO NC_WF_PROCESS_NODES_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,''INSERT'',''VALID'' FROM IN_WF_PROCESS_NODES_AUDIT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS_NODES_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES_AUDIT', 'INSERT INTO NC_WF_PROCESS_NODES_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,''DELETE'',''VALID'' FROM WF_PROCESS_NODES_AUDIT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS_NODES_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS_NODES_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES_AUDIT', 'INSERT INTO NC_WF_PROCESS_NODES_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.NODE_NAME,t1.NODE_DESC,t1.NODE_TYPE,t1.NODE_SUB_TYPE,t1.NODE_INPUT,t1.NODE_OUTPUT,t1.PRESENTATION_DATA,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''UPDATE'',''VALID'' FROM IN_WF_PROCESS_NODES_AUDIT t1, WF_PROCESS_NODES_AUDIT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Id <> t2.Node_Id OR ( t1.Node_Id IS NULL AND t2.Node_Id IS NOT NULL) OR (t1.Node_Id IS NOT NULL AND t2.Node_Id IS NULL)) OR (t1.Node_Name <> t2.Node_Name OR ( t1.Node_Name IS NULL AND t2.Node_Name IS NOT NULL) OR (t1.Node_Name IS NOT NULL AND t2.Node_Name IS NULL)) OR (t1.Node_Desc <> t2.Node_Desc OR ( t1.Node_Desc IS NULL AND t2.Node_Desc IS NOT NULL) OR (t1.Node_Desc IS NOT NULL AND t2.Node_Desc IS NULL)) OR (t1.Node_Type <> t2.Node_Type OR ( t1.Node_Type IS NULL AND t2.Node_Type IS NOT NULL) OR (t1.Node_Type IS NOT NULL AND t2.Node_Type IS NULL)) OR (t1.Node_Sub_Type <> t2.Node_Sub_Type OR ( t1.Node_Sub_Type IS NULL AND t2.Node_Sub_Type IS NOT NULL) OR (t1.Node_Sub_Type IS NOT NULL AND t2.Node_Sub_Type IS NULL)) OR (t1.Node_Input <> t2.Node_Input OR ( t1.Node_Input IS NULL AND t2.Node_Input IS NOT NULL) OR (t1.Node_Input IS NOT NULL AND t2.Node_Input IS NULL)) OR (t1.Node_Output <> t2.Node_Output OR ( t1.Node_Output IS NULL AND t2.Node_Output IS NOT NULL) OR (t1.Node_Output IS NOT NULL AND t2.Node_Output IS NULL)) OR (t1.Presentation_Data <> t2.Presentation_Data OR ( t1.Presentation_Data IS NULL AND t2.Presentation_Data IS NOT NULL) OR (t1.Presentation_Data IS NOT NULL AND t2.Presentation_Data IS NULL)) OR (t1.Version_Id <> t2.Version_Id OR ( t1.Version_Id IS NULL AND t2.Version_Id IS NOT NULL) OR (t1.Version_Id IS NOT NULL AND t2.Version_Id IS NULL)) OR (t1.Version_Create_Date <> t2.Version_Create_Date OR ( t1.Version_Create_Date IS NULL AND t2.Version_Create_Date IS NOT NULL) OR (t1.Version_Create_Date IS NOT NULL AND t2.Version_Create_Date IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_NODES_AUDIT', 'INSERT INTO NC_WF_PROCESS_NODES_AUDIT ( SCENARIO_ID,PROCESS_ID,NODE_ID,NODE_NAME,NODE_DESC,NODE_TYPE,NODE_SUB_TYPE,NODE_INPUT,NODE_OUTPUT,PRESENTATION_DATA,VERSION_ID,VERSION_CREATE_DATE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_ID,t1.NODE_NAME,t1.NODE_DESC,t1.NODE_TYPE,t1.NODE_SUB_TYPE,t1.NODE_INPUT,t1.NODE_OUTPUT,t1.PRESENTATION_DATA,t1.VERSION_ID,t1.VERSION_CREATE_DATE,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS_NODES_AUDIT t1, WF_PROCESS_NODES_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Node_Id = t2.Node_Id AND t1.Process_Id = t2.Process_Id AND t1.Version_Id = t2.Version_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_STATUS', 'INSERT INTO NC_WF_PROCESS_STATUS ( SCENARIO_ID,PROCESS_ID,NODE_NAME,STATUS_TYPE,STATUS_CONDITION,CONDITION_SEQ,STATUS_DESCRIPTION,TRUE_STATUS,FALSE_STATUS,TRUE_STATUS_COLOR_CD,FALSE_STATUS_COLOR_CD,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_NAME,STATUS_TYPE,STATUS_CONDITION,CONDITION_SEQ,STATUS_DESCRIPTION,TRUE_STATUS,FALSE_STATUS,TRUE_STATUS_COLOR_CD,FALSE_STATUS_COLOR_CD,''INSERT'',''VALID'' FROM IN_WF_PROCESS_STATUS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS_STATUS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Condition_Seq = t2.Condition_Seq AND t1.Node_Name = t2.Node_Name AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_STATUS', 'INSERT INTO NC_WF_PROCESS_STATUS ( SCENARIO_ID,PROCESS_ID,NODE_NAME,STATUS_TYPE,STATUS_CONDITION,CONDITION_SEQ,STATUS_DESCRIPTION,TRUE_STATUS,FALSE_STATUS,TRUE_STATUS_COLOR_CD,FALSE_STATUS_COLOR_CD,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,NODE_NAME,STATUS_TYPE,STATUS_CONDITION,CONDITION_SEQ,STATUS_DESCRIPTION,TRUE_STATUS,FALSE_STATUS,TRUE_STATUS_COLOR_CD,FALSE_STATUS_COLOR_CD,''DELETE'',''VALID'' FROM WF_PROCESS_STATUS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS_STATUS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Condition_Seq = t2.Condition_Seq AND t1.Node_Name = t2.Node_Name AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS_STATUS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Condition_Seq = t2.Condition_Seq AND t1.Node_Name = t2.Node_Name AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_STATUS', 'INSERT INTO NC_WF_PROCESS_STATUS ( SCENARIO_ID,PROCESS_ID,NODE_NAME,STATUS_TYPE,STATUS_CONDITION,CONDITION_SEQ,STATUS_DESCRIPTION,TRUE_STATUS,FALSE_STATUS,TRUE_STATUS_COLOR_CD,FALSE_STATUS_COLOR_CD,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_NAME,t1.STATUS_TYPE,t1.STATUS_CONDITION,t1.CONDITION_SEQ,t1.STATUS_DESCRIPTION,t1.TRUE_STATUS,t1.FALSE_STATUS,t1.TRUE_STATUS_COLOR_CD,t1.FALSE_STATUS_COLOR_CD,''UPDATE'',''VALID'' FROM IN_WF_PROCESS_STATUS t1, WF_PROCESS_STATUS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Condition_Seq = t2.Condition_Seq AND t1.Node_Name = t2.Node_Name AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Node_Name <> t2.Node_Name OR ( t1.Node_Name IS NULL AND t2.Node_Name IS NOT NULL) OR (t1.Node_Name IS NOT NULL AND t2.Node_Name IS NULL)) OR (t1.Status_Type <> t2.Status_Type OR ( t1.Status_Type IS NULL AND t2.Status_Type IS NOT NULL) OR (t1.Status_Type IS NOT NULL AND t2.Status_Type IS NULL)) OR (t1.Condition <> t2.Condition OR ( t1.Condition IS NULL AND t2.Condition IS NOT NULL) OR (t1.Condition IS NOT NULL AND t2.Condition IS NULL)) OR (t1.Condition_Seq <> t2.Condition_Seq OR ( t1.Condition_Seq IS NULL AND t2.Condition_Seq IS NOT NULL) OR (t1.Condition_Seq IS NOT NULL AND t2.Condition_Seq IS NULL)) OR (t1.Description <> t2.Description OR ( t1.Description IS NULL AND t2.Description IS NOT NULL) OR (t1.Description IS NOT NULL AND t2.Description IS NULL)) OR (t1.True_Status <> t2.True_Status OR ( t1.True_Status IS NULL AND t2.True_Status IS NOT NULL) OR (t1.True_Status IS NOT NULL AND t2.True_Status IS NULL)) OR (t1.False_Status <> t2.False_Status OR ( t1.False_Status IS NULL AND t2.False_Status IS NOT NULL) OR (t1.False_Status IS NOT NULL AND t2.False_Status IS NULL)) OR (t1.True_ColorCd <> t2.True_ColorCd OR ( t1.True_ColorCd IS NULL AND t2.True_ColorCd IS NOT NULL) OR (t1.True_ColorCd IS NOT NULL AND t2.True_ColorCd IS NULL)) OR (t1.False_ColorCd <> t2.False_ColorCd OR ( t1.False_ColorCd IS NULL AND t2.False_ColorCd IS NOT NULL) OR (t1.False_ColorCd IS NOT NULL AND t2.False_ColorCd IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_STATUS', 'INSERT INTO NC_WF_PROCESS_STATUS ( SCENARIO_ID,PROCESS_ID,NODE_NAME,STATUS_TYPE,STATUS_CONDITION,CONDITION_SEQ,STATUS_DESCRIPTION,TRUE_STATUS,FALSE_STATUS,TRUE_STATUS_COLOR_CD,FALSE_STATUS_COLOR_CD,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.NODE_NAME,t1.STATUS_TYPE,t1.STATUS_CONDITION,t1.CONDITION_SEQ,t1.STATUS_DESCRIPTION,t1.TRUE_STATUS,t1.FALSE_STATUS,t1.TRUE_STATUS_COLOR_CD,t1.FALSE_STATUS_COLOR_CD,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS_STATUS t1, WF_PROCESS_STATUS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Condition_Seq = t2.Condition_Seq AND t1.Node_Name = t2.Node_Name AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_TASKS', 'INSERT INTO NC_WF_PROCESS_TASKS ( SCENARIO_ID,PROCESS_ID,TASK_ID,TASK_NODE,MESSAGE,STATUS,ASSIGNED_BY,ASSIGNED_TO,ASSIGNED_DATE,COMPLETION_DATE,LOCKED_BY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,TASK_ID,TASK_NODE,MESSAGE,STATUS,ASSIGNED_BY,ASSIGNED_TO,ASSIGNED_DATE,COMPLETION_DATE,LOCKED_BY,''INSERT'',''VALID'' FROM IN_WF_PROCESS_TASKS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_PROCESS_TASKS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_TASKS', 'INSERT INTO NC_WF_PROCESS_TASKS ( SCENARIO_ID,PROCESS_ID,TASK_ID,TASK_NODE,MESSAGE,STATUS,ASSIGNED_BY,ASSIGNED_TO,ASSIGNED_DATE,COMPLETION_DATE,LOCKED_BY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,TASK_ID,TASK_NODE,MESSAGE,STATUS,ASSIGNED_BY,ASSIGNED_TO,ASSIGNED_DATE,COMPLETION_DATE,LOCKED_BY,''DELETE'',''VALID'' FROM WF_PROCESS_TASKS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_PROCESS_TASKS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_PROCESS_TASKS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_TASKS', 'INSERT INTO NC_WF_PROCESS_TASKS ( SCENARIO_ID,PROCESS_ID,TASK_ID,TASK_NODE,MESSAGE,STATUS,ASSIGNED_BY,ASSIGNED_TO,ASSIGNED_DATE,COMPLETION_DATE,LOCKED_BY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.TASK_ID,t1.TASK_NODE,t1.MESSAGE,t1.STATUS,t1.ASSIGNED_BY,t1.ASSIGNED_TO,t1.ASSIGNED_DATE,t1.COMPLETION_DATE,t1.LOCKED_BY,''UPDATE'',''VALID'' FROM IN_WF_PROCESS_TASKS t1, WF_PROCESS_TASKS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Task_Id <> t2.Task_Id OR ( t1.Task_Id IS NULL AND t2.Task_Id IS NOT NULL) OR (t1.Task_Id IS NOT NULL AND t2.Task_Id IS NULL)) OR (t1.Task_Node <> t2.Task_Node OR ( t1.Task_Node IS NULL AND t2.Task_Node IS NOT NULL) OR (t1.Task_Node IS NOT NULL AND t2.Task_Node IS NULL)) OR (t1.Message <> t2.Message OR ( t1.Message IS NULL AND t2.Message IS NOT NULL) OR (t1.Message IS NOT NULL AND t2.Message IS NULL)) OR (t1.Status <> t2.Status OR ( t1.Status IS NULL AND t2.Status IS NOT NULL) OR (t1.Status IS NOT NULL AND t2.Status IS NULL)) OR (t1.Assigned_By <> t2.Assigned_By OR ( t1.Assigned_By IS NULL AND t2.Assigned_By IS NOT NULL) OR (t1.Assigned_By IS NOT NULL AND t2.Assigned_By IS NULL)) OR (t1.Assigned_To <> t2.Assigned_To OR ( t1.Assigned_To IS NULL AND t2.Assigned_To IS NOT NULL) OR (t1.Assigned_To IS NOT NULL AND t2.Assigned_To IS NULL)) OR (t1.Assigned_Date <> t2.Assigned_Date OR ( t1.Assigned_Date IS NULL AND t2.Assigned_Date IS NOT NULL) OR (t1.Assigned_Date IS NOT NULL AND t2.Assigned_Date IS NULL)) OR (t1.Completion_Date <> t2.Completion_Date OR ( t1.Completion_Date IS NULL AND t2.Completion_Date IS NOT NULL) OR (t1.Completion_Date IS NOT NULL AND t2.Completion_Date IS NULL)) OR (t1.Locked_By <> t2.Locked_By OR ( t1.Locked_By IS NULL AND t2.Locked_By IS NOT NULL) OR (t1.Locked_By IS NOT NULL AND t2.Locked_By IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_PROCESS_TASKS', 'INSERT INTO NC_WF_PROCESS_TASKS ( SCENARIO_ID,PROCESS_ID,TASK_ID,TASK_NODE,MESSAGE,STATUS,ASSIGNED_BY,ASSIGNED_TO,ASSIGNED_DATE,COMPLETION_DATE,LOCKED_BY,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.TASK_ID,t1.TASK_NODE,t1.MESSAGE,t1.STATUS,t1.ASSIGNED_BY,t1.ASSIGNED_TO,t1.ASSIGNED_DATE,t1.COMPLETION_DATE,t1.LOCKED_BY,''ACTIVATE'',''VALID'' FROM IN_WF_PROCESS_TASKS t1, WF_PROCESS_TASKS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_TASK_AUDIT', 'INSERT INTO NC_WF_TASK_AUDIT ( SCENARIO_ID,TASK_ID,TASK_NODE,OPERATION,REASSIGN_COMMENT,REASSIGNED_TO,TASK_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,TASK_ID,TASK_NODE,OPERATION,REASSIGN_COMMENT,REASSIGNED_TO,TASK_SEQUENCE,''INSERT'',''VALID'' FROM IN_WF_TASK_AUDIT t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_TASK_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND t1.Task_Sequence = t2.Task_Sequence )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_TASK_AUDIT', 'INSERT INTO NC_WF_TASK_AUDIT ( SCENARIO_ID,TASK_ID,TASK_NODE,OPERATION,REASSIGN_COMMENT,REASSIGNED_TO,TASK_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,TASK_ID,TASK_NODE,OPERATION,REASSIGN_COMMENT,REASSIGNED_TO,TASK_SEQUENCE,''DELETE'',''VALID'' FROM WF_TASK_AUDIT t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_TASK_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND t1.Task_Sequence = t2.Task_Sequence ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_TASK_AUDIT t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND t1.Task_Sequence = t2.Task_Sequence));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_TASK_AUDIT', 'INSERT INTO NC_WF_TASK_AUDIT ( SCENARIO_ID,TASK_ID,TASK_NODE,OPERATION,REASSIGN_COMMENT,REASSIGNED_TO,TASK_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.TASK_ID,t1.TASK_NODE,t1.OPERATION,t1.REASSIGN_COMMENT,t1.REASSIGNED_TO,t1.TASK_SEQUENCE,''UPDATE'',''VALID'' FROM IN_WF_TASK_AUDIT t1, WF_TASK_AUDIT t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND t1.Task_Sequence = t2.Task_Sequence AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Task_Id <> t2.Task_Id OR ( t1.Task_Id IS NULL AND t2.Task_Id IS NOT NULL) OR (t1.Task_Id IS NOT NULL AND t2.Task_Id IS NULL)) OR (t1.Task_Node <> t2.Task_Node OR ( t1.Task_Node IS NULL AND t2.Task_Node IS NOT NULL) OR (t1.Task_Node IS NOT NULL AND t2.Task_Node IS NULL)) OR (t1.Operation <> t2.Operation OR ( t1.Operation IS NULL AND t2.Operation IS NOT NULL) OR (t1.Operation IS NOT NULL AND t2.Operation IS NULL)) OR (t1.Reassign_Comment <> t2.Reassign_Comment OR ( t1.Reassign_Comment IS NULL AND t2.Reassign_Comment IS NOT NULL) OR (t1.Reassign_Comment IS NOT NULL AND t2.Reassign_Comment IS NULL)) OR (t1.Reassigned_To <> t2.Reassigned_To OR ( t1.Reassigned_To IS NULL AND t2.Reassigned_To IS NOT NULL) OR (t1.Reassigned_To IS NOT NULL AND t2.Reassigned_To IS NULL)) OR (t1.Task_Sequence <> t2.Task_Sequence OR ( t1.Task_Sequence IS NULL AND t2.Task_Sequence IS NOT NULL) OR (t1.Task_Sequence IS NOT NULL AND t2.Task_Sequence IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_TASK_AUDIT', 'INSERT INTO NC_WF_TASK_AUDIT ( SCENARIO_ID,TASK_ID,TASK_NODE,OPERATION,REASSIGN_COMMENT,REASSIGNED_TO,TASK_SEQUENCE,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.TASK_ID,t1.TASK_NODE,t1.OPERATION,t1.REASSIGN_COMMENT,t1.REASSIGNED_TO,t1.TASK_SEQUENCE,''ACTIVATE'',''VALID'' FROM IN_WF_TASK_AUDIT t1, WF_TASK_AUDIT t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Task_Id = t2.Task_Id AND t1.Task_Node = t2.Task_Node AND t1.Task_Sequence = t2.Task_Sequence AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_WORKFLOWS', 'INSERT INTO NC_WF_WORKFLOWS ( SCENARIO_ID,PROCESS_ID,WORKFLOW,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,WORKFLOW,''INSERT'',''VALID'' FROM IN_WF_WORKFLOWS t1  WHERE  NOT EXISTS ( SELECT ''X'' FROM WF_WORKFLOWS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id )  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'INSERT');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_WORKFLOWS', 'INSERT INTO NC_WF_WORKFLOWS ( SCENARIO_ID,PROCESS_ID,WORKFLOW,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,PROCESS_ID,WORKFLOW,''DELETE'',''VALID'' FROM WF_WORKFLOWS t2  WHERE t2.SYS_ENT_STATE != ''DELETED'' AND t2.SCENARIO_ID IN (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ) AND  NOT_EXISTS ( SELECT ''X'' FROM IN_WF_WORKFLOWS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id ) AND  NOT_EXISTS ( SELECT ''X'' FROM ERR_WF_WORKFLOWS t1 WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id));', 'DELETE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_WORKFLOWS', 'INSERT INTO NC_WF_WORKFLOWS ( SCENARIO_ID,PROCESS_ID,WORKFLOW,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.WORKFLOW,''UPDATE'',''VALID'' FROM IN_WF_WORKFLOWS t1, WF_WORKFLOWS t2  WHERE  t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND ( (t2.SYS_ENT_STATE <> ''DELETED'') AND ( (t1.Process_Id <> t2.Process_Id OR ( t1.Process_Id IS NULL AND t2.Process_Id IS NOT NULL) OR (t1.Process_Id IS NOT NULL AND t2.Process_Id IS NULL)) OR (t1.Workflow <> t2.Workflow OR ( t1.Workflow IS NULL AND t2.Workflow IS NOT NULL) OR (t1.Workflow IS NOT NULL AND t2.Workflow IS NULL)) )) AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'UPDATE');

INSERT INTO SYS_NC_SQLS VALUES ('IN_WF_WORKFLOWS', 'INSERT INTO NC_WF_WORKFLOWS ( SCENARIO_ID,PROCESS_ID,WORKFLOW,SYS_NC_TYPE,SYS_NC_STATE) ( SELECT SCENARIO_ID,t1.PROCESS_ID,t1.WORKFLOW,''ACTIVATE'',''VALID'' FROM IN_WF_WORKFLOWS t1, WF_WORKFLOWS t2  WHERE t1.SCENARIO_ID = t2.SCENARIO_ID  AND t1.Process_Id = t2.Process_Id AND ((t2.SYS_ENT_STATE = ''DELETED''))  AND t1.SCENARIO_ID in (SELECT SCENARIOID FROM MST_SCENARIO_MASTER  WHERE IS_PRIMARY = ''TRUE'' ));', 'ACTIVATE');

